
import
  json, options, hashes, uri, rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: WebApps API Client
## version: 2018-11-01
## termsOfService: (not provided)
## license: (not provided)
## 
## 
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_567666 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_567666](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_567666): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "web-WebApps"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_WebAppsList_567888 = ref object of OpenApiRestCall_567666
proc url_WebAppsList_567890(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsList_567889(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Get all apps for a subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `subscriptionId` field"
  var valid_568063 = path.getOrDefault("subscriptionId")
  valid_568063 = validateParameter(valid_568063, JString, required = true,
                                 default = nil)
  if valid_568063 != nil:
    section.add "subscriptionId", valid_568063
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568064 = query.getOrDefault("api-version")
  valid_568064 = validateParameter(valid_568064, JString, required = true,
                                 default = nil)
  if valid_568064 != nil:
    section.add "api-version", valid_568064
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568087: Call_WebAppsList_567888; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get all apps for a subscription.
  ## 
  let valid = call_568087.validator(path, query, header, formData, body)
  let scheme = call_568087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568087.url(scheme.get, call_568087.host, call_568087.base,
                         call_568087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568087, url, valid)

proc call*(call_568158: Call_WebAppsList_567888; apiVersion: string;
          subscriptionId: string): Recallable =
  ## webAppsList
  ## Get all apps for a subscription.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568159 = newJObject()
  var query_568161 = newJObject()
  add(query_568161, "api-version", newJString(apiVersion))
  add(path_568159, "subscriptionId", newJString(subscriptionId))
  result = call_568158.call(path_568159, query_568161, nil, nil, nil)

var webAppsList* = Call_WebAppsList_567888(name: "webAppsList",
                                        meth: HttpMethod.HttpGet,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
                                        validator: validate_WebAppsList_567889,
                                        base: "", url: url_WebAppsList_567890,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsListByResourceGroup_568200 = ref object of OpenApiRestCall_567666
proc url_WebAppsListByResourceGroup_568202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"),
               (kind: ConstantSegment, value: "/providers/Microsoft.Web/sites")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListByResourceGroup_568201(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568203 = path.getOrDefault("resourceGroupName")
  valid_568203 = validateParameter(valid_568203, JString, required = true,
                                 default = nil)
  if valid_568203 != nil:
    section.add "resourceGroupName", valid_568203
  var valid_568204 = path.getOrDefault("subscriptionId")
  valid_568204 = validateParameter(valid_568204, JString, required = true,
                                 default = nil)
  if valid_568204 != nil:
    section.add "subscriptionId", valid_568204
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   includeSlots: JBool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568205 = query.getOrDefault("api-version")
  valid_568205 = validateParameter(valid_568205, JString, required = true,
                                 default = nil)
  if valid_568205 != nil:
    section.add "api-version", valid_568205
  var valid_568206 = query.getOrDefault("includeSlots")
  valid_568206 = validateParameter(valid_568206, JBool, required = false, default = nil)
  if valid_568206 != nil:
    section.add "includeSlots", valid_568206
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568207: Call_WebAppsListByResourceGroup_568200; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all web, mobile, and API apps in the specified resource group.
  ## 
  let valid = call_568207.validator(path, query, header, formData, body)
  let scheme = call_568207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568207.url(scheme.get, call_568207.host, call_568207.base,
                         call_568207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568207, url, valid)

proc call*(call_568208: Call_WebAppsListByResourceGroup_568200;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          includeSlots: bool = false): Recallable =
  ## webAppsListByResourceGroup
  ## Gets all web, mobile, and API apps in the specified resource group.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   includeSlots: bool
  ##               : Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
  var path_568209 = newJObject()
  var query_568210 = newJObject()
  add(path_568209, "resourceGroupName", newJString(resourceGroupName))
  add(query_568210, "api-version", newJString(apiVersion))
  add(path_568209, "subscriptionId", newJString(subscriptionId))
  add(query_568210, "includeSlots", newJBool(includeSlots))
  result = call_568208.call(path_568209, query_568210, nil, nil, nil)

var webAppsListByResourceGroup* = Call_WebAppsListByResourceGroup_568200(
    name: "webAppsListByResourceGroup", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
    validator: validate_WebAppsListByResourceGroup_568201, base: "",
    url: url_WebAppsListByResourceGroup_568202, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdate_568222 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdate_568224(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdate_568223(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568225 = path.getOrDefault("resourceGroupName")
  valid_568225 = validateParameter(valid_568225, JString, required = true,
                                 default = nil)
  if valid_568225 != nil:
    section.add "resourceGroupName", valid_568225
  var valid_568226 = path.getOrDefault("name")
  valid_568226 = validateParameter(valid_568226, JString, required = true,
                                 default = nil)
  if valid_568226 != nil:
    section.add "name", valid_568226
  var valid_568227 = path.getOrDefault("subscriptionId")
  valid_568227 = validateParameter(valid_568227, JString, required = true,
                                 default = nil)
  if valid_568227 != nil:
    section.add "subscriptionId", valid_568227
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568228 = query.getOrDefault("api-version")
  valid_568228 = validateParameter(valid_568228, JString, required = true,
                                 default = nil)
  if valid_568228 != nil:
    section.add "api-version", valid_568228
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568230: Call_WebAppsCreateOrUpdate_568222; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_568230.validator(path, query, header, formData, body)
  let scheme = call_568230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568230.url(scheme.get, call_568230.host, call_568230.base,
                         call_568230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568230, url, valid)

proc call*(call_568231: Call_WebAppsCreateOrUpdate_568222; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568232 = newJObject()
  var query_568233 = newJObject()
  var body_568234 = newJObject()
  if siteEnvelope != nil:
    body_568234 = siteEnvelope
  add(path_568232, "resourceGroupName", newJString(resourceGroupName))
  add(query_568233, "api-version", newJString(apiVersion))
  add(path_568232, "name", newJString(name))
  add(path_568232, "subscriptionId", newJString(subscriptionId))
  result = call_568231.call(path_568232, query_568233, nil, nil, body_568234)

var webAppsCreateOrUpdate* = Call_WebAppsCreateOrUpdate_568222(
    name: "webAppsCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsCreateOrUpdate_568223, base: "",
    url: url_WebAppsCreateOrUpdate_568224, schemes: {Scheme.Https})
type
  Call_WebAppsGet_568211 = ref object of OpenApiRestCall_567666
proc url_WebAppsGet_568213(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGet_568212(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568214 = path.getOrDefault("resourceGroupName")
  valid_568214 = validateParameter(valid_568214, JString, required = true,
                                 default = nil)
  if valid_568214 != nil:
    section.add "resourceGroupName", valid_568214
  var valid_568215 = path.getOrDefault("name")
  valid_568215 = validateParameter(valid_568215, JString, required = true,
                                 default = nil)
  if valid_568215 != nil:
    section.add "name", valid_568215
  var valid_568216 = path.getOrDefault("subscriptionId")
  valid_568216 = validateParameter(valid_568216, JString, required = true,
                                 default = nil)
  if valid_568216 != nil:
    section.add "subscriptionId", valid_568216
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568217 = query.getOrDefault("api-version")
  valid_568217 = validateParameter(valid_568217, JString, required = true,
                                 default = nil)
  if valid_568217 != nil:
    section.add "api-version", valid_568217
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568218: Call_WebAppsGet_568211; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_568218.validator(path, query, header, formData, body)
  let scheme = call_568218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568218.url(scheme.get, call_568218.host, call_568218.base,
                         call_568218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568218, url, valid)

proc call*(call_568219: Call_WebAppsGet_568211; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsGet
  ## Gets the details of a web, mobile, or API app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568220 = newJObject()
  var query_568221 = newJObject()
  add(path_568220, "resourceGroupName", newJString(resourceGroupName))
  add(query_568221, "api-version", newJString(apiVersion))
  add(path_568220, "name", newJString(name))
  add(path_568220, "subscriptionId", newJString(subscriptionId))
  result = call_568219.call(path_568220, query_568221, nil, nil, nil)

var webAppsGet* = Call_WebAppsGet_568211(name: "webAppsGet",
                                      meth: HttpMethod.HttpGet,
                                      host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
                                      validator: validate_WebAppsGet_568212,
                                      base: "", url: url_WebAppsGet_568213,
                                      schemes: {Scheme.Https})
type
  Call_WebAppsUpdate_568248 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdate_568250(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdate_568249(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568251 = path.getOrDefault("resourceGroupName")
  valid_568251 = validateParameter(valid_568251, JString, required = true,
                                 default = nil)
  if valid_568251 != nil:
    section.add "resourceGroupName", valid_568251
  var valid_568252 = path.getOrDefault("name")
  valid_568252 = validateParameter(valid_568252, JString, required = true,
                                 default = nil)
  if valid_568252 != nil:
    section.add "name", valid_568252
  var valid_568253 = path.getOrDefault("subscriptionId")
  valid_568253 = validateParameter(valid_568253, JString, required = true,
                                 default = nil)
  if valid_568253 != nil:
    section.add "subscriptionId", valid_568253
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568254 = query.getOrDefault("api-version")
  valid_568254 = validateParameter(valid_568254, JString, required = true,
                                 default = nil)
  if valid_568254 != nil:
    section.add "api-version", valid_568254
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568256: Call_WebAppsUpdate_568248; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_568256.validator(path, query, header, formData, body)
  let scheme = call_568256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568256.url(scheme.get, call_568256.host, call_568256.base,
                         call_568256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568256, url, valid)

proc call*(call_568257: Call_WebAppsUpdate_568248; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdate
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568258 = newJObject()
  var query_568259 = newJObject()
  var body_568260 = newJObject()
  if siteEnvelope != nil:
    body_568260 = siteEnvelope
  add(path_568258, "resourceGroupName", newJString(resourceGroupName))
  add(query_568259, "api-version", newJString(apiVersion))
  add(path_568258, "name", newJString(name))
  add(path_568258, "subscriptionId", newJString(subscriptionId))
  result = call_568257.call(path_568258, query_568259, nil, nil, body_568260)

var webAppsUpdate* = Call_WebAppsUpdate_568248(name: "webAppsUpdate",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsUpdate_568249, base: "", url: url_WebAppsUpdate_568250,
    schemes: {Scheme.Https})
type
  Call_WebAppsDelete_568235 = ref object of OpenApiRestCall_567666
proc url_WebAppsDelete_568237(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDelete_568236(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568238 = path.getOrDefault("resourceGroupName")
  valid_568238 = validateParameter(valid_568238, JString, required = true,
                                 default = nil)
  if valid_568238 != nil:
    section.add "resourceGroupName", valid_568238
  var valid_568239 = path.getOrDefault("name")
  valid_568239 = validateParameter(valid_568239, JString, required = true,
                                 default = nil)
  if valid_568239 != nil:
    section.add "name", valid_568239
  var valid_568240 = path.getOrDefault("subscriptionId")
  valid_568240 = validateParameter(valid_568240, JString, required = true,
                                 default = nil)
  if valid_568240 != nil:
    section.add "subscriptionId", valid_568240
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568241 = query.getOrDefault("api-version")
  valid_568241 = validateParameter(valid_568241, JString, required = true,
                                 default = nil)
  if valid_568241 != nil:
    section.add "api-version", valid_568241
  var valid_568242 = query.getOrDefault("deleteMetrics")
  valid_568242 = validateParameter(valid_568242, JBool, required = false, default = nil)
  if valid_568242 != nil:
    section.add "deleteMetrics", valid_568242
  var valid_568243 = query.getOrDefault("deleteEmptyServerFarm")
  valid_568243 = validateParameter(valid_568243, JBool, required = false, default = nil)
  if valid_568243 != nil:
    section.add "deleteEmptyServerFarm", valid_568243
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568244: Call_WebAppsDelete_568235; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_568244.validator(path, query, header, formData, body)
  let scheme = call_568244.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568244.url(scheme.get, call_568244.host, call_568244.base,
                         call_568244.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568244, url, valid)

proc call*(call_568245: Call_WebAppsDelete_568235; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          deleteMetrics: bool = false; deleteEmptyServerFarm: bool = false): Recallable =
  ## webAppsDelete
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  var path_568246 = newJObject()
  var query_568247 = newJObject()
  add(path_568246, "resourceGroupName", newJString(resourceGroupName))
  add(query_568247, "api-version", newJString(apiVersion))
  add(path_568246, "name", newJString(name))
  add(path_568246, "subscriptionId", newJString(subscriptionId))
  add(query_568247, "deleteMetrics", newJBool(deleteMetrics))
  add(query_568247, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  result = call_568245.call(path_568246, query_568247, nil, nil, nil)

var webAppsDelete* = Call_WebAppsDelete_568235(name: "webAppsDelete",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    validator: validate_WebAppsDelete_568236, base: "", url: url_WebAppsDelete_568237,
    schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostname_568261 = ref object of OpenApiRestCall_567666
proc url_WebAppsAnalyzeCustomHostname_568263(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostname_568262(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568264 = path.getOrDefault("resourceGroupName")
  valid_568264 = validateParameter(valid_568264, JString, required = true,
                                 default = nil)
  if valid_568264 != nil:
    section.add "resourceGroupName", valid_568264
  var valid_568265 = path.getOrDefault("name")
  valid_568265 = validateParameter(valid_568265, JString, required = true,
                                 default = nil)
  if valid_568265 != nil:
    section.add "name", valid_568265
  var valid_568266 = path.getOrDefault("subscriptionId")
  valid_568266 = validateParameter(valid_568266, JString, required = true,
                                 default = nil)
  if valid_568266 != nil:
    section.add "subscriptionId", valid_568266
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568267 = query.getOrDefault("api-version")
  valid_568267 = validateParameter(valid_568267, JString, required = true,
                                 default = nil)
  if valid_568267 != nil:
    section.add "api-version", valid_568267
  var valid_568268 = query.getOrDefault("hostName")
  valid_568268 = validateParameter(valid_568268, JString, required = false,
                                 default = nil)
  if valid_568268 != nil:
    section.add "hostName", valid_568268
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568269: Call_WebAppsAnalyzeCustomHostname_568261; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_568269.validator(path, query, header, formData, body)
  let scheme = call_568269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568269.url(scheme.get, call_568269.host, call_568269.base,
                         call_568269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568269, url, valid)

proc call*(call_568270: Call_WebAppsAnalyzeCustomHostname_568261;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostname
  ## Analyze a custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   hostName: string
  ##           : Custom hostname.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568271 = newJObject()
  var query_568272 = newJObject()
  add(path_568271, "resourceGroupName", newJString(resourceGroupName))
  add(query_568272, "api-version", newJString(apiVersion))
  add(path_568271, "name", newJString(name))
  add(query_568272, "hostName", newJString(hostName))
  add(path_568271, "subscriptionId", newJString(subscriptionId))
  result = call_568270.call(path_568271, query_568272, nil, nil, nil)

var webAppsAnalyzeCustomHostname* = Call_WebAppsAnalyzeCustomHostname_568261(
    name: "webAppsAnalyzeCustomHostname", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostname_568262, base: "",
    url: url_WebAppsAnalyzeCustomHostname_568263, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigToProduction_568273 = ref object of OpenApiRestCall_567666
proc url_WebAppsApplySlotConfigToProduction_568275(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigToProduction_568274(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568276 = path.getOrDefault("resourceGroupName")
  valid_568276 = validateParameter(valid_568276, JString, required = true,
                                 default = nil)
  if valid_568276 != nil:
    section.add "resourceGroupName", valid_568276
  var valid_568277 = path.getOrDefault("name")
  valid_568277 = validateParameter(valid_568277, JString, required = true,
                                 default = nil)
  if valid_568277 != nil:
    section.add "name", valid_568277
  var valid_568278 = path.getOrDefault("subscriptionId")
  valid_568278 = validateParameter(valid_568278, JString, required = true,
                                 default = nil)
  if valid_568278 != nil:
    section.add "subscriptionId", valid_568278
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568279 = query.getOrDefault("api-version")
  valid_568279 = validateParameter(valid_568279, JString, required = true,
                                 default = nil)
  if valid_568279 != nil:
    section.add "api-version", valid_568279
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568281: Call_WebAppsApplySlotConfigToProduction_568273;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_568281.validator(path, query, header, formData, body)
  let scheme = call_568281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568281.url(scheme.get, call_568281.host, call_568281.base,
                         call_568281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568281, url, valid)

proc call*(call_568282: Call_WebAppsApplySlotConfigToProduction_568273;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsApplySlotConfigToProduction
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_568283 = newJObject()
  var query_568284 = newJObject()
  var body_568285 = newJObject()
  add(path_568283, "resourceGroupName", newJString(resourceGroupName))
  add(query_568284, "api-version", newJString(apiVersion))
  add(path_568283, "name", newJString(name))
  add(path_568283, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_568285 = slotSwapEntity
  result = call_568282.call(path_568283, query_568284, nil, nil, body_568285)

var webAppsApplySlotConfigToProduction* = Call_WebAppsApplySlotConfigToProduction_568273(
    name: "webAppsApplySlotConfigToProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigToProduction_568274, base: "",
    url: url_WebAppsApplySlotConfigToProduction_568275, schemes: {Scheme.Https})
type
  Call_WebAppsBackup_568286 = ref object of OpenApiRestCall_567666
proc url_WebAppsBackup_568288(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackup_568287(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568289 = path.getOrDefault("resourceGroupName")
  valid_568289 = validateParameter(valid_568289, JString, required = true,
                                 default = nil)
  if valid_568289 != nil:
    section.add "resourceGroupName", valid_568289
  var valid_568290 = path.getOrDefault("name")
  valid_568290 = validateParameter(valid_568290, JString, required = true,
                                 default = nil)
  if valid_568290 != nil:
    section.add "name", valid_568290
  var valid_568291 = path.getOrDefault("subscriptionId")
  valid_568291 = validateParameter(valid_568291, JString, required = true,
                                 default = nil)
  if valid_568291 != nil:
    section.add "subscriptionId", valid_568291
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568292 = query.getOrDefault("api-version")
  valid_568292 = validateParameter(valid_568292, JString, required = true,
                                 default = nil)
  if valid_568292 != nil:
    section.add "api-version", valid_568292
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568294: Call_WebAppsBackup_568286; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_568294.validator(path, query, header, formData, body)
  let scheme = call_568294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568294.url(scheme.get, call_568294.host, call_568294.base,
                         call_568294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568294, url, valid)

proc call*(call_568295: Call_WebAppsBackup_568286; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsBackup
  ## Creates a backup of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_568296 = newJObject()
  var query_568297 = newJObject()
  var body_568298 = newJObject()
  add(path_568296, "resourceGroupName", newJString(resourceGroupName))
  add(query_568297, "api-version", newJString(apiVersion))
  add(path_568296, "name", newJString(name))
  add(path_568296, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_568298 = request
  result = call_568295.call(path_568296, query_568297, nil, nil, body_568298)

var webAppsBackup* = Call_WebAppsBackup_568286(name: "webAppsBackup",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
    validator: validate_WebAppsBackup_568287, base: "", url: url_WebAppsBackup_568288,
    schemes: {Scheme.Https})
type
  Call_WebAppsListBackups_568299 = ref object of OpenApiRestCall_567666
proc url_WebAppsListBackups_568301(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackups_568300(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568302 = path.getOrDefault("resourceGroupName")
  valid_568302 = validateParameter(valid_568302, JString, required = true,
                                 default = nil)
  if valid_568302 != nil:
    section.add "resourceGroupName", valid_568302
  var valid_568303 = path.getOrDefault("name")
  valid_568303 = validateParameter(valid_568303, JString, required = true,
                                 default = nil)
  if valid_568303 != nil:
    section.add "name", valid_568303
  var valid_568304 = path.getOrDefault("subscriptionId")
  valid_568304 = validateParameter(valid_568304, JString, required = true,
                                 default = nil)
  if valid_568304 != nil:
    section.add "subscriptionId", valid_568304
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568305 = query.getOrDefault("api-version")
  valid_568305 = validateParameter(valid_568305, JString, required = true,
                                 default = nil)
  if valid_568305 != nil:
    section.add "api-version", valid_568305
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568306: Call_WebAppsListBackups_568299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_568306.validator(path, query, header, formData, body)
  let scheme = call_568306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568306.url(scheme.get, call_568306.host, call_568306.base,
                         call_568306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568306, url, valid)

proc call*(call_568307: Call_WebAppsListBackups_568299; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListBackups
  ## Gets existing backups of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568308 = newJObject()
  var query_568309 = newJObject()
  add(path_568308, "resourceGroupName", newJString(resourceGroupName))
  add(query_568309, "api-version", newJString(apiVersion))
  add(path_568308, "name", newJString(name))
  add(path_568308, "subscriptionId", newJString(subscriptionId))
  result = call_568307.call(path_568308, query_568309, nil, nil, nil)

var webAppsListBackups* = Call_WebAppsListBackups_568299(
    name: "webAppsListBackups", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
    validator: validate_WebAppsListBackups_568300, base: "",
    url: url_WebAppsListBackups_568301, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatus_568310 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetBackupStatus_568312(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatus_568311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568313 = path.getOrDefault("resourceGroupName")
  valid_568313 = validateParameter(valid_568313, JString, required = true,
                                 default = nil)
  if valid_568313 != nil:
    section.add "resourceGroupName", valid_568313
  var valid_568314 = path.getOrDefault("name")
  valid_568314 = validateParameter(valid_568314, JString, required = true,
                                 default = nil)
  if valid_568314 != nil:
    section.add "name", valid_568314
  var valid_568315 = path.getOrDefault("subscriptionId")
  valid_568315 = validateParameter(valid_568315, JString, required = true,
                                 default = nil)
  if valid_568315 != nil:
    section.add "subscriptionId", valid_568315
  var valid_568316 = path.getOrDefault("backupId")
  valid_568316 = validateParameter(valid_568316, JString, required = true,
                                 default = nil)
  if valid_568316 != nil:
    section.add "backupId", valid_568316
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568317 = query.getOrDefault("api-version")
  valid_568317 = validateParameter(valid_568317, JString, required = true,
                                 default = nil)
  if valid_568317 != nil:
    section.add "api-version", valid_568317
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568318: Call_WebAppsGetBackupStatus_568310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_568318.validator(path, query, header, formData, body)
  let scheme = call_568318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568318.url(scheme.get, call_568318.host, call_568318.base,
                         call_568318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568318, url, valid)

proc call*(call_568319: Call_WebAppsGetBackupStatus_568310;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsGetBackupStatus
  ## Gets a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_568320 = newJObject()
  var query_568321 = newJObject()
  add(path_568320, "resourceGroupName", newJString(resourceGroupName))
  add(query_568321, "api-version", newJString(apiVersion))
  add(path_568320, "name", newJString(name))
  add(path_568320, "subscriptionId", newJString(subscriptionId))
  add(path_568320, "backupId", newJString(backupId))
  result = call_568319.call(path_568320, query_568321, nil, nil, nil)

var webAppsGetBackupStatus* = Call_WebAppsGetBackupStatus_568310(
    name: "webAppsGetBackupStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatus_568311, base: "",
    url: url_WebAppsGetBackupStatus_568312, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackup_568322 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteBackup_568324(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackup_568323(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568325 = path.getOrDefault("resourceGroupName")
  valid_568325 = validateParameter(valid_568325, JString, required = true,
                                 default = nil)
  if valid_568325 != nil:
    section.add "resourceGroupName", valid_568325
  var valid_568326 = path.getOrDefault("name")
  valid_568326 = validateParameter(valid_568326, JString, required = true,
                                 default = nil)
  if valid_568326 != nil:
    section.add "name", valid_568326
  var valid_568327 = path.getOrDefault("subscriptionId")
  valid_568327 = validateParameter(valid_568327, JString, required = true,
                                 default = nil)
  if valid_568327 != nil:
    section.add "subscriptionId", valid_568327
  var valid_568328 = path.getOrDefault("backupId")
  valid_568328 = validateParameter(valid_568328, JString, required = true,
                                 default = nil)
  if valid_568328 != nil:
    section.add "backupId", valid_568328
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568329 = query.getOrDefault("api-version")
  valid_568329 = validateParameter(valid_568329, JString, required = true,
                                 default = nil)
  if valid_568329 != nil:
    section.add "api-version", valid_568329
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568330: Call_WebAppsDeleteBackup_568322; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_568330.validator(path, query, header, formData, body)
  let scheme = call_568330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568330.url(scheme.get, call_568330.host, call_568330.base,
                         call_568330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568330, url, valid)

proc call*(call_568331: Call_WebAppsDeleteBackup_568322; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; backupId: string): Recallable =
  ## webAppsDeleteBackup
  ## Deletes a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_568332 = newJObject()
  var query_568333 = newJObject()
  add(path_568332, "resourceGroupName", newJString(resourceGroupName))
  add(query_568333, "api-version", newJString(apiVersion))
  add(path_568332, "name", newJString(name))
  add(path_568332, "subscriptionId", newJString(subscriptionId))
  add(path_568332, "backupId", newJString(backupId))
  result = call_568331.call(path_568332, query_568333, nil, nil, nil)

var webAppsDeleteBackup* = Call_WebAppsDeleteBackup_568322(
    name: "webAppsDeleteBackup", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackup_568323, base: "",
    url: url_WebAppsDeleteBackup_568324, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecrets_568334 = ref object of OpenApiRestCall_567666
proc url_WebAppsListBackupStatusSecrets_568336(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecrets_568335(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568337 = path.getOrDefault("resourceGroupName")
  valid_568337 = validateParameter(valid_568337, JString, required = true,
                                 default = nil)
  if valid_568337 != nil:
    section.add "resourceGroupName", valid_568337
  var valid_568338 = path.getOrDefault("name")
  valid_568338 = validateParameter(valid_568338, JString, required = true,
                                 default = nil)
  if valid_568338 != nil:
    section.add "name", valid_568338
  var valid_568339 = path.getOrDefault("subscriptionId")
  valid_568339 = validateParameter(valid_568339, JString, required = true,
                                 default = nil)
  if valid_568339 != nil:
    section.add "subscriptionId", valid_568339
  var valid_568340 = path.getOrDefault("backupId")
  valid_568340 = validateParameter(valid_568340, JString, required = true,
                                 default = nil)
  if valid_568340 != nil:
    section.add "backupId", valid_568340
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568341 = query.getOrDefault("api-version")
  valid_568341 = validateParameter(valid_568341, JString, required = true,
                                 default = nil)
  if valid_568341 != nil:
    section.add "api-version", valid_568341
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568343: Call_WebAppsListBackupStatusSecrets_568334; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_568343.validator(path, query, header, formData, body)
  let scheme = call_568343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568343.url(scheme.get, call_568343.host, call_568343.base,
                         call_568343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568343, url, valid)

proc call*(call_568344: Call_WebAppsListBackupStatusSecrets_568334;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## webAppsListBackupStatusSecrets
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on backup request.
  ##   backupId: string (required)
  ##           : ID of backup.
  var path_568345 = newJObject()
  var query_568346 = newJObject()
  var body_568347 = newJObject()
  add(path_568345, "resourceGroupName", newJString(resourceGroupName))
  add(query_568346, "api-version", newJString(apiVersion))
  add(path_568345, "name", newJString(name))
  add(path_568345, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_568347 = request
  add(path_568345, "backupId", newJString(backupId))
  result = call_568344.call(path_568345, query_568346, nil, nil, body_568347)

var webAppsListBackupStatusSecrets* = Call_WebAppsListBackupStatusSecrets_568334(
    name: "webAppsListBackupStatusSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecrets_568335, base: "",
    url: url_WebAppsListBackupStatusSecrets_568336, schemes: {Scheme.Https})
type
  Call_WebAppsRestore_568348 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestore_568350(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestore_568349(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568351 = path.getOrDefault("resourceGroupName")
  valid_568351 = validateParameter(valid_568351, JString, required = true,
                                 default = nil)
  if valid_568351 != nil:
    section.add "resourceGroupName", valid_568351
  var valid_568352 = path.getOrDefault("name")
  valid_568352 = validateParameter(valid_568352, JString, required = true,
                                 default = nil)
  if valid_568352 != nil:
    section.add "name", valid_568352
  var valid_568353 = path.getOrDefault("subscriptionId")
  valid_568353 = validateParameter(valid_568353, JString, required = true,
                                 default = nil)
  if valid_568353 != nil:
    section.add "subscriptionId", valid_568353
  var valid_568354 = path.getOrDefault("backupId")
  valid_568354 = validateParameter(valid_568354, JString, required = true,
                                 default = nil)
  if valid_568354 != nil:
    section.add "backupId", valid_568354
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568355 = query.getOrDefault("api-version")
  valid_568355 = validateParameter(valid_568355, JString, required = true,
                                 default = nil)
  if valid_568355 != nil:
    section.add "api-version", valid_568355
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568357: Call_WebAppsRestore_568348; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_568357.validator(path, query, header, formData, body)
  let scheme = call_568357.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568357.url(scheme.get, call_568357.host, call_568357.base,
                         call_568357.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568357, url, valid)

proc call*(call_568358: Call_WebAppsRestore_568348; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; request: JsonNode;
          backupId: string): Recallable =
  ## webAppsRestore
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_568359 = newJObject()
  var query_568360 = newJObject()
  var body_568361 = newJObject()
  add(path_568359, "resourceGroupName", newJString(resourceGroupName))
  add(query_568360, "api-version", newJString(apiVersion))
  add(path_568359, "name", newJString(name))
  add(path_568359, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_568361 = request
  add(path_568359, "backupId", newJString(backupId))
  result = call_568358.call(path_568359, query_568360, nil, nil, body_568361)

var webAppsRestore* = Call_WebAppsRestore_568348(name: "webAppsRestore",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
    validator: validate_WebAppsRestore_568349, base: "", url: url_WebAppsRestore_568350,
    schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurations_568362 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConfigurations_568364(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurations_568363(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568365 = path.getOrDefault("resourceGroupName")
  valid_568365 = validateParameter(valid_568365, JString, required = true,
                                 default = nil)
  if valid_568365 != nil:
    section.add "resourceGroupName", valid_568365
  var valid_568366 = path.getOrDefault("name")
  valid_568366 = validateParameter(valid_568366, JString, required = true,
                                 default = nil)
  if valid_568366 != nil:
    section.add "name", valid_568366
  var valid_568367 = path.getOrDefault("subscriptionId")
  valid_568367 = validateParameter(valid_568367, JString, required = true,
                                 default = nil)
  if valid_568367 != nil:
    section.add "subscriptionId", valid_568367
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568368 = query.getOrDefault("api-version")
  valid_568368 = validateParameter(valid_568368, JString, required = true,
                                 default = nil)
  if valid_568368 != nil:
    section.add "api-version", valid_568368
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568369: Call_WebAppsListConfigurations_568362; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_568369.validator(path, query, header, formData, body)
  let scheme = call_568369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568369.url(scheme.get, call_568369.host, call_568369.base,
                         call_568369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568369, url, valid)

proc call*(call_568370: Call_WebAppsListConfigurations_568362;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurations
  ## List the configurations of an app
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568371 = newJObject()
  var query_568372 = newJObject()
  add(path_568371, "resourceGroupName", newJString(resourceGroupName))
  add(query_568372, "api-version", newJString(apiVersion))
  add(path_568371, "name", newJString(name))
  add(path_568371, "subscriptionId", newJString(subscriptionId))
  result = call_568370.call(path_568371, query_568372, nil, nil, nil)

var webAppsListConfigurations* = Call_WebAppsListConfigurations_568362(
    name: "webAppsListConfigurations", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config",
    validator: validate_WebAppsListConfigurations_568363, base: "",
    url: url_WebAppsListConfigurations_568364, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettings_568373 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateApplicationSettings_568375(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettings_568374(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568376 = path.getOrDefault("resourceGroupName")
  valid_568376 = validateParameter(valid_568376, JString, required = true,
                                 default = nil)
  if valid_568376 != nil:
    section.add "resourceGroupName", valid_568376
  var valid_568377 = path.getOrDefault("name")
  valid_568377 = validateParameter(valid_568377, JString, required = true,
                                 default = nil)
  if valid_568377 != nil:
    section.add "name", valid_568377
  var valid_568378 = path.getOrDefault("subscriptionId")
  valid_568378 = validateParameter(valid_568378, JString, required = true,
                                 default = nil)
  if valid_568378 != nil:
    section.add "subscriptionId", valid_568378
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568379 = query.getOrDefault("api-version")
  valid_568379 = validateParameter(valid_568379, JString, required = true,
                                 default = nil)
  if valid_568379 != nil:
    section.add "api-version", valid_568379
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568381: Call_WebAppsUpdateApplicationSettings_568373;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_568381.validator(path, query, header, formData, body)
  let scheme = call_568381.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568381.url(scheme.get, call_568381.host, call_568381.base,
                         call_568381.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568381, url, valid)

proc call*(call_568382: Call_WebAppsUpdateApplicationSettings_568373;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateApplicationSettings
  ## Replaces the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568383 = newJObject()
  var query_568384 = newJObject()
  var body_568385 = newJObject()
  add(path_568383, "resourceGroupName", newJString(resourceGroupName))
  add(query_568384, "api-version", newJString(apiVersion))
  add(path_568383, "name", newJString(name))
  if appSettings != nil:
    body_568385 = appSettings
  add(path_568383, "subscriptionId", newJString(subscriptionId))
  result = call_568382.call(path_568383, query_568384, nil, nil, body_568385)

var webAppsUpdateApplicationSettings* = Call_WebAppsUpdateApplicationSettings_568373(
    name: "webAppsUpdateApplicationSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettings_568374, base: "",
    url: url_WebAppsUpdateApplicationSettings_568375, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettings_568386 = ref object of OpenApiRestCall_567666
proc url_WebAppsListApplicationSettings_568388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettings_568387(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568389 = path.getOrDefault("resourceGroupName")
  valid_568389 = validateParameter(valid_568389, JString, required = true,
                                 default = nil)
  if valid_568389 != nil:
    section.add "resourceGroupName", valid_568389
  var valid_568390 = path.getOrDefault("name")
  valid_568390 = validateParameter(valid_568390, JString, required = true,
                                 default = nil)
  if valid_568390 != nil:
    section.add "name", valid_568390
  var valid_568391 = path.getOrDefault("subscriptionId")
  valid_568391 = validateParameter(valid_568391, JString, required = true,
                                 default = nil)
  if valid_568391 != nil:
    section.add "subscriptionId", valid_568391
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568392 = query.getOrDefault("api-version")
  valid_568392 = validateParameter(valid_568392, JString, required = true,
                                 default = nil)
  if valid_568392 != nil:
    section.add "api-version", valid_568392
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568393: Call_WebAppsListApplicationSettings_568386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_568393.validator(path, query, header, formData, body)
  let scheme = call_568393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568393.url(scheme.get, call_568393.host, call_568393.base,
                         call_568393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568393, url, valid)

proc call*(call_568394: Call_WebAppsListApplicationSettings_568386;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListApplicationSettings
  ## Gets the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568395 = newJObject()
  var query_568396 = newJObject()
  add(path_568395, "resourceGroupName", newJString(resourceGroupName))
  add(query_568396, "api-version", newJString(apiVersion))
  add(path_568395, "name", newJString(name))
  add(path_568395, "subscriptionId", newJString(subscriptionId))
  result = call_568394.call(path_568395, query_568396, nil, nil, nil)

var webAppsListApplicationSettings* = Call_WebAppsListApplicationSettings_568386(
    name: "webAppsListApplicationSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettings_568387, base: "",
    url: url_WebAppsListApplicationSettings_568388, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettings_568397 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateAuthSettings_568399(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettings_568398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568400 = path.getOrDefault("resourceGroupName")
  valid_568400 = validateParameter(valid_568400, JString, required = true,
                                 default = nil)
  if valid_568400 != nil:
    section.add "resourceGroupName", valid_568400
  var valid_568401 = path.getOrDefault("name")
  valid_568401 = validateParameter(valid_568401, JString, required = true,
                                 default = nil)
  if valid_568401 != nil:
    section.add "name", valid_568401
  var valid_568402 = path.getOrDefault("subscriptionId")
  valid_568402 = validateParameter(valid_568402, JString, required = true,
                                 default = nil)
  if valid_568402 != nil:
    section.add "subscriptionId", valid_568402
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568403 = query.getOrDefault("api-version")
  valid_568403 = validateParameter(valid_568403, JString, required = true,
                                 default = nil)
  if valid_568403 != nil:
    section.add "api-version", valid_568403
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568405: Call_WebAppsUpdateAuthSettings_568397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_568405.validator(path, query, header, formData, body)
  let scheme = call_568405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568405.url(scheme.get, call_568405.host, call_568405.base,
                         call_568405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568405, url, valid)

proc call*(call_568406: Call_WebAppsUpdateAuthSettings_568397;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## webAppsUpdateAuthSettings
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  var path_568407 = newJObject()
  var query_568408 = newJObject()
  var body_568409 = newJObject()
  add(path_568407, "resourceGroupName", newJString(resourceGroupName))
  add(query_568408, "api-version", newJString(apiVersion))
  add(path_568407, "name", newJString(name))
  add(path_568407, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_568409 = siteAuthSettings
  result = call_568406.call(path_568407, query_568408, nil, nil, body_568409)

var webAppsUpdateAuthSettings* = Call_WebAppsUpdateAuthSettings_568397(
    name: "webAppsUpdateAuthSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettings_568398, base: "",
    url: url_WebAppsUpdateAuthSettings_568399, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettings_568410 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetAuthSettings_568412(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettings_568411(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568413 = path.getOrDefault("resourceGroupName")
  valid_568413 = validateParameter(valid_568413, JString, required = true,
                                 default = nil)
  if valid_568413 != nil:
    section.add "resourceGroupName", valid_568413
  var valid_568414 = path.getOrDefault("name")
  valid_568414 = validateParameter(valid_568414, JString, required = true,
                                 default = nil)
  if valid_568414 != nil:
    section.add "name", valid_568414
  var valid_568415 = path.getOrDefault("subscriptionId")
  valid_568415 = validateParameter(valid_568415, JString, required = true,
                                 default = nil)
  if valid_568415 != nil:
    section.add "subscriptionId", valid_568415
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568416 = query.getOrDefault("api-version")
  valid_568416 = validateParameter(valid_568416, JString, required = true,
                                 default = nil)
  if valid_568416 != nil:
    section.add "api-version", valid_568416
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568417: Call_WebAppsGetAuthSettings_568410; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_568417.validator(path, query, header, formData, body)
  let scheme = call_568417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568417.url(scheme.get, call_568417.host, call_568417.base,
                         call_568417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568417, url, valid)

proc call*(call_568418: Call_WebAppsGetAuthSettings_568410;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetAuthSettings
  ## Gets the Authentication/Authorization settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568419 = newJObject()
  var query_568420 = newJObject()
  add(path_568419, "resourceGroupName", newJString(resourceGroupName))
  add(query_568420, "api-version", newJString(apiVersion))
  add(path_568419, "name", newJString(name))
  add(path_568419, "subscriptionId", newJString(subscriptionId))
  result = call_568418.call(path_568419, query_568420, nil, nil, nil)

var webAppsGetAuthSettings* = Call_WebAppsGetAuthSettings_568410(
    name: "webAppsGetAuthSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettings_568411, base: "",
    url: url_WebAppsGetAuthSettings_568412, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAzureStorageAccounts_568421 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateAzureStorageAccounts_568423(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/azurestorageaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAzureStorageAccounts_568422(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568424 = path.getOrDefault("resourceGroupName")
  valid_568424 = validateParameter(valid_568424, JString, required = true,
                                 default = nil)
  if valid_568424 != nil:
    section.add "resourceGroupName", valid_568424
  var valid_568425 = path.getOrDefault("name")
  valid_568425 = validateParameter(valid_568425, JString, required = true,
                                 default = nil)
  if valid_568425 != nil:
    section.add "name", valid_568425
  var valid_568426 = path.getOrDefault("subscriptionId")
  valid_568426 = validateParameter(valid_568426, JString, required = true,
                                 default = nil)
  if valid_568426 != nil:
    section.add "subscriptionId", valid_568426
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568427 = query.getOrDefault("api-version")
  valid_568427 = validateParameter(valid_568427, JString, required = true,
                                 default = nil)
  if valid_568427 != nil:
    section.add "api-version", valid_568427
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568429: Call_WebAppsUpdateAzureStorageAccounts_568421;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Azure storage account configurations of an app.
  ## 
  let valid = call_568429.validator(path, query, header, formData, body)
  let scheme = call_568429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568429.url(scheme.get, call_568429.host, call_568429.base,
                         call_568429.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568429, url, valid)

proc call*(call_568430: Call_WebAppsUpdateAzureStorageAccounts_568421;
          resourceGroupName: string; apiVersion: string; name: string;
          azureStorageAccounts: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateAzureStorageAccounts
  ## Updates the Azure storage account configurations of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568431 = newJObject()
  var query_568432 = newJObject()
  var body_568433 = newJObject()
  add(path_568431, "resourceGroupName", newJString(resourceGroupName))
  add(query_568432, "api-version", newJString(apiVersion))
  add(path_568431, "name", newJString(name))
  if azureStorageAccounts != nil:
    body_568433 = azureStorageAccounts
  add(path_568431, "subscriptionId", newJString(subscriptionId))
  result = call_568430.call(path_568431, query_568432, nil, nil, body_568433)

var webAppsUpdateAzureStorageAccounts* = Call_WebAppsUpdateAzureStorageAccounts_568421(
    name: "webAppsUpdateAzureStorageAccounts", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts",
    validator: validate_WebAppsUpdateAzureStorageAccounts_568422, base: "",
    url: url_WebAppsUpdateAzureStorageAccounts_568423, schemes: {Scheme.Https})
type
  Call_WebAppsListAzureStorageAccounts_568434 = ref object of OpenApiRestCall_567666
proc url_WebAppsListAzureStorageAccounts_568436(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/azurestorageaccounts/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListAzureStorageAccounts_568435(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568437 = path.getOrDefault("resourceGroupName")
  valid_568437 = validateParameter(valid_568437, JString, required = true,
                                 default = nil)
  if valid_568437 != nil:
    section.add "resourceGroupName", valid_568437
  var valid_568438 = path.getOrDefault("name")
  valid_568438 = validateParameter(valid_568438, JString, required = true,
                                 default = nil)
  if valid_568438 != nil:
    section.add "name", valid_568438
  var valid_568439 = path.getOrDefault("subscriptionId")
  valid_568439 = validateParameter(valid_568439, JString, required = true,
                                 default = nil)
  if valid_568439 != nil:
    section.add "subscriptionId", valid_568439
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568440 = query.getOrDefault("api-version")
  valid_568440 = validateParameter(valid_568440, JString, required = true,
                                 default = nil)
  if valid_568440 != nil:
    section.add "api-version", valid_568440
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568441: Call_WebAppsListAzureStorageAccounts_568434;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Azure storage account configurations of an app.
  ## 
  let valid = call_568441.validator(path, query, header, formData, body)
  let scheme = call_568441.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568441.url(scheme.get, call_568441.host, call_568441.base,
                         call_568441.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568441, url, valid)

proc call*(call_568442: Call_WebAppsListAzureStorageAccounts_568434;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListAzureStorageAccounts
  ## Gets the Azure storage account configurations of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568443 = newJObject()
  var query_568444 = newJObject()
  add(path_568443, "resourceGroupName", newJString(resourceGroupName))
  add(query_568444, "api-version", newJString(apiVersion))
  add(path_568443, "name", newJString(name))
  add(path_568443, "subscriptionId", newJString(subscriptionId))
  result = call_568442.call(path_568443, query_568444, nil, nil, nil)

var webAppsListAzureStorageAccounts* = Call_WebAppsListAzureStorageAccounts_568434(
    name: "webAppsListAzureStorageAccounts", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts/list",
    validator: validate_WebAppsListAzureStorageAccounts_568435, base: "",
    url: url_WebAppsListAzureStorageAccounts_568436, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfiguration_568445 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateBackupConfiguration_568447(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfiguration_568446(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568448 = path.getOrDefault("resourceGroupName")
  valid_568448 = validateParameter(valid_568448, JString, required = true,
                                 default = nil)
  if valid_568448 != nil:
    section.add "resourceGroupName", valid_568448
  var valid_568449 = path.getOrDefault("name")
  valid_568449 = validateParameter(valid_568449, JString, required = true,
                                 default = nil)
  if valid_568449 != nil:
    section.add "name", valid_568449
  var valid_568450 = path.getOrDefault("subscriptionId")
  valid_568450 = validateParameter(valid_568450, JString, required = true,
                                 default = nil)
  if valid_568450 != nil:
    section.add "subscriptionId", valid_568450
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568451 = query.getOrDefault("api-version")
  valid_568451 = validateParameter(valid_568451, JString, required = true,
                                 default = nil)
  if valid_568451 != nil:
    section.add "api-version", valid_568451
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568453: Call_WebAppsUpdateBackupConfiguration_568445;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_568453.validator(path, query, header, formData, body)
  let scheme = call_568453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568453.url(scheme.get, call_568453.host, call_568453.base,
                         call_568453.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568453, url, valid)

proc call*(call_568454: Call_WebAppsUpdateBackupConfiguration_568445;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfiguration
  ## Updates the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_568455 = newJObject()
  var query_568456 = newJObject()
  var body_568457 = newJObject()
  add(path_568455, "resourceGroupName", newJString(resourceGroupName))
  add(query_568456, "api-version", newJString(apiVersion))
  add(path_568455, "name", newJString(name))
  add(path_568455, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_568457 = request
  result = call_568454.call(path_568455, query_568456, nil, nil, body_568457)

var webAppsUpdateBackupConfiguration* = Call_WebAppsUpdateBackupConfiguration_568445(
    name: "webAppsUpdateBackupConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsUpdateBackupConfiguration_568446, base: "",
    url: url_WebAppsUpdateBackupConfiguration_568447, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfiguration_568458 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteBackupConfiguration_568460(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfiguration_568459(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568461 = path.getOrDefault("resourceGroupName")
  valid_568461 = validateParameter(valid_568461, JString, required = true,
                                 default = nil)
  if valid_568461 != nil:
    section.add "resourceGroupName", valid_568461
  var valid_568462 = path.getOrDefault("name")
  valid_568462 = validateParameter(valid_568462, JString, required = true,
                                 default = nil)
  if valid_568462 != nil:
    section.add "name", valid_568462
  var valid_568463 = path.getOrDefault("subscriptionId")
  valid_568463 = validateParameter(valid_568463, JString, required = true,
                                 default = nil)
  if valid_568463 != nil:
    section.add "subscriptionId", valid_568463
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568464 = query.getOrDefault("api-version")
  valid_568464 = validateParameter(valid_568464, JString, required = true,
                                 default = nil)
  if valid_568464 != nil:
    section.add "api-version", valid_568464
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568465: Call_WebAppsDeleteBackupConfiguration_568458;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_568465.validator(path, query, header, formData, body)
  let scheme = call_568465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568465.url(scheme.get, call_568465.host, call_568465.base,
                         call_568465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568465, url, valid)

proc call*(call_568466: Call_WebAppsDeleteBackupConfiguration_568458;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteBackupConfiguration
  ## Deletes the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568467 = newJObject()
  var query_568468 = newJObject()
  add(path_568467, "resourceGroupName", newJString(resourceGroupName))
  add(query_568468, "api-version", newJString(apiVersion))
  add(path_568467, "name", newJString(name))
  add(path_568467, "subscriptionId", newJString(subscriptionId))
  result = call_568466.call(path_568467, query_568468, nil, nil, nil)

var webAppsDeleteBackupConfiguration* = Call_WebAppsDeleteBackupConfiguration_568458(
    name: "webAppsDeleteBackupConfiguration", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    validator: validate_WebAppsDeleteBackupConfiguration_568459, base: "",
    url: url_WebAppsDeleteBackupConfiguration_568460, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfiguration_568469 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetBackupConfiguration_568471(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfiguration_568470(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568472 = path.getOrDefault("resourceGroupName")
  valid_568472 = validateParameter(valid_568472, JString, required = true,
                                 default = nil)
  if valid_568472 != nil:
    section.add "resourceGroupName", valid_568472
  var valid_568473 = path.getOrDefault("name")
  valid_568473 = validateParameter(valid_568473, JString, required = true,
                                 default = nil)
  if valid_568473 != nil:
    section.add "name", valid_568473
  var valid_568474 = path.getOrDefault("subscriptionId")
  valid_568474 = validateParameter(valid_568474, JString, required = true,
                                 default = nil)
  if valid_568474 != nil:
    section.add "subscriptionId", valid_568474
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568475 = query.getOrDefault("api-version")
  valid_568475 = validateParameter(valid_568475, JString, required = true,
                                 default = nil)
  if valid_568475 != nil:
    section.add "api-version", valid_568475
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568476: Call_WebAppsGetBackupConfiguration_568469; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_568476.validator(path, query, header, formData, body)
  let scheme = call_568476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568476.url(scheme.get, call_568476.host, call_568476.base,
                         call_568476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568476, url, valid)

proc call*(call_568477: Call_WebAppsGetBackupConfiguration_568469;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetBackupConfiguration
  ## Gets the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568478 = newJObject()
  var query_568479 = newJObject()
  add(path_568478, "resourceGroupName", newJString(resourceGroupName))
  add(query_568479, "api-version", newJString(apiVersion))
  add(path_568478, "name", newJString(name))
  add(path_568478, "subscriptionId", newJString(subscriptionId))
  result = call_568477.call(path_568478, query_568479, nil, nil, nil)

var webAppsGetBackupConfiguration* = Call_WebAppsGetBackupConfiguration_568469(
    name: "webAppsGetBackupConfiguration", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
    validator: validate_WebAppsGetBackupConfiguration_568470, base: "",
    url: url_WebAppsGetBackupConfiguration_568471, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStrings_568480 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateConnectionStrings_568482(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStrings_568481(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568483 = path.getOrDefault("resourceGroupName")
  valid_568483 = validateParameter(valid_568483, JString, required = true,
                                 default = nil)
  if valid_568483 != nil:
    section.add "resourceGroupName", valid_568483
  var valid_568484 = path.getOrDefault("name")
  valid_568484 = validateParameter(valid_568484, JString, required = true,
                                 default = nil)
  if valid_568484 != nil:
    section.add "name", valid_568484
  var valid_568485 = path.getOrDefault("subscriptionId")
  valid_568485 = validateParameter(valid_568485, JString, required = true,
                                 default = nil)
  if valid_568485 != nil:
    section.add "subscriptionId", valid_568485
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568486 = query.getOrDefault("api-version")
  valid_568486 = validateParameter(valid_568486, JString, required = true,
                                 default = nil)
  if valid_568486 != nil:
    section.add "api-version", valid_568486
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568488: Call_WebAppsUpdateConnectionStrings_568480; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_568488.validator(path, query, header, formData, body)
  let scheme = call_568488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568488.url(scheme.get, call_568488.host, call_568488.base,
                         call_568488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568488, url, valid)

proc call*(call_568489: Call_WebAppsUpdateConnectionStrings_568480;
          resourceGroupName: string; apiVersion: string; name: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConnectionStrings
  ## Replaces the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568490 = newJObject()
  var query_568491 = newJObject()
  var body_568492 = newJObject()
  add(path_568490, "resourceGroupName", newJString(resourceGroupName))
  add(query_568491, "api-version", newJString(apiVersion))
  add(path_568490, "name", newJString(name))
  if connectionStrings != nil:
    body_568492 = connectionStrings
  add(path_568490, "subscriptionId", newJString(subscriptionId))
  result = call_568489.call(path_568490, query_568491, nil, nil, body_568492)

var webAppsUpdateConnectionStrings* = Call_WebAppsUpdateConnectionStrings_568480(
    name: "webAppsUpdateConnectionStrings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStrings_568481, base: "",
    url: url_WebAppsUpdateConnectionStrings_568482, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStrings_568493 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConnectionStrings_568495(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStrings_568494(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568496 = path.getOrDefault("resourceGroupName")
  valid_568496 = validateParameter(valid_568496, JString, required = true,
                                 default = nil)
  if valid_568496 != nil:
    section.add "resourceGroupName", valid_568496
  var valid_568497 = path.getOrDefault("name")
  valid_568497 = validateParameter(valid_568497, JString, required = true,
                                 default = nil)
  if valid_568497 != nil:
    section.add "name", valid_568497
  var valid_568498 = path.getOrDefault("subscriptionId")
  valid_568498 = validateParameter(valid_568498, JString, required = true,
                                 default = nil)
  if valid_568498 != nil:
    section.add "subscriptionId", valid_568498
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568499 = query.getOrDefault("api-version")
  valid_568499 = validateParameter(valid_568499, JString, required = true,
                                 default = nil)
  if valid_568499 != nil:
    section.add "api-version", valid_568499
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568500: Call_WebAppsListConnectionStrings_568493; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_568500.validator(path, query, header, formData, body)
  let scheme = call_568500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568500.url(scheme.get, call_568500.host, call_568500.base,
                         call_568500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568500, url, valid)

proc call*(call_568501: Call_WebAppsListConnectionStrings_568493;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConnectionStrings
  ## Gets the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568502 = newJObject()
  var query_568503 = newJObject()
  add(path_568502, "resourceGroupName", newJString(resourceGroupName))
  add(query_568503, "api-version", newJString(apiVersion))
  add(path_568502, "name", newJString(name))
  add(path_568502, "subscriptionId", newJString(subscriptionId))
  result = call_568501.call(path_568502, query_568503, nil, nil, nil)

var webAppsListConnectionStrings* = Call_WebAppsListConnectionStrings_568493(
    name: "webAppsListConnectionStrings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStrings_568494, base: "",
    url: url_WebAppsListConnectionStrings_568495, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfig_568515 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateDiagnosticLogsConfig_568517(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfig_568516(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568518 = path.getOrDefault("resourceGroupName")
  valid_568518 = validateParameter(valid_568518, JString, required = true,
                                 default = nil)
  if valid_568518 != nil:
    section.add "resourceGroupName", valid_568518
  var valid_568519 = path.getOrDefault("name")
  valid_568519 = validateParameter(valid_568519, JString, required = true,
                                 default = nil)
  if valid_568519 != nil:
    section.add "name", valid_568519
  var valid_568520 = path.getOrDefault("subscriptionId")
  valid_568520 = validateParameter(valid_568520, JString, required = true,
                                 default = nil)
  if valid_568520 != nil:
    section.add "subscriptionId", valid_568520
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568521 = query.getOrDefault("api-version")
  valid_568521 = validateParameter(valid_568521, JString, required = true,
                                 default = nil)
  if valid_568521 != nil:
    section.add "api-version", valid_568521
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568523: Call_WebAppsUpdateDiagnosticLogsConfig_568515;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_568523.validator(path, query, header, formData, body)
  let scheme = call_568523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568523.url(scheme.get, call_568523.host, call_568523.base,
                         call_568523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568523, url, valid)

proc call*(call_568524: Call_WebAppsUpdateDiagnosticLogsConfig_568515;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfig
  ## Updates the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568525 = newJObject()
  var query_568526 = newJObject()
  var body_568527 = newJObject()
  add(path_568525, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_568527 = siteLogsConfig
  add(query_568526, "api-version", newJString(apiVersion))
  add(path_568525, "name", newJString(name))
  add(path_568525, "subscriptionId", newJString(subscriptionId))
  result = call_568524.call(path_568525, query_568526, nil, nil, body_568527)

var webAppsUpdateDiagnosticLogsConfig* = Call_WebAppsUpdateDiagnosticLogsConfig_568515(
    name: "webAppsUpdateDiagnosticLogsConfig", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfig_568516, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfig_568517, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfiguration_568504 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDiagnosticLogsConfiguration_568506(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfiguration_568505(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568507 = path.getOrDefault("resourceGroupName")
  valid_568507 = validateParameter(valid_568507, JString, required = true,
                                 default = nil)
  if valid_568507 != nil:
    section.add "resourceGroupName", valid_568507
  var valid_568508 = path.getOrDefault("name")
  valid_568508 = validateParameter(valid_568508, JString, required = true,
                                 default = nil)
  if valid_568508 != nil:
    section.add "name", valid_568508
  var valid_568509 = path.getOrDefault("subscriptionId")
  valid_568509 = validateParameter(valid_568509, JString, required = true,
                                 default = nil)
  if valid_568509 != nil:
    section.add "subscriptionId", valid_568509
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568510 = query.getOrDefault("api-version")
  valid_568510 = validateParameter(valid_568510, JString, required = true,
                                 default = nil)
  if valid_568510 != nil:
    section.add "api-version", valid_568510
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568511: Call_WebAppsGetDiagnosticLogsConfiguration_568504;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_568511.validator(path, query, header, formData, body)
  let scheme = call_568511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568511.url(scheme.get, call_568511.host, call_568511.base,
                         call_568511.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568511, url, valid)

proc call*(call_568512: Call_WebAppsGetDiagnosticLogsConfiguration_568504;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDiagnosticLogsConfiguration
  ## Gets the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568513 = newJObject()
  var query_568514 = newJObject()
  add(path_568513, "resourceGroupName", newJString(resourceGroupName))
  add(query_568514, "api-version", newJString(apiVersion))
  add(path_568513, "name", newJString(name))
  add(path_568513, "subscriptionId", newJString(subscriptionId))
  result = call_568512.call(path_568513, query_568514, nil, nil, nil)

var webAppsGetDiagnosticLogsConfiguration* = Call_WebAppsGetDiagnosticLogsConfiguration_568504(
    name: "webAppsGetDiagnosticLogsConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfiguration_568505, base: "",
    url: url_WebAppsGetDiagnosticLogsConfiguration_568506, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadata_568528 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateMetadata_568530(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadata_568529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568531 = path.getOrDefault("resourceGroupName")
  valid_568531 = validateParameter(valid_568531, JString, required = true,
                                 default = nil)
  if valid_568531 != nil:
    section.add "resourceGroupName", valid_568531
  var valid_568532 = path.getOrDefault("name")
  valid_568532 = validateParameter(valid_568532, JString, required = true,
                                 default = nil)
  if valid_568532 != nil:
    section.add "name", valid_568532
  var valid_568533 = path.getOrDefault("subscriptionId")
  valid_568533 = validateParameter(valid_568533, JString, required = true,
                                 default = nil)
  if valid_568533 != nil:
    section.add "subscriptionId", valid_568533
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568534 = query.getOrDefault("api-version")
  valid_568534 = validateParameter(valid_568534, JString, required = true,
                                 default = nil)
  if valid_568534 != nil:
    section.add "api-version", valid_568534
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568536: Call_WebAppsUpdateMetadata_568528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_568536.validator(path, query, header, formData, body)
  let scheme = call_568536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568536.url(scheme.get, call_568536.host, call_568536.base,
                         call_568536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568536, url, valid)

proc call*(call_568537: Call_WebAppsUpdateMetadata_568528;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## webAppsUpdateMetadata
  ## Replaces the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  var path_568538 = newJObject()
  var query_568539 = newJObject()
  var body_568540 = newJObject()
  add(path_568538, "resourceGroupName", newJString(resourceGroupName))
  add(query_568539, "api-version", newJString(apiVersion))
  add(path_568538, "name", newJString(name))
  add(path_568538, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_568540 = metadata
  result = call_568537.call(path_568538, query_568539, nil, nil, body_568540)

var webAppsUpdateMetadata* = Call_WebAppsUpdateMetadata_568528(
    name: "webAppsUpdateMetadata", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
    validator: validate_WebAppsUpdateMetadata_568529, base: "",
    url: url_WebAppsUpdateMetadata_568530, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadata_568541 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetadata_568543(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadata_568542(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568544 = path.getOrDefault("resourceGroupName")
  valid_568544 = validateParameter(valid_568544, JString, required = true,
                                 default = nil)
  if valid_568544 != nil:
    section.add "resourceGroupName", valid_568544
  var valid_568545 = path.getOrDefault("name")
  valid_568545 = validateParameter(valid_568545, JString, required = true,
                                 default = nil)
  if valid_568545 != nil:
    section.add "name", valid_568545
  var valid_568546 = path.getOrDefault("subscriptionId")
  valid_568546 = validateParameter(valid_568546, JString, required = true,
                                 default = nil)
  if valid_568546 != nil:
    section.add "subscriptionId", valid_568546
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568547 = query.getOrDefault("api-version")
  valid_568547 = validateParameter(valid_568547, JString, required = true,
                                 default = nil)
  if valid_568547 != nil:
    section.add "api-version", valid_568547
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568548: Call_WebAppsListMetadata_568541; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_568548.validator(path, query, header, formData, body)
  let scheme = call_568548.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568548.url(scheme.get, call_568548.host, call_568548.base,
                         call_568548.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568548, url, valid)

proc call*(call_568549: Call_WebAppsListMetadata_568541; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListMetadata
  ## Gets the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568550 = newJObject()
  var query_568551 = newJObject()
  add(path_568550, "resourceGroupName", newJString(resourceGroupName))
  add(query_568551, "api-version", newJString(apiVersion))
  add(path_568550, "name", newJString(name))
  add(path_568550, "subscriptionId", newJString(subscriptionId))
  result = call_568549.call(path_568550, query_568551, nil, nil, nil)

var webAppsListMetadata* = Call_WebAppsListMetadata_568541(
    name: "webAppsListMetadata", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
    validator: validate_WebAppsListMetadata_568542, base: "",
    url: url_WebAppsListMetadata_568543, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentials_568552 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublishingCredentials_568554(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentials_568553(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568555 = path.getOrDefault("resourceGroupName")
  valid_568555 = validateParameter(valid_568555, JString, required = true,
                                 default = nil)
  if valid_568555 != nil:
    section.add "resourceGroupName", valid_568555
  var valid_568556 = path.getOrDefault("name")
  valid_568556 = validateParameter(valid_568556, JString, required = true,
                                 default = nil)
  if valid_568556 != nil:
    section.add "name", valid_568556
  var valid_568557 = path.getOrDefault("subscriptionId")
  valid_568557 = validateParameter(valid_568557, JString, required = true,
                                 default = nil)
  if valid_568557 != nil:
    section.add "subscriptionId", valid_568557
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568558 = query.getOrDefault("api-version")
  valid_568558 = validateParameter(valid_568558, JString, required = true,
                                 default = nil)
  if valid_568558 != nil:
    section.add "api-version", valid_568558
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568559: Call_WebAppsListPublishingCredentials_568552;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_568559.validator(path, query, header, formData, body)
  let scheme = call_568559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568559.url(scheme.get, call_568559.host, call_568559.base,
                         call_568559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568559, url, valid)

proc call*(call_568560: Call_WebAppsListPublishingCredentials_568552;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublishingCredentials
  ## Gets the Git/FTP publishing credentials of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568561 = newJObject()
  var query_568562 = newJObject()
  add(path_568561, "resourceGroupName", newJString(resourceGroupName))
  add(query_568562, "api-version", newJString(apiVersion))
  add(path_568561, "name", newJString(name))
  add(path_568561, "subscriptionId", newJString(subscriptionId))
  result = call_568560.call(path_568561, query_568562, nil, nil, nil)

var webAppsListPublishingCredentials* = Call_WebAppsListPublishingCredentials_568552(
    name: "webAppsListPublishingCredentials", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentials_568553, base: "",
    url: url_WebAppsListPublishingCredentials_568554, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettings_568563 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSitePushSettings_568565(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettings_568564(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568566 = path.getOrDefault("resourceGroupName")
  valid_568566 = validateParameter(valid_568566, JString, required = true,
                                 default = nil)
  if valid_568566 != nil:
    section.add "resourceGroupName", valid_568566
  var valid_568567 = path.getOrDefault("name")
  valid_568567 = validateParameter(valid_568567, JString, required = true,
                                 default = nil)
  if valid_568567 != nil:
    section.add "name", valid_568567
  var valid_568568 = path.getOrDefault("subscriptionId")
  valid_568568 = validateParameter(valid_568568, JString, required = true,
                                 default = nil)
  if valid_568568 != nil:
    section.add "subscriptionId", valid_568568
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568569 = query.getOrDefault("api-version")
  valid_568569 = validateParameter(valid_568569, JString, required = true,
                                 default = nil)
  if valid_568569 != nil:
    section.add "api-version", valid_568569
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568571: Call_WebAppsUpdateSitePushSettings_568563; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_568571.validator(path, query, header, formData, body)
  let scheme = call_568571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568571.url(scheme.get, call_568571.host, call_568571.base,
                         call_568571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568571, url, valid)

proc call*(call_568572: Call_WebAppsUpdateSitePushSettings_568563;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; pushSettings: JsonNode): Recallable =
  ## webAppsUpdateSitePushSettings
  ## Updates the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  var path_568573 = newJObject()
  var query_568574 = newJObject()
  var body_568575 = newJObject()
  add(path_568573, "resourceGroupName", newJString(resourceGroupName))
  add(query_568574, "api-version", newJString(apiVersion))
  add(path_568573, "name", newJString(name))
  add(path_568573, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_568575 = pushSettings
  result = call_568572.call(path_568573, query_568574, nil, nil, body_568575)

var webAppsUpdateSitePushSettings* = Call_WebAppsUpdateSitePushSettings_568563(
    name: "webAppsUpdateSitePushSettings", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettings_568564, base: "",
    url: url_WebAppsUpdateSitePushSettings_568565, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettings_568576 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSitePushSettings_568578(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettings_568577(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568579 = path.getOrDefault("resourceGroupName")
  valid_568579 = validateParameter(valid_568579, JString, required = true,
                                 default = nil)
  if valid_568579 != nil:
    section.add "resourceGroupName", valid_568579
  var valid_568580 = path.getOrDefault("name")
  valid_568580 = validateParameter(valid_568580, JString, required = true,
                                 default = nil)
  if valid_568580 != nil:
    section.add "name", valid_568580
  var valid_568581 = path.getOrDefault("subscriptionId")
  valid_568581 = validateParameter(valid_568581, JString, required = true,
                                 default = nil)
  if valid_568581 != nil:
    section.add "subscriptionId", valid_568581
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568582 = query.getOrDefault("api-version")
  valid_568582 = validateParameter(valid_568582, JString, required = true,
                                 default = nil)
  if valid_568582 != nil:
    section.add "api-version", valid_568582
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568583: Call_WebAppsListSitePushSettings_568576; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_568583.validator(path, query, header, formData, body)
  let scheme = call_568583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568583.url(scheme.get, call_568583.host, call_568583.base,
                         call_568583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568583, url, valid)

proc call*(call_568584: Call_WebAppsListSitePushSettings_568576;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSitePushSettings
  ## Gets the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568585 = newJObject()
  var query_568586 = newJObject()
  add(path_568585, "resourceGroupName", newJString(resourceGroupName))
  add(query_568586, "api-version", newJString(apiVersion))
  add(path_568585, "name", newJString(name))
  add(path_568585, "subscriptionId", newJString(subscriptionId))
  result = call_568584.call(path_568585, query_568586, nil, nil, nil)

var webAppsListSitePushSettings* = Call_WebAppsListSitePushSettings_568576(
    name: "webAppsListSitePushSettings", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettings_568577, base: "",
    url: url_WebAppsListSitePushSettings_568578, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlotConfigurationNames_568598 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSlotConfigurationNames_568600(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlotConfigurationNames_568599(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568601 = path.getOrDefault("resourceGroupName")
  valid_568601 = validateParameter(valid_568601, JString, required = true,
                                 default = nil)
  if valid_568601 != nil:
    section.add "resourceGroupName", valid_568601
  var valid_568602 = path.getOrDefault("name")
  valid_568602 = validateParameter(valid_568602, JString, required = true,
                                 default = nil)
  if valid_568602 != nil:
    section.add "name", valid_568602
  var valid_568603 = path.getOrDefault("subscriptionId")
  valid_568603 = validateParameter(valid_568603, JString, required = true,
                                 default = nil)
  if valid_568603 != nil:
    section.add "subscriptionId", valid_568603
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568604 = query.getOrDefault("api-version")
  valid_568604 = validateParameter(valid_568604, JString, required = true,
                                 default = nil)
  if valid_568604 != nil:
    section.add "api-version", valid_568604
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568606: Call_WebAppsUpdateSlotConfigurationNames_568598;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ## 
  let valid = call_568606.validator(path, query, header, formData, body)
  let scheme = call_568606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568606.url(scheme.get, call_568606.host, call_568606.base,
                         call_568606.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568606, url, valid)

proc call*(call_568607: Call_WebAppsUpdateSlotConfigurationNames_568598;
          resourceGroupName: string; apiVersion: string; name: string;
          slotConfigNames: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateSlotConfigurationNames
  ## Updates the names of application settings and connection string that remain with the slot during swap operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slotConfigNames: JObject (required)
  ##                  : Names of application settings and connection strings. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568608 = newJObject()
  var query_568609 = newJObject()
  var body_568610 = newJObject()
  add(path_568608, "resourceGroupName", newJString(resourceGroupName))
  add(query_568609, "api-version", newJString(apiVersion))
  add(path_568608, "name", newJString(name))
  if slotConfigNames != nil:
    body_568610 = slotConfigNames
  add(path_568608, "subscriptionId", newJString(subscriptionId))
  result = call_568607.call(path_568608, query_568609, nil, nil, body_568610)

var webAppsUpdateSlotConfigurationNames* = Call_WebAppsUpdateSlotConfigurationNames_568598(
    name: "webAppsUpdateSlotConfigurationNames", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsUpdateSlotConfigurationNames_568599, base: "",
    url: url_WebAppsUpdateSlotConfigurationNames_568600, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotConfigurationNames_568587 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSlotConfigurationNames_568589(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/slotConfigNames")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotConfigurationNames_568588(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568590 = path.getOrDefault("resourceGroupName")
  valid_568590 = validateParameter(valid_568590, JString, required = true,
                                 default = nil)
  if valid_568590 != nil:
    section.add "resourceGroupName", valid_568590
  var valid_568591 = path.getOrDefault("name")
  valid_568591 = validateParameter(valid_568591, JString, required = true,
                                 default = nil)
  if valid_568591 != nil:
    section.add "name", valid_568591
  var valid_568592 = path.getOrDefault("subscriptionId")
  valid_568592 = validateParameter(valid_568592, JString, required = true,
                                 default = nil)
  if valid_568592 != nil:
    section.add "subscriptionId", valid_568592
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568593 = query.getOrDefault("api-version")
  valid_568593 = validateParameter(valid_568593, JString, required = true,
                                 default = nil)
  if valid_568593 != nil:
    section.add "api-version", valid_568593
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568594: Call_WebAppsListSlotConfigurationNames_568587;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ## 
  let valid = call_568594.validator(path, query, header, formData, body)
  let scheme = call_568594.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568594.url(scheme.get, call_568594.host, call_568594.base,
                         call_568594.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568594, url, valid)

proc call*(call_568595: Call_WebAppsListSlotConfigurationNames_568587;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSlotConfigurationNames
  ## Gets the names of app settings and connection strings that stick to the slot (not swapped).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568596 = newJObject()
  var query_568597 = newJObject()
  add(path_568596, "resourceGroupName", newJString(resourceGroupName))
  add(query_568597, "api-version", newJString(apiVersion))
  add(path_568596, "name", newJString(name))
  add(path_568596, "subscriptionId", newJString(subscriptionId))
  result = call_568595.call(path_568596, query_568597, nil, nil, nil)

var webAppsListSlotConfigurationNames* = Call_WebAppsListSlotConfigurationNames_568587(
    name: "webAppsListSlotConfigurationNames", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    validator: validate_WebAppsListSlotConfigurationNames_568588, base: "",
    url: url_WebAppsListSlotConfigurationNames_568589, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfiguration_568622 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateConfiguration_568624(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfiguration_568623(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568625 = path.getOrDefault("resourceGroupName")
  valid_568625 = validateParameter(valid_568625, JString, required = true,
                                 default = nil)
  if valid_568625 != nil:
    section.add "resourceGroupName", valid_568625
  var valid_568626 = path.getOrDefault("name")
  valid_568626 = validateParameter(valid_568626, JString, required = true,
                                 default = nil)
  if valid_568626 != nil:
    section.add "name", valid_568626
  var valid_568627 = path.getOrDefault("subscriptionId")
  valid_568627 = validateParameter(valid_568627, JString, required = true,
                                 default = nil)
  if valid_568627 != nil:
    section.add "subscriptionId", valid_568627
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568628 = query.getOrDefault("api-version")
  valid_568628 = validateParameter(valid_568628, JString, required = true,
                                 default = nil)
  if valid_568628 != nil:
    section.add "api-version", valid_568628
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568630: Call_WebAppsCreateOrUpdateConfiguration_568622;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_568630.validator(path, query, header, formData, body)
  let scheme = call_568630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568630.url(scheme.get, call_568630.host, call_568630.base,
                         call_568630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568630, url, valid)

proc call*(call_568631: Call_WebAppsCreateOrUpdateConfiguration_568622;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateConfiguration
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568632 = newJObject()
  var query_568633 = newJObject()
  var body_568634 = newJObject()
  add(path_568632, "resourceGroupName", newJString(resourceGroupName))
  add(query_568633, "api-version", newJString(apiVersion))
  add(path_568632, "name", newJString(name))
  if siteConfig != nil:
    body_568634 = siteConfig
  add(path_568632, "subscriptionId", newJString(subscriptionId))
  result = call_568631.call(path_568632, query_568633, nil, nil, body_568634)

var webAppsCreateOrUpdateConfiguration* = Call_WebAppsCreateOrUpdateConfiguration_568622(
    name: "webAppsCreateOrUpdateConfiguration", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfiguration_568623, base: "",
    url: url_WebAppsCreateOrUpdateConfiguration_568624, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfiguration_568611 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetConfiguration_568613(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfiguration_568612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568614 = path.getOrDefault("resourceGroupName")
  valid_568614 = validateParameter(valid_568614, JString, required = true,
                                 default = nil)
  if valid_568614 != nil:
    section.add "resourceGroupName", valid_568614
  var valid_568615 = path.getOrDefault("name")
  valid_568615 = validateParameter(valid_568615, JString, required = true,
                                 default = nil)
  if valid_568615 != nil:
    section.add "name", valid_568615
  var valid_568616 = path.getOrDefault("subscriptionId")
  valid_568616 = validateParameter(valid_568616, JString, required = true,
                                 default = nil)
  if valid_568616 != nil:
    section.add "subscriptionId", valid_568616
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568617 = query.getOrDefault("api-version")
  valid_568617 = validateParameter(valid_568617, JString, required = true,
                                 default = nil)
  if valid_568617 != nil:
    section.add "api-version", valid_568617
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568618: Call_WebAppsGetConfiguration_568611; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_568618.validator(path, query, header, formData, body)
  let scheme = call_568618.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568618.url(scheme.get, call_568618.host, call_568618.base,
                         call_568618.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568618, url, valid)

proc call*(call_568619: Call_WebAppsGetConfiguration_568611;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetConfiguration
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568620 = newJObject()
  var query_568621 = newJObject()
  add(path_568620, "resourceGroupName", newJString(resourceGroupName))
  add(query_568621, "api-version", newJString(apiVersion))
  add(path_568620, "name", newJString(name))
  add(path_568620, "subscriptionId", newJString(subscriptionId))
  result = call_568619.call(path_568620, query_568621, nil, nil, nil)

var webAppsGetConfiguration* = Call_WebAppsGetConfiguration_568611(
    name: "webAppsGetConfiguration", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsGetConfiguration_568612, base: "",
    url: url_WebAppsGetConfiguration_568613, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfiguration_568635 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateConfiguration_568637(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfiguration_568636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568638 = path.getOrDefault("resourceGroupName")
  valid_568638 = validateParameter(valid_568638, JString, required = true,
                                 default = nil)
  if valid_568638 != nil:
    section.add "resourceGroupName", valid_568638
  var valid_568639 = path.getOrDefault("name")
  valid_568639 = validateParameter(valid_568639, JString, required = true,
                                 default = nil)
  if valid_568639 != nil:
    section.add "name", valid_568639
  var valid_568640 = path.getOrDefault("subscriptionId")
  valid_568640 = validateParameter(valid_568640, JString, required = true,
                                 default = nil)
  if valid_568640 != nil:
    section.add "subscriptionId", valid_568640
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568641 = query.getOrDefault("api-version")
  valid_568641 = validateParameter(valid_568641, JString, required = true,
                                 default = nil)
  if valid_568641 != nil:
    section.add "api-version", valid_568641
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568643: Call_WebAppsUpdateConfiguration_568635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_568643.validator(path, query, header, formData, body)
  let scheme = call_568643.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568643.url(scheme.get, call_568643.host, call_568643.base,
                         call_568643.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568643, url, valid)

proc call*(call_568644: Call_WebAppsUpdateConfiguration_568635;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConfiguration
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568645 = newJObject()
  var query_568646 = newJObject()
  var body_568647 = newJObject()
  add(path_568645, "resourceGroupName", newJString(resourceGroupName))
  add(query_568646, "api-version", newJString(apiVersion))
  add(path_568645, "name", newJString(name))
  if siteConfig != nil:
    body_568647 = siteConfig
  add(path_568645, "subscriptionId", newJString(subscriptionId))
  result = call_568644.call(path_568645, query_568646, nil, nil, body_568647)

var webAppsUpdateConfiguration* = Call_WebAppsUpdateConfiguration_568635(
    name: "webAppsUpdateConfiguration", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    validator: validate_WebAppsUpdateConfiguration_568636, base: "",
    url: url_WebAppsUpdateConfiguration_568637, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfo_568648 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConfigurationSnapshotInfo_568650(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfo_568649(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568651 = path.getOrDefault("resourceGroupName")
  valid_568651 = validateParameter(valid_568651, JString, required = true,
                                 default = nil)
  if valid_568651 != nil:
    section.add "resourceGroupName", valid_568651
  var valid_568652 = path.getOrDefault("name")
  valid_568652 = validateParameter(valid_568652, JString, required = true,
                                 default = nil)
  if valid_568652 != nil:
    section.add "name", valid_568652
  var valid_568653 = path.getOrDefault("subscriptionId")
  valid_568653 = validateParameter(valid_568653, JString, required = true,
                                 default = nil)
  if valid_568653 != nil:
    section.add "subscriptionId", valid_568653
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568654 = query.getOrDefault("api-version")
  valid_568654 = validateParameter(valid_568654, JString, required = true,
                                 default = nil)
  if valid_568654 != nil:
    section.add "api-version", valid_568654
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568655: Call_WebAppsListConfigurationSnapshotInfo_568648;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_568655.validator(path, query, header, formData, body)
  let scheme = call_568655.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568655.url(scheme.get, call_568655.host, call_568655.base,
                         call_568655.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568655, url, valid)

proc call*(call_568656: Call_WebAppsListConfigurationSnapshotInfo_568648;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationSnapshotInfo
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568657 = newJObject()
  var query_568658 = newJObject()
  add(path_568657, "resourceGroupName", newJString(resourceGroupName))
  add(query_568658, "api-version", newJString(apiVersion))
  add(path_568657, "name", newJString(name))
  add(path_568657, "subscriptionId", newJString(subscriptionId))
  result = call_568656.call(path_568657, query_568658, nil, nil, nil)

var webAppsListConfigurationSnapshotInfo* = Call_WebAppsListConfigurationSnapshotInfo_568648(
    name: "webAppsListConfigurationSnapshotInfo", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfo_568649, base: "",
    url: url_WebAppsListConfigurationSnapshotInfo_568650, schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshot_568659 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetConfigurationSnapshot_568661(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshot_568660(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568662 = path.getOrDefault("resourceGroupName")
  valid_568662 = validateParameter(valid_568662, JString, required = true,
                                 default = nil)
  if valid_568662 != nil:
    section.add "resourceGroupName", valid_568662
  var valid_568663 = path.getOrDefault("name")
  valid_568663 = validateParameter(valid_568663, JString, required = true,
                                 default = nil)
  if valid_568663 != nil:
    section.add "name", valid_568663
  var valid_568664 = path.getOrDefault("snapshotId")
  valid_568664 = validateParameter(valid_568664, JString, required = true,
                                 default = nil)
  if valid_568664 != nil:
    section.add "snapshotId", valid_568664
  var valid_568665 = path.getOrDefault("subscriptionId")
  valid_568665 = validateParameter(valid_568665, JString, required = true,
                                 default = nil)
  if valid_568665 != nil:
    section.add "subscriptionId", valid_568665
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568666 = query.getOrDefault("api-version")
  valid_568666 = validateParameter(valid_568666, JString, required = true,
                                 default = nil)
  if valid_568666 != nil:
    section.add "api-version", valid_568666
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568667: Call_WebAppsGetConfigurationSnapshot_568659;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_568667.validator(path, query, header, formData, body)
  let scheme = call_568667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568667.url(scheme.get, call_568667.host, call_568667.base,
                         call_568667.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568667, url, valid)

proc call*(call_568668: Call_WebAppsGetConfigurationSnapshot_568659;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSnapshot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568669 = newJObject()
  var query_568670 = newJObject()
  add(path_568669, "resourceGroupName", newJString(resourceGroupName))
  add(query_568670, "api-version", newJString(apiVersion))
  add(path_568669, "name", newJString(name))
  add(path_568669, "snapshotId", newJString(snapshotId))
  add(path_568669, "subscriptionId", newJString(subscriptionId))
  result = call_568668.call(path_568669, query_568670, nil, nil, nil)

var webAppsGetConfigurationSnapshot* = Call_WebAppsGetConfigurationSnapshot_568659(
    name: "webAppsGetConfigurationSnapshot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshot_568660, base: "",
    url: url_WebAppsGetConfigurationSnapshot_568661, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshot_568671 = ref object of OpenApiRestCall_567666
proc url_WebAppsRecoverSiteConfigurationSnapshot_568673(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshot_568672(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568674 = path.getOrDefault("resourceGroupName")
  valid_568674 = validateParameter(valid_568674, JString, required = true,
                                 default = nil)
  if valid_568674 != nil:
    section.add "resourceGroupName", valid_568674
  var valid_568675 = path.getOrDefault("name")
  valid_568675 = validateParameter(valid_568675, JString, required = true,
                                 default = nil)
  if valid_568675 != nil:
    section.add "name", valid_568675
  var valid_568676 = path.getOrDefault("snapshotId")
  valid_568676 = validateParameter(valid_568676, JString, required = true,
                                 default = nil)
  if valid_568676 != nil:
    section.add "snapshotId", valid_568676
  var valid_568677 = path.getOrDefault("subscriptionId")
  valid_568677 = validateParameter(valid_568677, JString, required = true,
                                 default = nil)
  if valid_568677 != nil:
    section.add "subscriptionId", valid_568677
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568678 = query.getOrDefault("api-version")
  valid_568678 = validateParameter(valid_568678, JString, required = true,
                                 default = nil)
  if valid_568678 != nil:
    section.add "api-version", valid_568678
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568679: Call_WebAppsRecoverSiteConfigurationSnapshot_568671;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_568679.validator(path, query, header, formData, body)
  let scheme = call_568679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568679.url(scheme.get, call_568679.host, call_568679.base,
                         call_568679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568679, url, valid)

proc call*(call_568680: Call_WebAppsRecoverSiteConfigurationSnapshot_568671;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; subscriptionId: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568681 = newJObject()
  var query_568682 = newJObject()
  add(path_568681, "resourceGroupName", newJString(resourceGroupName))
  add(query_568682, "api-version", newJString(apiVersion))
  add(path_568681, "name", newJString(name))
  add(path_568681, "snapshotId", newJString(snapshotId))
  add(path_568681, "subscriptionId", newJString(subscriptionId))
  result = call_568680.call(path_568681, query_568682, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshot* = Call_WebAppsRecoverSiteConfigurationSnapshot_568671(
    name: "webAppsRecoverSiteConfigurationSnapshot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshot_568672, base: "",
    url: url_WebAppsRecoverSiteConfigurationSnapshot_568673,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogs_568683 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetWebSiteContainerLogs_568685(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogs_568684(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568686 = path.getOrDefault("resourceGroupName")
  valid_568686 = validateParameter(valid_568686, JString, required = true,
                                 default = nil)
  if valid_568686 != nil:
    section.add "resourceGroupName", valid_568686
  var valid_568687 = path.getOrDefault("name")
  valid_568687 = validateParameter(valid_568687, JString, required = true,
                                 default = nil)
  if valid_568687 != nil:
    section.add "name", valid_568687
  var valid_568688 = path.getOrDefault("subscriptionId")
  valid_568688 = validateParameter(valid_568688, JString, required = true,
                                 default = nil)
  if valid_568688 != nil:
    section.add "subscriptionId", valid_568688
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568689 = query.getOrDefault("api-version")
  valid_568689 = validateParameter(valid_568689, JString, required = true,
                                 default = nil)
  if valid_568689 != nil:
    section.add "api-version", valid_568689
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568690: Call_WebAppsGetWebSiteContainerLogs_568683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_568690.validator(path, query, header, formData, body)
  let scheme = call_568690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568690.url(scheme.get, call_568690.host, call_568690.base,
                         call_568690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568690, url, valid)

proc call*(call_568691: Call_WebAppsGetWebSiteContainerLogs_568683;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogs
  ## Gets the last lines of docker logs for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568692 = newJObject()
  var query_568693 = newJObject()
  add(path_568692, "resourceGroupName", newJString(resourceGroupName))
  add(query_568693, "api-version", newJString(apiVersion))
  add(path_568692, "name", newJString(name))
  add(path_568692, "subscriptionId", newJString(subscriptionId))
  result = call_568691.call(path_568692, query_568693, nil, nil, nil)

var webAppsGetWebSiteContainerLogs* = Call_WebAppsGetWebSiteContainerLogs_568683(
    name: "webAppsGetWebSiteContainerLogs", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogs_568684, base: "",
    url: url_WebAppsGetWebSiteContainerLogs_568685, schemes: {Scheme.Https})
type
  Call_WebAppsGetContainerLogsZip_568694 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetContainerLogsZip_568696(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContainerLogsZip_568695(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568697 = path.getOrDefault("resourceGroupName")
  valid_568697 = validateParameter(valid_568697, JString, required = true,
                                 default = nil)
  if valid_568697 != nil:
    section.add "resourceGroupName", valid_568697
  var valid_568698 = path.getOrDefault("name")
  valid_568698 = validateParameter(valid_568698, JString, required = true,
                                 default = nil)
  if valid_568698 != nil:
    section.add "name", valid_568698
  var valid_568699 = path.getOrDefault("subscriptionId")
  valid_568699 = validateParameter(valid_568699, JString, required = true,
                                 default = nil)
  if valid_568699 != nil:
    section.add "subscriptionId", valid_568699
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568700 = query.getOrDefault("api-version")
  valid_568700 = validateParameter(valid_568700, JString, required = true,
                                 default = nil)
  if valid_568700 != nil:
    section.add "api-version", valid_568700
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568701: Call_WebAppsGetContainerLogsZip_568694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_568701.validator(path, query, header, formData, body)
  let scheme = call_568701.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568701.url(scheme.get, call_568701.host, call_568701.base,
                         call_568701.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568701, url, valid)

proc call*(call_568702: Call_WebAppsGetContainerLogsZip_568694;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetContainerLogsZip
  ## Gets the ZIP archived docker log files for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568703 = newJObject()
  var query_568704 = newJObject()
  add(path_568703, "resourceGroupName", newJString(resourceGroupName))
  add(query_568704, "api-version", newJString(apiVersion))
  add(path_568703, "name", newJString(name))
  add(path_568703, "subscriptionId", newJString(subscriptionId))
  result = call_568702.call(path_568703, query_568704, nil, nil, nil)

var webAppsGetContainerLogsZip* = Call_WebAppsGetContainerLogsZip_568694(
    name: "webAppsGetContainerLogsZip", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download",
    validator: validate_WebAppsGetContainerLogsZip_568695, base: "",
    url: url_WebAppsGetContainerLogsZip_568696, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobs_568705 = ref object of OpenApiRestCall_567666
proc url_WebAppsListContinuousWebJobs_568707(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobs_568706(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568708 = path.getOrDefault("resourceGroupName")
  valid_568708 = validateParameter(valid_568708, JString, required = true,
                                 default = nil)
  if valid_568708 != nil:
    section.add "resourceGroupName", valid_568708
  var valid_568709 = path.getOrDefault("name")
  valid_568709 = validateParameter(valid_568709, JString, required = true,
                                 default = nil)
  if valid_568709 != nil:
    section.add "name", valid_568709
  var valid_568710 = path.getOrDefault("subscriptionId")
  valid_568710 = validateParameter(valid_568710, JString, required = true,
                                 default = nil)
  if valid_568710 != nil:
    section.add "subscriptionId", valid_568710
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568711 = query.getOrDefault("api-version")
  valid_568711 = validateParameter(valid_568711, JString, required = true,
                                 default = nil)
  if valid_568711 != nil:
    section.add "api-version", valid_568711
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568712: Call_WebAppsListContinuousWebJobs_568705; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_568712.validator(path, query, header, formData, body)
  let scheme = call_568712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568712.url(scheme.get, call_568712.host, call_568712.base,
                         call_568712.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568712, url, valid)

proc call*(call_568713: Call_WebAppsListContinuousWebJobs_568705;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListContinuousWebJobs
  ## List continuous web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568714 = newJObject()
  var query_568715 = newJObject()
  add(path_568714, "resourceGroupName", newJString(resourceGroupName))
  add(query_568715, "api-version", newJString(apiVersion))
  add(path_568714, "name", newJString(name))
  add(path_568714, "subscriptionId", newJString(subscriptionId))
  result = call_568713.call(path_568714, query_568715, nil, nil, nil)

var webAppsListContinuousWebJobs* = Call_WebAppsListContinuousWebJobs_568705(
    name: "webAppsListContinuousWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobs_568706, base: "",
    url: url_WebAppsListContinuousWebJobs_568707, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJob_568716 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetContinuousWebJob_568718(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJob_568717(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568719 = path.getOrDefault("resourceGroupName")
  valid_568719 = validateParameter(valid_568719, JString, required = true,
                                 default = nil)
  if valid_568719 != nil:
    section.add "resourceGroupName", valid_568719
  var valid_568720 = path.getOrDefault("name")
  valid_568720 = validateParameter(valid_568720, JString, required = true,
                                 default = nil)
  if valid_568720 != nil:
    section.add "name", valid_568720
  var valid_568721 = path.getOrDefault("subscriptionId")
  valid_568721 = validateParameter(valid_568721, JString, required = true,
                                 default = nil)
  if valid_568721 != nil:
    section.add "subscriptionId", valid_568721
  var valid_568722 = path.getOrDefault("webJobName")
  valid_568722 = validateParameter(valid_568722, JString, required = true,
                                 default = nil)
  if valid_568722 != nil:
    section.add "webJobName", valid_568722
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568723 = query.getOrDefault("api-version")
  valid_568723 = validateParameter(valid_568723, JString, required = true,
                                 default = nil)
  if valid_568723 != nil:
    section.add "api-version", valid_568723
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568724: Call_WebAppsGetContinuousWebJob_568716; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_568724.validator(path, query, header, formData, body)
  let scheme = call_568724.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568724.url(scheme.get, call_568724.host, call_568724.base,
                         call_568724.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568724, url, valid)

proc call*(call_568725: Call_WebAppsGetContinuousWebJob_568716;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetContinuousWebJob
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_568726 = newJObject()
  var query_568727 = newJObject()
  add(path_568726, "resourceGroupName", newJString(resourceGroupName))
  add(query_568727, "api-version", newJString(apiVersion))
  add(path_568726, "name", newJString(name))
  add(path_568726, "subscriptionId", newJString(subscriptionId))
  add(path_568726, "webJobName", newJString(webJobName))
  result = call_568725.call(path_568726, query_568727, nil, nil, nil)

var webAppsGetContinuousWebJob* = Call_WebAppsGetContinuousWebJob_568716(
    name: "webAppsGetContinuousWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJob_568717, base: "",
    url: url_WebAppsGetContinuousWebJob_568718, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJob_568728 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteContinuousWebJob_568730(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJob_568729(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568731 = path.getOrDefault("resourceGroupName")
  valid_568731 = validateParameter(valid_568731, JString, required = true,
                                 default = nil)
  if valid_568731 != nil:
    section.add "resourceGroupName", valid_568731
  var valid_568732 = path.getOrDefault("name")
  valid_568732 = validateParameter(valid_568732, JString, required = true,
                                 default = nil)
  if valid_568732 != nil:
    section.add "name", valid_568732
  var valid_568733 = path.getOrDefault("subscriptionId")
  valid_568733 = validateParameter(valid_568733, JString, required = true,
                                 default = nil)
  if valid_568733 != nil:
    section.add "subscriptionId", valid_568733
  var valid_568734 = path.getOrDefault("webJobName")
  valid_568734 = validateParameter(valid_568734, JString, required = true,
                                 default = nil)
  if valid_568734 != nil:
    section.add "webJobName", valid_568734
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568735 = query.getOrDefault("api-version")
  valid_568735 = validateParameter(valid_568735, JString, required = true,
                                 default = nil)
  if valid_568735 != nil:
    section.add "api-version", valid_568735
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568736: Call_WebAppsDeleteContinuousWebJob_568728; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_568736.validator(path, query, header, formData, body)
  let scheme = call_568736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568736.url(scheme.get, call_568736.host, call_568736.base,
                         call_568736.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568736, url, valid)

proc call*(call_568737: Call_WebAppsDeleteContinuousWebJob_568728;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteContinuousWebJob
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_568738 = newJObject()
  var query_568739 = newJObject()
  add(path_568738, "resourceGroupName", newJString(resourceGroupName))
  add(query_568739, "api-version", newJString(apiVersion))
  add(path_568738, "name", newJString(name))
  add(path_568738, "subscriptionId", newJString(subscriptionId))
  add(path_568738, "webJobName", newJString(webJobName))
  result = call_568737.call(path_568738, query_568739, nil, nil, nil)

var webAppsDeleteContinuousWebJob* = Call_WebAppsDeleteContinuousWebJob_568728(
    name: "webAppsDeleteContinuousWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJob_568729, base: "",
    url: url_WebAppsDeleteContinuousWebJob_568730, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJob_568740 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartContinuousWebJob_568742(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJob_568741(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568743 = path.getOrDefault("resourceGroupName")
  valid_568743 = validateParameter(valid_568743, JString, required = true,
                                 default = nil)
  if valid_568743 != nil:
    section.add "resourceGroupName", valid_568743
  var valid_568744 = path.getOrDefault("name")
  valid_568744 = validateParameter(valid_568744, JString, required = true,
                                 default = nil)
  if valid_568744 != nil:
    section.add "name", valid_568744
  var valid_568745 = path.getOrDefault("subscriptionId")
  valid_568745 = validateParameter(valid_568745, JString, required = true,
                                 default = nil)
  if valid_568745 != nil:
    section.add "subscriptionId", valid_568745
  var valid_568746 = path.getOrDefault("webJobName")
  valid_568746 = validateParameter(valid_568746, JString, required = true,
                                 default = nil)
  if valid_568746 != nil:
    section.add "webJobName", valid_568746
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568747 = query.getOrDefault("api-version")
  valid_568747 = validateParameter(valid_568747, JString, required = true,
                                 default = nil)
  if valid_568747 != nil:
    section.add "api-version", valid_568747
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568748: Call_WebAppsStartContinuousWebJob_568740; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_568748.validator(path, query, header, formData, body)
  let scheme = call_568748.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568748.url(scheme.get, call_568748.host, call_568748.base,
                         call_568748.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568748, url, valid)

proc call*(call_568749: Call_WebAppsStartContinuousWebJob_568740;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStartContinuousWebJob
  ## Start a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_568750 = newJObject()
  var query_568751 = newJObject()
  add(path_568750, "resourceGroupName", newJString(resourceGroupName))
  add(query_568751, "api-version", newJString(apiVersion))
  add(path_568750, "name", newJString(name))
  add(path_568750, "subscriptionId", newJString(subscriptionId))
  add(path_568750, "webJobName", newJString(webJobName))
  result = call_568749.call(path_568750, query_568751, nil, nil, nil)

var webAppsStartContinuousWebJob* = Call_WebAppsStartContinuousWebJob_568740(
    name: "webAppsStartContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJob_568741, base: "",
    url: url_WebAppsStartContinuousWebJob_568742, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJob_568752 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopContinuousWebJob_568754(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJob_568753(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568755 = path.getOrDefault("resourceGroupName")
  valid_568755 = validateParameter(valid_568755, JString, required = true,
                                 default = nil)
  if valid_568755 != nil:
    section.add "resourceGroupName", valid_568755
  var valid_568756 = path.getOrDefault("name")
  valid_568756 = validateParameter(valid_568756, JString, required = true,
                                 default = nil)
  if valid_568756 != nil:
    section.add "name", valid_568756
  var valid_568757 = path.getOrDefault("subscriptionId")
  valid_568757 = validateParameter(valid_568757, JString, required = true,
                                 default = nil)
  if valid_568757 != nil:
    section.add "subscriptionId", valid_568757
  var valid_568758 = path.getOrDefault("webJobName")
  valid_568758 = validateParameter(valid_568758, JString, required = true,
                                 default = nil)
  if valid_568758 != nil:
    section.add "webJobName", valid_568758
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568759 = query.getOrDefault("api-version")
  valid_568759 = validateParameter(valid_568759, JString, required = true,
                                 default = nil)
  if valid_568759 != nil:
    section.add "api-version", valid_568759
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568760: Call_WebAppsStopContinuousWebJob_568752; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_568760.validator(path, query, header, formData, body)
  let scheme = call_568760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568760.url(scheme.get, call_568760.host, call_568760.base,
                         call_568760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568760, url, valid)

proc call*(call_568761: Call_WebAppsStopContinuousWebJob_568752;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStopContinuousWebJob
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_568762 = newJObject()
  var query_568763 = newJObject()
  add(path_568762, "resourceGroupName", newJString(resourceGroupName))
  add(query_568763, "api-version", newJString(apiVersion))
  add(path_568762, "name", newJString(name))
  add(path_568762, "subscriptionId", newJString(subscriptionId))
  add(path_568762, "webJobName", newJString(webJobName))
  result = call_568761.call(path_568762, query_568763, nil, nil, nil)

var webAppsStopContinuousWebJob* = Call_WebAppsStopContinuousWebJob_568752(
    name: "webAppsStopContinuousWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJob_568753, base: "",
    url: url_WebAppsStopContinuousWebJob_568754, schemes: {Scheme.Https})
type
  Call_WebAppsListDeployments_568764 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDeployments_568766(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeployments_568765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568767 = path.getOrDefault("resourceGroupName")
  valid_568767 = validateParameter(valid_568767, JString, required = true,
                                 default = nil)
  if valid_568767 != nil:
    section.add "resourceGroupName", valid_568767
  var valid_568768 = path.getOrDefault("name")
  valid_568768 = validateParameter(valid_568768, JString, required = true,
                                 default = nil)
  if valid_568768 != nil:
    section.add "name", valid_568768
  var valid_568769 = path.getOrDefault("subscriptionId")
  valid_568769 = validateParameter(valid_568769, JString, required = true,
                                 default = nil)
  if valid_568769 != nil:
    section.add "subscriptionId", valid_568769
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568770 = query.getOrDefault("api-version")
  valid_568770 = validateParameter(valid_568770, JString, required = true,
                                 default = nil)
  if valid_568770 != nil:
    section.add "api-version", valid_568770
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568771: Call_WebAppsListDeployments_568764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_568771.validator(path, query, header, formData, body)
  let scheme = call_568771.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568771.url(scheme.get, call_568771.host, call_568771.base,
                         call_568771.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568771, url, valid)

proc call*(call_568772: Call_WebAppsListDeployments_568764;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListDeployments
  ## List deployments for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568773 = newJObject()
  var query_568774 = newJObject()
  add(path_568773, "resourceGroupName", newJString(resourceGroupName))
  add(query_568774, "api-version", newJString(apiVersion))
  add(path_568773, "name", newJString(name))
  add(path_568773, "subscriptionId", newJString(subscriptionId))
  result = call_568772.call(path_568773, query_568774, nil, nil, nil)

var webAppsListDeployments* = Call_WebAppsListDeployments_568764(
    name: "webAppsListDeployments", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
    validator: validate_WebAppsListDeployments_568765, base: "",
    url: url_WebAppsListDeployments_568766, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeployment_568787 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateDeployment_568789(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeployment_568788(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568790 = path.getOrDefault("resourceGroupName")
  valid_568790 = validateParameter(valid_568790, JString, required = true,
                                 default = nil)
  if valid_568790 != nil:
    section.add "resourceGroupName", valid_568790
  var valid_568791 = path.getOrDefault("name")
  valid_568791 = validateParameter(valid_568791, JString, required = true,
                                 default = nil)
  if valid_568791 != nil:
    section.add "name", valid_568791
  var valid_568792 = path.getOrDefault("subscriptionId")
  valid_568792 = validateParameter(valid_568792, JString, required = true,
                                 default = nil)
  if valid_568792 != nil:
    section.add "subscriptionId", valid_568792
  var valid_568793 = path.getOrDefault("id")
  valid_568793 = validateParameter(valid_568793, JString, required = true,
                                 default = nil)
  if valid_568793 != nil:
    section.add "id", valid_568793
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568794 = query.getOrDefault("api-version")
  valid_568794 = validateParameter(valid_568794, JString, required = true,
                                 default = nil)
  if valid_568794 != nil:
    section.add "api-version", valid_568794
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568796: Call_WebAppsCreateDeployment_568787; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_568796.validator(path, query, header, formData, body)
  let scheme = call_568796.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568796.url(scheme.get, call_568796.host, call_568796.base,
                         call_568796.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568796, url, valid)

proc call*(call_568797: Call_WebAppsCreateDeployment_568787;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## webAppsCreateDeployment
  ## Create a deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   deployment: JObject (required)
  ##             : Deployment details.
  var path_568798 = newJObject()
  var query_568799 = newJObject()
  var body_568800 = newJObject()
  add(path_568798, "resourceGroupName", newJString(resourceGroupName))
  add(query_568799, "api-version", newJString(apiVersion))
  add(path_568798, "name", newJString(name))
  add(path_568798, "subscriptionId", newJString(subscriptionId))
  add(path_568798, "id", newJString(id))
  if deployment != nil:
    body_568800 = deployment
  result = call_568797.call(path_568798, query_568799, nil, nil, body_568800)

var webAppsCreateDeployment* = Call_WebAppsCreateDeployment_568787(
    name: "webAppsCreateDeployment", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsCreateDeployment_568788, base: "",
    url: url_WebAppsCreateDeployment_568789, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeployment_568775 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDeployment_568777(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeployment_568776(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568778 = path.getOrDefault("resourceGroupName")
  valid_568778 = validateParameter(valid_568778, JString, required = true,
                                 default = nil)
  if valid_568778 != nil:
    section.add "resourceGroupName", valid_568778
  var valid_568779 = path.getOrDefault("name")
  valid_568779 = validateParameter(valid_568779, JString, required = true,
                                 default = nil)
  if valid_568779 != nil:
    section.add "name", valid_568779
  var valid_568780 = path.getOrDefault("subscriptionId")
  valid_568780 = validateParameter(valid_568780, JString, required = true,
                                 default = nil)
  if valid_568780 != nil:
    section.add "subscriptionId", valid_568780
  var valid_568781 = path.getOrDefault("id")
  valid_568781 = validateParameter(valid_568781, JString, required = true,
                                 default = nil)
  if valid_568781 != nil:
    section.add "id", valid_568781
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568782 = query.getOrDefault("api-version")
  valid_568782 = validateParameter(valid_568782, JString, required = true,
                                 default = nil)
  if valid_568782 != nil:
    section.add "api-version", valid_568782
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568783: Call_WebAppsGetDeployment_568775; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_568783.validator(path, query, header, formData, body)
  let scheme = call_568783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568783.url(scheme.get, call_568783.host, call_568783.base,
                         call_568783.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568783, url, valid)

proc call*(call_568784: Call_WebAppsGetDeployment_568775;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsGetDeployment
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_568785 = newJObject()
  var query_568786 = newJObject()
  add(path_568785, "resourceGroupName", newJString(resourceGroupName))
  add(query_568786, "api-version", newJString(apiVersion))
  add(path_568785, "name", newJString(name))
  add(path_568785, "subscriptionId", newJString(subscriptionId))
  add(path_568785, "id", newJString(id))
  result = call_568784.call(path_568785, query_568786, nil, nil, nil)

var webAppsGetDeployment* = Call_WebAppsGetDeployment_568775(
    name: "webAppsGetDeployment", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsGetDeployment_568776, base: "",
    url: url_WebAppsGetDeployment_568777, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeployment_568801 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteDeployment_568803(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeployment_568802(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568804 = path.getOrDefault("resourceGroupName")
  valid_568804 = validateParameter(valid_568804, JString, required = true,
                                 default = nil)
  if valid_568804 != nil:
    section.add "resourceGroupName", valid_568804
  var valid_568805 = path.getOrDefault("name")
  valid_568805 = validateParameter(valid_568805, JString, required = true,
                                 default = nil)
  if valid_568805 != nil:
    section.add "name", valid_568805
  var valid_568806 = path.getOrDefault("subscriptionId")
  valid_568806 = validateParameter(valid_568806, JString, required = true,
                                 default = nil)
  if valid_568806 != nil:
    section.add "subscriptionId", valid_568806
  var valid_568807 = path.getOrDefault("id")
  valid_568807 = validateParameter(valid_568807, JString, required = true,
                                 default = nil)
  if valid_568807 != nil:
    section.add "id", valid_568807
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568808 = query.getOrDefault("api-version")
  valid_568808 = validateParameter(valid_568808, JString, required = true,
                                 default = nil)
  if valid_568808 != nil:
    section.add "api-version", valid_568808
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568809: Call_WebAppsDeleteDeployment_568801; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_568809.validator(path, query, header, formData, body)
  let scheme = call_568809.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568809.url(scheme.get, call_568809.host, call_568809.base,
                         call_568809.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568809, url, valid)

proc call*(call_568810: Call_WebAppsDeleteDeployment_568801;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsDeleteDeployment
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_568811 = newJObject()
  var query_568812 = newJObject()
  add(path_568811, "resourceGroupName", newJString(resourceGroupName))
  add(query_568812, "api-version", newJString(apiVersion))
  add(path_568811, "name", newJString(name))
  add(path_568811, "subscriptionId", newJString(subscriptionId))
  add(path_568811, "id", newJString(id))
  result = call_568810.call(path_568811, query_568812, nil, nil, nil)

var webAppsDeleteDeployment* = Call_WebAppsDeleteDeployment_568801(
    name: "webAppsDeleteDeployment", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    validator: validate_WebAppsDeleteDeployment_568802, base: "",
    url: url_WebAppsDeleteDeployment_568803, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLog_568813 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDeploymentLog_568815(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLog_568814(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568816 = path.getOrDefault("resourceGroupName")
  valid_568816 = validateParameter(valid_568816, JString, required = true,
                                 default = nil)
  if valid_568816 != nil:
    section.add "resourceGroupName", valid_568816
  var valid_568817 = path.getOrDefault("name")
  valid_568817 = validateParameter(valid_568817, JString, required = true,
                                 default = nil)
  if valid_568817 != nil:
    section.add "name", valid_568817
  var valid_568818 = path.getOrDefault("subscriptionId")
  valid_568818 = validateParameter(valid_568818, JString, required = true,
                                 default = nil)
  if valid_568818 != nil:
    section.add "subscriptionId", valid_568818
  var valid_568819 = path.getOrDefault("id")
  valid_568819 = validateParameter(valid_568819, JString, required = true,
                                 default = nil)
  if valid_568819 != nil:
    section.add "id", valid_568819
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568820 = query.getOrDefault("api-version")
  valid_568820 = validateParameter(valid_568820, JString, required = true,
                                 default = nil)
  if valid_568820 != nil:
    section.add "api-version", valid_568820
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568821: Call_WebAppsListDeploymentLog_568813; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_568821.validator(path, query, header, formData, body)
  let scheme = call_568821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568821.url(scheme.get, call_568821.host, call_568821.base,
                         call_568821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568821, url, valid)

proc call*(call_568822: Call_WebAppsListDeploymentLog_568813;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsListDeploymentLog
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  var path_568823 = newJObject()
  var query_568824 = newJObject()
  add(path_568823, "resourceGroupName", newJString(resourceGroupName))
  add(query_568824, "api-version", newJString(apiVersion))
  add(path_568823, "name", newJString(name))
  add(path_568823, "subscriptionId", newJString(subscriptionId))
  add(path_568823, "id", newJString(id))
  result = call_568822.call(path_568823, query_568824, nil, nil, nil)

var webAppsListDeploymentLog* = Call_WebAppsListDeploymentLog_568813(
    name: "webAppsListDeploymentLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLog_568814, base: "",
    url: url_WebAppsListDeploymentLog_568815, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverBackup_568825 = ref object of OpenApiRestCall_567666
proc url_WebAppsDiscoverBackup_568827(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/discoverbackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverBackup_568826(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568828 = path.getOrDefault("resourceGroupName")
  valid_568828 = validateParameter(valid_568828, JString, required = true,
                                 default = nil)
  if valid_568828 != nil:
    section.add "resourceGroupName", valid_568828
  var valid_568829 = path.getOrDefault("name")
  valid_568829 = validateParameter(valid_568829, JString, required = true,
                                 default = nil)
  if valid_568829 != nil:
    section.add "name", valid_568829
  var valid_568830 = path.getOrDefault("subscriptionId")
  valid_568830 = validateParameter(valid_568830, JString, required = true,
                                 default = nil)
  if valid_568830 != nil:
    section.add "subscriptionId", valid_568830
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568831 = query.getOrDefault("api-version")
  valid_568831 = validateParameter(valid_568831, JString, required = true,
                                 default = nil)
  if valid_568831 != nil:
    section.add "api-version", valid_568831
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568833: Call_WebAppsDiscoverBackup_568825; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  let valid = call_568833.validator(path, query, header, formData, body)
  let scheme = call_568833.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568833.url(scheme.get, call_568833.host, call_568833.base,
                         call_568833.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568833, url, valid)

proc call*(call_568834: Call_WebAppsDiscoverBackup_568825;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsDiscoverBackup
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_568835 = newJObject()
  var query_568836 = newJObject()
  var body_568837 = newJObject()
  add(path_568835, "resourceGroupName", newJString(resourceGroupName))
  add(query_568836, "api-version", newJString(apiVersion))
  add(path_568835, "name", newJString(name))
  add(path_568835, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_568837 = request
  result = call_568834.call(path_568835, query_568836, nil, nil, body_568837)

var webAppsDiscoverBackup* = Call_WebAppsDiscoverBackup_568825(
    name: "webAppsDiscoverBackup", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/discoverbackup",
    validator: validate_WebAppsDiscoverBackup_568826, base: "",
    url: url_WebAppsDiscoverBackup_568827, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiers_568838 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDomainOwnershipIdentifiers_568840(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiers_568839(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568841 = path.getOrDefault("resourceGroupName")
  valid_568841 = validateParameter(valid_568841, JString, required = true,
                                 default = nil)
  if valid_568841 != nil:
    section.add "resourceGroupName", valid_568841
  var valid_568842 = path.getOrDefault("name")
  valid_568842 = validateParameter(valid_568842, JString, required = true,
                                 default = nil)
  if valid_568842 != nil:
    section.add "name", valid_568842
  var valid_568843 = path.getOrDefault("subscriptionId")
  valid_568843 = validateParameter(valid_568843, JString, required = true,
                                 default = nil)
  if valid_568843 != nil:
    section.add "subscriptionId", valid_568843
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568844 = query.getOrDefault("api-version")
  valid_568844 = validateParameter(valid_568844, JString, required = true,
                                 default = nil)
  if valid_568844 != nil:
    section.add "api-version", valid_568844
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568845: Call_WebAppsListDomainOwnershipIdentifiers_568838;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_568845.validator(path, query, header, formData, body)
  let scheme = call_568845.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568845.url(scheme.get, call_568845.host, call_568845.base,
                         call_568845.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568845, url, valid)

proc call*(call_568846: Call_WebAppsListDomainOwnershipIdentifiers_568838;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiers
  ## Lists ownership identifiers for domain associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568847 = newJObject()
  var query_568848 = newJObject()
  add(path_568847, "resourceGroupName", newJString(resourceGroupName))
  add(query_568848, "api-version", newJString(apiVersion))
  add(path_568847, "name", newJString(name))
  add(path_568847, "subscriptionId", newJString(subscriptionId))
  result = call_568846.call(path_568847, query_568848, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiers* = Call_WebAppsListDomainOwnershipIdentifiers_568838(
    name: "webAppsListDomainOwnershipIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiers_568839, base: "",
    url: url_WebAppsListDomainOwnershipIdentifiers_568840, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568861 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568863(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568862(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568864 = path.getOrDefault("resourceGroupName")
  valid_568864 = validateParameter(valid_568864, JString, required = true,
                                 default = nil)
  if valid_568864 != nil:
    section.add "resourceGroupName", valid_568864
  var valid_568865 = path.getOrDefault("name")
  valid_568865 = validateParameter(valid_568865, JString, required = true,
                                 default = nil)
  if valid_568865 != nil:
    section.add "name", valid_568865
  var valid_568866 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_568866 = validateParameter(valid_568866, JString, required = true,
                                 default = nil)
  if valid_568866 != nil:
    section.add "domainOwnershipIdentifierName", valid_568866
  var valid_568867 = path.getOrDefault("subscriptionId")
  valid_568867 = validateParameter(valid_568867, JString, required = true,
                                 default = nil)
  if valid_568867 != nil:
    section.add "subscriptionId", valid_568867
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568868 = query.getOrDefault("api-version")
  valid_568868 = validateParameter(valid_568868, JString, required = true,
                                 default = nil)
  if valid_568868 != nil:
    section.add "api-version", valid_568868
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568870: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568861;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_568870.validator(path, query, header, formData, body)
  let scheme = call_568870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568870.url(scheme.get, call_568870.host, call_568870.base,
                         call_568870.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568870, url, valid)

proc call*(call_568871: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568861;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568872 = newJObject()
  var query_568873 = newJObject()
  var body_568874 = newJObject()
  add(path_568872, "resourceGroupName", newJString(resourceGroupName))
  add(query_568873, "api-version", newJString(apiVersion))
  add(path_568872, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_568874 = domainOwnershipIdentifier
  add(path_568872, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_568872, "subscriptionId", newJString(subscriptionId))
  result = call_568871.call(path_568872, query_568873, nil, nil, body_568874)

var webAppsCreateOrUpdateDomainOwnershipIdentifier* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568861(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifier",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568862,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifier_568863,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifier_568849 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDomainOwnershipIdentifier_568851(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifier_568850(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568852 = path.getOrDefault("resourceGroupName")
  valid_568852 = validateParameter(valid_568852, JString, required = true,
                                 default = nil)
  if valid_568852 != nil:
    section.add "resourceGroupName", valid_568852
  var valid_568853 = path.getOrDefault("name")
  valid_568853 = validateParameter(valid_568853, JString, required = true,
                                 default = nil)
  if valid_568853 != nil:
    section.add "name", valid_568853
  var valid_568854 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_568854 = validateParameter(valid_568854, JString, required = true,
                                 default = nil)
  if valid_568854 != nil:
    section.add "domainOwnershipIdentifierName", valid_568854
  var valid_568855 = path.getOrDefault("subscriptionId")
  valid_568855 = validateParameter(valid_568855, JString, required = true,
                                 default = nil)
  if valid_568855 != nil:
    section.add "subscriptionId", valid_568855
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568856 = query.getOrDefault("api-version")
  valid_568856 = validateParameter(valid_568856, JString, required = true,
                                 default = nil)
  if valid_568856 != nil:
    section.add "api-version", valid_568856
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568857: Call_WebAppsGetDomainOwnershipIdentifier_568849;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_568857.validator(path, query, header, formData, body)
  let scheme = call_568857.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568857.url(scheme.get, call_568857.host, call_568857.base,
                         call_568857.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568857, url, valid)

proc call*(call_568858: Call_WebAppsGetDomainOwnershipIdentifier_568849;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifier
  ## Get domain ownership identifier for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568859 = newJObject()
  var query_568860 = newJObject()
  add(path_568859, "resourceGroupName", newJString(resourceGroupName))
  add(query_568860, "api-version", newJString(apiVersion))
  add(path_568859, "name", newJString(name))
  add(path_568859, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_568859, "subscriptionId", newJString(subscriptionId))
  result = call_568858.call(path_568859, query_568860, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifier* = Call_WebAppsGetDomainOwnershipIdentifier_568849(
    name: "webAppsGetDomainOwnershipIdentifier", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifier_568850, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifier_568851, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifier_568887 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateDomainOwnershipIdentifier_568889(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifier_568888(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568890 = path.getOrDefault("resourceGroupName")
  valid_568890 = validateParameter(valid_568890, JString, required = true,
                                 default = nil)
  if valid_568890 != nil:
    section.add "resourceGroupName", valid_568890
  var valid_568891 = path.getOrDefault("name")
  valid_568891 = validateParameter(valid_568891, JString, required = true,
                                 default = nil)
  if valid_568891 != nil:
    section.add "name", valid_568891
  var valid_568892 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_568892 = validateParameter(valid_568892, JString, required = true,
                                 default = nil)
  if valid_568892 != nil:
    section.add "domainOwnershipIdentifierName", valid_568892
  var valid_568893 = path.getOrDefault("subscriptionId")
  valid_568893 = validateParameter(valid_568893, JString, required = true,
                                 default = nil)
  if valid_568893 != nil:
    section.add "subscriptionId", valid_568893
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568894 = query.getOrDefault("api-version")
  valid_568894 = validateParameter(valid_568894, JString, required = true,
                                 default = nil)
  if valid_568894 != nil:
    section.add "api-version", valid_568894
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568896: Call_WebAppsUpdateDomainOwnershipIdentifier_568887;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_568896.validator(path, query, header, formData, body)
  let scheme = call_568896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568896.url(scheme.get, call_568896.host, call_568896.base,
                         call_568896.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568896, url, valid)

proc call*(call_568897: Call_WebAppsUpdateDomainOwnershipIdentifier_568887;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifier
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568898 = newJObject()
  var query_568899 = newJObject()
  var body_568900 = newJObject()
  add(path_568898, "resourceGroupName", newJString(resourceGroupName))
  add(query_568899, "api-version", newJString(apiVersion))
  add(path_568898, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_568900 = domainOwnershipIdentifier
  add(path_568898, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_568898, "subscriptionId", newJString(subscriptionId))
  result = call_568897.call(path_568898, query_568899, nil, nil, body_568900)

var webAppsUpdateDomainOwnershipIdentifier* = Call_WebAppsUpdateDomainOwnershipIdentifier_568887(
    name: "webAppsUpdateDomainOwnershipIdentifier", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifier_568888, base: "",
    url: url_WebAppsUpdateDomainOwnershipIdentifier_568889,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifier_568875 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteDomainOwnershipIdentifier_568877(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifier_568876(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568878 = path.getOrDefault("resourceGroupName")
  valid_568878 = validateParameter(valid_568878, JString, required = true,
                                 default = nil)
  if valid_568878 != nil:
    section.add "resourceGroupName", valid_568878
  var valid_568879 = path.getOrDefault("name")
  valid_568879 = validateParameter(valid_568879, JString, required = true,
                                 default = nil)
  if valid_568879 != nil:
    section.add "name", valid_568879
  var valid_568880 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_568880 = validateParameter(valid_568880, JString, required = true,
                                 default = nil)
  if valid_568880 != nil:
    section.add "domainOwnershipIdentifierName", valid_568880
  var valid_568881 = path.getOrDefault("subscriptionId")
  valid_568881 = validateParameter(valid_568881, JString, required = true,
                                 default = nil)
  if valid_568881 != nil:
    section.add "subscriptionId", valid_568881
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568882 = query.getOrDefault("api-version")
  valid_568882 = validateParameter(valid_568882, JString, required = true,
                                 default = nil)
  if valid_568882 != nil:
    section.add "api-version", valid_568882
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568883: Call_WebAppsDeleteDomainOwnershipIdentifier_568875;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_568883.validator(path, query, header, formData, body)
  let scheme = call_568883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568883.url(scheme.get, call_568883.host, call_568883.base,
                         call_568883.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568883, url, valid)

proc call*(call_568884: Call_WebAppsDeleteDomainOwnershipIdentifier_568875;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; subscriptionId: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifier
  ## Deletes a domain ownership identifier for a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568885 = newJObject()
  var query_568886 = newJObject()
  add(path_568885, "resourceGroupName", newJString(resourceGroupName))
  add(query_568886, "api-version", newJString(apiVersion))
  add(path_568885, "name", newJString(name))
  add(path_568885, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_568885, "subscriptionId", newJString(subscriptionId))
  result = call_568884.call(path_568885, query_568886, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifier* = Call_WebAppsDeleteDomainOwnershipIdentifier_568875(
    name: "webAppsDeleteDomainOwnershipIdentifier", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifier_568876, base: "",
    url: url_WebAppsDeleteDomainOwnershipIdentifier_568877,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperation_568912 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateMSDeployOperation_568914(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperation_568913(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568915 = path.getOrDefault("resourceGroupName")
  valid_568915 = validateParameter(valid_568915, JString, required = true,
                                 default = nil)
  if valid_568915 != nil:
    section.add "resourceGroupName", valid_568915
  var valid_568916 = path.getOrDefault("name")
  valid_568916 = validateParameter(valid_568916, JString, required = true,
                                 default = nil)
  if valid_568916 != nil:
    section.add "name", valid_568916
  var valid_568917 = path.getOrDefault("subscriptionId")
  valid_568917 = validateParameter(valid_568917, JString, required = true,
                                 default = nil)
  if valid_568917 != nil:
    section.add "subscriptionId", valid_568917
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568918 = query.getOrDefault("api-version")
  valid_568918 = validateParameter(valid_568918, JString, required = true,
                                 default = nil)
  if valid_568918 != nil:
    section.add "api-version", valid_568918
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568920: Call_WebAppsCreateMSDeployOperation_568912; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_568920.validator(path, query, header, formData, body)
  let scheme = call_568920.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568920.url(scheme.get, call_568920.host, call_568920.base,
                         call_568920.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568920, url, valid)

proc call*(call_568921: Call_WebAppsCreateMSDeployOperation_568912;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_568922 = newJObject()
  var query_568923 = newJObject()
  var body_568924 = newJObject()
  add(path_568922, "resourceGroupName", newJString(resourceGroupName))
  add(query_568923, "api-version", newJString(apiVersion))
  add(path_568922, "name", newJString(name))
  add(path_568922, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_568924 = MSDeploy
  result = call_568921.call(path_568922, query_568923, nil, nil, body_568924)

var webAppsCreateMSDeployOperation* = Call_WebAppsCreateMSDeployOperation_568912(
    name: "webAppsCreateMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperation_568913, base: "",
    url: url_WebAppsCreateMSDeployOperation_568914, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatus_568901 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMSDeployStatus_568903(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatus_568902(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568904 = path.getOrDefault("resourceGroupName")
  valid_568904 = validateParameter(valid_568904, JString, required = true,
                                 default = nil)
  if valid_568904 != nil:
    section.add "resourceGroupName", valid_568904
  var valid_568905 = path.getOrDefault("name")
  valid_568905 = validateParameter(valid_568905, JString, required = true,
                                 default = nil)
  if valid_568905 != nil:
    section.add "name", valid_568905
  var valid_568906 = path.getOrDefault("subscriptionId")
  valid_568906 = validateParameter(valid_568906, JString, required = true,
                                 default = nil)
  if valid_568906 != nil:
    section.add "subscriptionId", valid_568906
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568907 = query.getOrDefault("api-version")
  valid_568907 = validateParameter(valid_568907, JString, required = true,
                                 default = nil)
  if valid_568907 != nil:
    section.add "api-version", valid_568907
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568908: Call_WebAppsGetMSDeployStatus_568901; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_568908.validator(path, query, header, formData, body)
  let scheme = call_568908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568908.url(scheme.get, call_568908.host, call_568908.base,
                         call_568908.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568908, url, valid)

proc call*(call_568909: Call_WebAppsGetMSDeployStatus_568901;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568910 = newJObject()
  var query_568911 = newJObject()
  add(path_568910, "resourceGroupName", newJString(resourceGroupName))
  add(query_568911, "api-version", newJString(apiVersion))
  add(path_568910, "name", newJString(name))
  add(path_568910, "subscriptionId", newJString(subscriptionId))
  result = call_568909.call(path_568910, query_568911, nil, nil, nil)

var webAppsGetMSDeployStatus* = Call_WebAppsGetMSDeployStatus_568901(
    name: "webAppsGetMSDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatus_568902, base: "",
    url: url_WebAppsGetMSDeployStatus_568903, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLog_568925 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMSDeployLog_568927(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLog_568926(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568928 = path.getOrDefault("resourceGroupName")
  valid_568928 = validateParameter(valid_568928, JString, required = true,
                                 default = nil)
  if valid_568928 != nil:
    section.add "resourceGroupName", valid_568928
  var valid_568929 = path.getOrDefault("name")
  valid_568929 = validateParameter(valid_568929, JString, required = true,
                                 default = nil)
  if valid_568929 != nil:
    section.add "name", valid_568929
  var valid_568930 = path.getOrDefault("subscriptionId")
  valid_568930 = validateParameter(valid_568930, JString, required = true,
                                 default = nil)
  if valid_568930 != nil:
    section.add "subscriptionId", valid_568930
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568931 = query.getOrDefault("api-version")
  valid_568931 = validateParameter(valid_568931, JString, required = true,
                                 default = nil)
  if valid_568931 != nil:
    section.add "api-version", valid_568931
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568932: Call_WebAppsGetMSDeployLog_568925; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_568932.validator(path, query, header, formData, body)
  let scheme = call_568932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568932.url(scheme.get, call_568932.host, call_568932.base,
                         call_568932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568932, url, valid)

proc call*(call_568933: Call_WebAppsGetMSDeployLog_568925;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568934 = newJObject()
  var query_568935 = newJObject()
  add(path_568934, "resourceGroupName", newJString(resourceGroupName))
  add(query_568935, "api-version", newJString(apiVersion))
  add(path_568934, "name", newJString(name))
  add(path_568934, "subscriptionId", newJString(subscriptionId))
  result = call_568933.call(path_568934, query_568935, nil, nil, nil)

var webAppsGetMSDeployLog* = Call_WebAppsGetMSDeployLog_568925(
    name: "webAppsGetMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLog_568926, base: "",
    url: url_WebAppsGetMSDeployLog_568927, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctions_568936 = ref object of OpenApiRestCall_567666
proc url_WebAppsListFunctions_568938(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctions_568937(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568939 = path.getOrDefault("resourceGroupName")
  valid_568939 = validateParameter(valid_568939, JString, required = true,
                                 default = nil)
  if valid_568939 != nil:
    section.add "resourceGroupName", valid_568939
  var valid_568940 = path.getOrDefault("name")
  valid_568940 = validateParameter(valid_568940, JString, required = true,
                                 default = nil)
  if valid_568940 != nil:
    section.add "name", valid_568940
  var valid_568941 = path.getOrDefault("subscriptionId")
  valid_568941 = validateParameter(valid_568941, JString, required = true,
                                 default = nil)
  if valid_568941 != nil:
    section.add "subscriptionId", valid_568941
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568942 = query.getOrDefault("api-version")
  valid_568942 = validateParameter(valid_568942, JString, required = true,
                                 default = nil)
  if valid_568942 != nil:
    section.add "api-version", valid_568942
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568943: Call_WebAppsListFunctions_568936; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_568943.validator(path, query, header, formData, body)
  let scheme = call_568943.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568943.url(scheme.get, call_568943.host, call_568943.base,
                         call_568943.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568943, url, valid)

proc call*(call_568944: Call_WebAppsListFunctions_568936;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListFunctions
  ## List the functions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568945 = newJObject()
  var query_568946 = newJObject()
  add(path_568945, "resourceGroupName", newJString(resourceGroupName))
  add(query_568946, "api-version", newJString(apiVersion))
  add(path_568945, "name", newJString(name))
  add(path_568945, "subscriptionId", newJString(subscriptionId))
  result = call_568944.call(path_568945, query_568946, nil, nil, nil)

var webAppsListFunctions* = Call_WebAppsListFunctions_568936(
    name: "webAppsListFunctions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions",
    validator: validate_WebAppsListFunctions_568937, base: "",
    url: url_WebAppsListFunctions_568938, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminToken_568947 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetFunctionsAdminToken_568949(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminToken_568948(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568950 = path.getOrDefault("resourceGroupName")
  valid_568950 = validateParameter(valid_568950, JString, required = true,
                                 default = nil)
  if valid_568950 != nil:
    section.add "resourceGroupName", valid_568950
  var valid_568951 = path.getOrDefault("name")
  valid_568951 = validateParameter(valid_568951, JString, required = true,
                                 default = nil)
  if valid_568951 != nil:
    section.add "name", valid_568951
  var valid_568952 = path.getOrDefault("subscriptionId")
  valid_568952 = validateParameter(valid_568952, JString, required = true,
                                 default = nil)
  if valid_568952 != nil:
    section.add "subscriptionId", valid_568952
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568953 = query.getOrDefault("api-version")
  valid_568953 = validateParameter(valid_568953, JString, required = true,
                                 default = nil)
  if valid_568953 != nil:
    section.add "api-version", valid_568953
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568954: Call_WebAppsGetFunctionsAdminToken_568947; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_568954.validator(path, query, header, formData, body)
  let scheme = call_568954.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568954.url(scheme.get, call_568954.host, call_568954.base,
                         call_568954.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568954, url, valid)

proc call*(call_568955: Call_WebAppsGetFunctionsAdminToken_568947;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetFunctionsAdminToken
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_568956 = newJObject()
  var query_568957 = newJObject()
  add(path_568956, "resourceGroupName", newJString(resourceGroupName))
  add(query_568957, "api-version", newJString(apiVersion))
  add(path_568956, "name", newJString(name))
  add(path_568956, "subscriptionId", newJString(subscriptionId))
  result = call_568955.call(path_568956, query_568957, nil, nil, nil)

var webAppsGetFunctionsAdminToken* = Call_WebAppsGetFunctionsAdminToken_568947(
    name: "webAppsGetFunctionsAdminToken", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminToken_568948, base: "",
    url: url_WebAppsGetFunctionsAdminToken_568949, schemes: {Scheme.Https})
type
  Call_WebAppsCreateFunction_568970 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateFunction_568972(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateFunction_568971(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568973 = path.getOrDefault("resourceGroupName")
  valid_568973 = validateParameter(valid_568973, JString, required = true,
                                 default = nil)
  if valid_568973 != nil:
    section.add "resourceGroupName", valid_568973
  var valid_568974 = path.getOrDefault("name")
  valid_568974 = validateParameter(valid_568974, JString, required = true,
                                 default = nil)
  if valid_568974 != nil:
    section.add "name", valid_568974
  var valid_568975 = path.getOrDefault("subscriptionId")
  valid_568975 = validateParameter(valid_568975, JString, required = true,
                                 default = nil)
  if valid_568975 != nil:
    section.add "subscriptionId", valid_568975
  var valid_568976 = path.getOrDefault("functionName")
  valid_568976 = validateParameter(valid_568976, JString, required = true,
                                 default = nil)
  if valid_568976 != nil:
    section.add "functionName", valid_568976
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568977 = query.getOrDefault("api-version")
  valid_568977 = validateParameter(valid_568977, JString, required = true,
                                 default = nil)
  if valid_568977 != nil:
    section.add "api-version", valid_568977
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_568979: Call_WebAppsCreateFunction_568970; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_568979.validator(path, query, header, formData, body)
  let scheme = call_568979.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568979.url(scheme.get, call_568979.host, call_568979.base,
                         call_568979.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568979, url, valid)

proc call*(call_568980: Call_WebAppsCreateFunction_568970;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionEnvelope: JsonNode; functionName: string): Recallable =
  ## webAppsCreateFunction
  ## Create function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   functionName: string (required)
  ##               : Function name.
  var path_568981 = newJObject()
  var query_568982 = newJObject()
  var body_568983 = newJObject()
  add(path_568981, "resourceGroupName", newJString(resourceGroupName))
  add(query_568982, "api-version", newJString(apiVersion))
  add(path_568981, "name", newJString(name))
  add(path_568981, "subscriptionId", newJString(subscriptionId))
  if functionEnvelope != nil:
    body_568983 = functionEnvelope
  add(path_568981, "functionName", newJString(functionName))
  result = call_568980.call(path_568981, query_568982, nil, nil, body_568983)

var webAppsCreateFunction* = Call_WebAppsCreateFunction_568970(
    name: "webAppsCreateFunction", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsCreateFunction_568971, base: "",
    url: url_WebAppsCreateFunction_568972, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunction_568958 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetFunction_568960(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunction_568959(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568961 = path.getOrDefault("resourceGroupName")
  valid_568961 = validateParameter(valid_568961, JString, required = true,
                                 default = nil)
  if valid_568961 != nil:
    section.add "resourceGroupName", valid_568961
  var valid_568962 = path.getOrDefault("name")
  valid_568962 = validateParameter(valid_568962, JString, required = true,
                                 default = nil)
  if valid_568962 != nil:
    section.add "name", valid_568962
  var valid_568963 = path.getOrDefault("subscriptionId")
  valid_568963 = validateParameter(valid_568963, JString, required = true,
                                 default = nil)
  if valid_568963 != nil:
    section.add "subscriptionId", valid_568963
  var valid_568964 = path.getOrDefault("functionName")
  valid_568964 = validateParameter(valid_568964, JString, required = true,
                                 default = nil)
  if valid_568964 != nil:
    section.add "functionName", valid_568964
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568965 = query.getOrDefault("api-version")
  valid_568965 = validateParameter(valid_568965, JString, required = true,
                                 default = nil)
  if valid_568965 != nil:
    section.add "api-version", valid_568965
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568966: Call_WebAppsGetFunction_568958; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_568966.validator(path, query, header, formData, body)
  let scheme = call_568966.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568966.url(scheme.get, call_568966.host, call_568966.base,
                         call_568966.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568966, url, valid)

proc call*(call_568967: Call_WebAppsGetFunction_568958; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          functionName: string): Recallable =
  ## webAppsGetFunction
  ## Get function information by its ID for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_568968 = newJObject()
  var query_568969 = newJObject()
  add(path_568968, "resourceGroupName", newJString(resourceGroupName))
  add(query_568969, "api-version", newJString(apiVersion))
  add(path_568968, "name", newJString(name))
  add(path_568968, "subscriptionId", newJString(subscriptionId))
  add(path_568968, "functionName", newJString(functionName))
  result = call_568967.call(path_568968, query_568969, nil, nil, nil)

var webAppsGetFunction* = Call_WebAppsGetFunction_568958(
    name: "webAppsGetFunction", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsGetFunction_568959, base: "",
    url: url_WebAppsGetFunction_568960, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteFunction_568984 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteFunction_568986(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteFunction_568985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568987 = path.getOrDefault("resourceGroupName")
  valid_568987 = validateParameter(valid_568987, JString, required = true,
                                 default = nil)
  if valid_568987 != nil:
    section.add "resourceGroupName", valid_568987
  var valid_568988 = path.getOrDefault("name")
  valid_568988 = validateParameter(valid_568988, JString, required = true,
                                 default = nil)
  if valid_568988 != nil:
    section.add "name", valid_568988
  var valid_568989 = path.getOrDefault("subscriptionId")
  valid_568989 = validateParameter(valid_568989, JString, required = true,
                                 default = nil)
  if valid_568989 != nil:
    section.add "subscriptionId", valid_568989
  var valid_568990 = path.getOrDefault("functionName")
  valid_568990 = validateParameter(valid_568990, JString, required = true,
                                 default = nil)
  if valid_568990 != nil:
    section.add "functionName", valid_568990
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568991 = query.getOrDefault("api-version")
  valid_568991 = validateParameter(valid_568991, JString, required = true,
                                 default = nil)
  if valid_568991 != nil:
    section.add "api-version", valid_568991
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568992: Call_WebAppsDeleteFunction_568984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_568992.validator(path, query, header, formData, body)
  let scheme = call_568992.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568992.url(scheme.get, call_568992.host, call_568992.base,
                         call_568992.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568992, url, valid)

proc call*(call_568993: Call_WebAppsDeleteFunction_568984;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsDeleteFunction
  ## Delete a function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_568994 = newJObject()
  var query_568995 = newJObject()
  add(path_568994, "resourceGroupName", newJString(resourceGroupName))
  add(query_568995, "api-version", newJString(apiVersion))
  add(path_568994, "name", newJString(name))
  add(path_568994, "subscriptionId", newJString(subscriptionId))
  add(path_568994, "functionName", newJString(functionName))
  result = call_568993.call(path_568994, query_568995, nil, nil, nil)

var webAppsDeleteFunction* = Call_WebAppsDeleteFunction_568984(
    name: "webAppsDeleteFunction", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    validator: validate_WebAppsDeleteFunction_568985, base: "",
    url: url_WebAppsDeleteFunction_568986, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecrets_568996 = ref object of OpenApiRestCall_567666
proc url_WebAppsListFunctionSecrets_568998(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecrets_568997(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568999 = path.getOrDefault("resourceGroupName")
  valid_568999 = validateParameter(valid_568999, JString, required = true,
                                 default = nil)
  if valid_568999 != nil:
    section.add "resourceGroupName", valid_568999
  var valid_569000 = path.getOrDefault("name")
  valid_569000 = validateParameter(valid_569000, JString, required = true,
                                 default = nil)
  if valid_569000 != nil:
    section.add "name", valid_569000
  var valid_569001 = path.getOrDefault("subscriptionId")
  valid_569001 = validateParameter(valid_569001, JString, required = true,
                                 default = nil)
  if valid_569001 != nil:
    section.add "subscriptionId", valid_569001
  var valid_569002 = path.getOrDefault("functionName")
  valid_569002 = validateParameter(valid_569002, JString, required = true,
                                 default = nil)
  if valid_569002 != nil:
    section.add "functionName", valid_569002
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569003 = query.getOrDefault("api-version")
  valid_569003 = validateParameter(valid_569003, JString, required = true,
                                 default = nil)
  if valid_569003 != nil:
    section.add "api-version", valid_569003
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569004: Call_WebAppsListFunctionSecrets_568996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_569004.validator(path, query, header, formData, body)
  let scheme = call_569004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569004.url(scheme.get, call_569004.host, call_569004.base,
                         call_569004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569004, url, valid)

proc call*(call_569005: Call_WebAppsListFunctionSecrets_568996;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsListFunctionSecrets
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_569006 = newJObject()
  var query_569007 = newJObject()
  add(path_569006, "resourceGroupName", newJString(resourceGroupName))
  add(query_569007, "api-version", newJString(apiVersion))
  add(path_569006, "name", newJString(name))
  add(path_569006, "subscriptionId", newJString(subscriptionId))
  add(path_569006, "functionName", newJString(functionName))
  result = call_569005.call(path_569006, query_569007, nil, nil, nil)

var webAppsListFunctionSecrets* = Call_WebAppsListFunctionSecrets_568996(
    name: "webAppsListFunctionSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecrets_568997, base: "",
    url: url_WebAppsListFunctionSecrets_568998, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindings_569008 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHostNameBindings_569010(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindings_569009(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569011 = path.getOrDefault("resourceGroupName")
  valid_569011 = validateParameter(valid_569011, JString, required = true,
                                 default = nil)
  if valid_569011 != nil:
    section.add "resourceGroupName", valid_569011
  var valid_569012 = path.getOrDefault("name")
  valid_569012 = validateParameter(valid_569012, JString, required = true,
                                 default = nil)
  if valid_569012 != nil:
    section.add "name", valid_569012
  var valid_569013 = path.getOrDefault("subscriptionId")
  valid_569013 = validateParameter(valid_569013, JString, required = true,
                                 default = nil)
  if valid_569013 != nil:
    section.add "subscriptionId", valid_569013
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569014 = query.getOrDefault("api-version")
  valid_569014 = validateParameter(valid_569014, JString, required = true,
                                 default = nil)
  if valid_569014 != nil:
    section.add "api-version", valid_569014
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569015: Call_WebAppsListHostNameBindings_569008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_569015.validator(path, query, header, formData, body)
  let scheme = call_569015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569015.url(scheme.get, call_569015.host, call_569015.base,
                         call_569015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569015, url, valid)

proc call*(call_569016: Call_WebAppsListHostNameBindings_569008;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListHostNameBindings
  ## Get hostname bindings for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569017 = newJObject()
  var query_569018 = newJObject()
  add(path_569017, "resourceGroupName", newJString(resourceGroupName))
  add(query_569018, "api-version", newJString(apiVersion))
  add(path_569017, "name", newJString(name))
  add(path_569017, "subscriptionId", newJString(subscriptionId))
  result = call_569016.call(path_569017, query_569018, nil, nil, nil)

var webAppsListHostNameBindings* = Call_WebAppsListHostNameBindings_569008(
    name: "webAppsListHostNameBindings", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindings_569009, base: "",
    url: url_WebAppsListHostNameBindings_569010, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBinding_569031 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateHostNameBinding_569033(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBinding_569032(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569034 = path.getOrDefault("resourceGroupName")
  valid_569034 = validateParameter(valid_569034, JString, required = true,
                                 default = nil)
  if valid_569034 != nil:
    section.add "resourceGroupName", valid_569034
  var valid_569035 = path.getOrDefault("name")
  valid_569035 = validateParameter(valid_569035, JString, required = true,
                                 default = nil)
  if valid_569035 != nil:
    section.add "name", valid_569035
  var valid_569036 = path.getOrDefault("subscriptionId")
  valid_569036 = validateParameter(valid_569036, JString, required = true,
                                 default = nil)
  if valid_569036 != nil:
    section.add "subscriptionId", valid_569036
  var valid_569037 = path.getOrDefault("hostName")
  valid_569037 = validateParameter(valid_569037, JString, required = true,
                                 default = nil)
  if valid_569037 != nil:
    section.add "hostName", valid_569037
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569038 = query.getOrDefault("api-version")
  valid_569038 = validateParameter(valid_569038, JString, required = true,
                                 default = nil)
  if valid_569038 != nil:
    section.add "api-version", valid_569038
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569040: Call_WebAppsCreateOrUpdateHostNameBinding_569031;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_569040.validator(path, query, header, formData, body)
  let scheme = call_569040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569040.url(scheme.get, call_569040.host, call_569040.base,
                         call_569040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569040, url, valid)

proc call*(call_569041: Call_WebAppsCreateOrUpdateHostNameBinding_569031;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## webAppsCreateOrUpdateHostNameBinding
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  var path_569042 = newJObject()
  var query_569043 = newJObject()
  var body_569044 = newJObject()
  add(path_569042, "resourceGroupName", newJString(resourceGroupName))
  add(query_569043, "api-version", newJString(apiVersion))
  add(path_569042, "name", newJString(name))
  add(path_569042, "subscriptionId", newJString(subscriptionId))
  add(path_569042, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_569044 = hostNameBinding
  result = call_569041.call(path_569042, query_569043, nil, nil, body_569044)

var webAppsCreateOrUpdateHostNameBinding* = Call_WebAppsCreateOrUpdateHostNameBinding_569031(
    name: "webAppsCreateOrUpdateHostNameBinding", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBinding_569032, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBinding_569033, schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBinding_569019 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetHostNameBinding_569021(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBinding_569020(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569022 = path.getOrDefault("resourceGroupName")
  valid_569022 = validateParameter(valid_569022, JString, required = true,
                                 default = nil)
  if valid_569022 != nil:
    section.add "resourceGroupName", valid_569022
  var valid_569023 = path.getOrDefault("name")
  valid_569023 = validateParameter(valid_569023, JString, required = true,
                                 default = nil)
  if valid_569023 != nil:
    section.add "name", valid_569023
  var valid_569024 = path.getOrDefault("subscriptionId")
  valid_569024 = validateParameter(valid_569024, JString, required = true,
                                 default = nil)
  if valid_569024 != nil:
    section.add "subscriptionId", valid_569024
  var valid_569025 = path.getOrDefault("hostName")
  valid_569025 = validateParameter(valid_569025, JString, required = true,
                                 default = nil)
  if valid_569025 != nil:
    section.add "hostName", valid_569025
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569026 = query.getOrDefault("api-version")
  valid_569026 = validateParameter(valid_569026, JString, required = true,
                                 default = nil)
  if valid_569026 != nil:
    section.add "api-version", valid_569026
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569027: Call_WebAppsGetHostNameBinding_569019; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_569027.validator(path, query, header, formData, body)
  let scheme = call_569027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569027.url(scheme.get, call_569027.host, call_569027.base,
                         call_569027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569027, url, valid)

proc call*(call_569028: Call_WebAppsGetHostNameBinding_569019;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsGetHostNameBinding
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_569029 = newJObject()
  var query_569030 = newJObject()
  add(path_569029, "resourceGroupName", newJString(resourceGroupName))
  add(query_569030, "api-version", newJString(apiVersion))
  add(path_569029, "name", newJString(name))
  add(path_569029, "subscriptionId", newJString(subscriptionId))
  add(path_569029, "hostName", newJString(hostName))
  result = call_569028.call(path_569029, query_569030, nil, nil, nil)

var webAppsGetHostNameBinding* = Call_WebAppsGetHostNameBinding_569019(
    name: "webAppsGetHostNameBinding", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBinding_569020, base: "",
    url: url_WebAppsGetHostNameBinding_569021, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBinding_569045 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteHostNameBinding_569047(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBinding_569046(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569048 = path.getOrDefault("resourceGroupName")
  valid_569048 = validateParameter(valid_569048, JString, required = true,
                                 default = nil)
  if valid_569048 != nil:
    section.add "resourceGroupName", valid_569048
  var valid_569049 = path.getOrDefault("name")
  valid_569049 = validateParameter(valid_569049, JString, required = true,
                                 default = nil)
  if valid_569049 != nil:
    section.add "name", valid_569049
  var valid_569050 = path.getOrDefault("subscriptionId")
  valid_569050 = validateParameter(valid_569050, JString, required = true,
                                 default = nil)
  if valid_569050 != nil:
    section.add "subscriptionId", valid_569050
  var valid_569051 = path.getOrDefault("hostName")
  valid_569051 = validateParameter(valid_569051, JString, required = true,
                                 default = nil)
  if valid_569051 != nil:
    section.add "hostName", valid_569051
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569052 = query.getOrDefault("api-version")
  valid_569052 = validateParameter(valid_569052, JString, required = true,
                                 default = nil)
  if valid_569052 != nil:
    section.add "api-version", valid_569052
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569053: Call_WebAppsDeleteHostNameBinding_569045; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_569053.validator(path, query, header, formData, body)
  let scheme = call_569053.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569053.url(scheme.get, call_569053.host, call_569053.base,
                         call_569053.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569053, url, valid)

proc call*(call_569054: Call_WebAppsDeleteHostNameBinding_569045;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBinding
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_569055 = newJObject()
  var query_569056 = newJObject()
  add(path_569055, "resourceGroupName", newJString(resourceGroupName))
  add(query_569056, "api-version", newJString(apiVersion))
  add(path_569055, "name", newJString(name))
  add(path_569055, "subscriptionId", newJString(subscriptionId))
  add(path_569055, "hostName", newJString(hostName))
  result = call_569054.call(path_569055, query_569056, nil, nil, nil)

var webAppsDeleteHostNameBinding* = Call_WebAppsDeleteHostNameBinding_569045(
    name: "webAppsDeleteHostNameBinding", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBinding_569046, base: "",
    url: url_WebAppsDeleteHostNameBinding_569047, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnection_569070 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateHybridConnection_569072(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnection_569071(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_569073 = path.getOrDefault("namespaceName")
  valid_569073 = validateParameter(valid_569073, JString, required = true,
                                 default = nil)
  if valid_569073 != nil:
    section.add "namespaceName", valid_569073
  var valid_569074 = path.getOrDefault("resourceGroupName")
  valid_569074 = validateParameter(valid_569074, JString, required = true,
                                 default = nil)
  if valid_569074 != nil:
    section.add "resourceGroupName", valid_569074
  var valid_569075 = path.getOrDefault("name")
  valid_569075 = validateParameter(valid_569075, JString, required = true,
                                 default = nil)
  if valid_569075 != nil:
    section.add "name", valid_569075
  var valid_569076 = path.getOrDefault("subscriptionId")
  valid_569076 = validateParameter(valid_569076, JString, required = true,
                                 default = nil)
  if valid_569076 != nil:
    section.add "subscriptionId", valid_569076
  var valid_569077 = path.getOrDefault("relayName")
  valid_569077 = validateParameter(valid_569077, JString, required = true,
                                 default = nil)
  if valid_569077 != nil:
    section.add "relayName", valid_569077
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569078 = query.getOrDefault("api-version")
  valid_569078 = validateParameter(valid_569078, JString, required = true,
                                 default = nil)
  if valid_569078 != nil:
    section.add "api-version", valid_569078
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569080: Call_WebAppsCreateOrUpdateHybridConnection_569070;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_569080.validator(path, query, header, formData, body)
  let scheme = call_569080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569080.url(scheme.get, call_569080.host, call_569080.base,
                         call_569080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569080, url, valid)

proc call*(call_569081: Call_WebAppsCreateOrUpdateHybridConnection_569070;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          subscriptionId: string; relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_569082 = newJObject()
  var query_569083 = newJObject()
  var body_569084 = newJObject()
  add(path_569082, "namespaceName", newJString(namespaceName))
  add(path_569082, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_569084 = connectionEnvelope
  add(path_569082, "name", newJString(name))
  add(query_569083, "api-version", newJString(apiVersion))
  add(path_569082, "subscriptionId", newJString(subscriptionId))
  add(path_569082, "relayName", newJString(relayName))
  result = call_569081.call(path_569082, query_569083, nil, nil, body_569084)

var webAppsCreateOrUpdateHybridConnection* = Call_WebAppsCreateOrUpdateHybridConnection_569070(
    name: "webAppsCreateOrUpdateHybridConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnection_569071, base: "",
    url: url_WebAppsCreateOrUpdateHybridConnection_569072, schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnection_569057 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetHybridConnection_569059(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnection_569058(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_569060 = path.getOrDefault("namespaceName")
  valid_569060 = validateParameter(valid_569060, JString, required = true,
                                 default = nil)
  if valid_569060 != nil:
    section.add "namespaceName", valid_569060
  var valid_569061 = path.getOrDefault("resourceGroupName")
  valid_569061 = validateParameter(valid_569061, JString, required = true,
                                 default = nil)
  if valid_569061 != nil:
    section.add "resourceGroupName", valid_569061
  var valid_569062 = path.getOrDefault("name")
  valid_569062 = validateParameter(valid_569062, JString, required = true,
                                 default = nil)
  if valid_569062 != nil:
    section.add "name", valid_569062
  var valid_569063 = path.getOrDefault("subscriptionId")
  valid_569063 = validateParameter(valid_569063, JString, required = true,
                                 default = nil)
  if valid_569063 != nil:
    section.add "subscriptionId", valid_569063
  var valid_569064 = path.getOrDefault("relayName")
  valid_569064 = validateParameter(valid_569064, JString, required = true,
                                 default = nil)
  if valid_569064 != nil:
    section.add "relayName", valid_569064
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569065 = query.getOrDefault("api-version")
  valid_569065 = validateParameter(valid_569065, JString, required = true,
                                 default = nil)
  if valid_569065 != nil:
    section.add "api-version", valid_569065
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569066: Call_WebAppsGetHybridConnection_569057; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_569066.validator(path, query, header, formData, body)
  let scheme = call_569066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569066.url(scheme.get, call_569066.host, call_569066.base,
                         call_569066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569066, url, valid)

proc call*(call_569067: Call_WebAppsGetHybridConnection_569057;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsGetHybridConnection
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_569068 = newJObject()
  var query_569069 = newJObject()
  add(path_569068, "namespaceName", newJString(namespaceName))
  add(path_569068, "resourceGroupName", newJString(resourceGroupName))
  add(query_569069, "api-version", newJString(apiVersion))
  add(path_569068, "name", newJString(name))
  add(path_569068, "subscriptionId", newJString(subscriptionId))
  add(path_569068, "relayName", newJString(relayName))
  result = call_569067.call(path_569068, query_569069, nil, nil, nil)

var webAppsGetHybridConnection* = Call_WebAppsGetHybridConnection_569057(
    name: "webAppsGetHybridConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnection_569058, base: "",
    url: url_WebAppsGetHybridConnection_569059, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnection_569098 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateHybridConnection_569100(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnection_569099(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_569101 = path.getOrDefault("namespaceName")
  valid_569101 = validateParameter(valid_569101, JString, required = true,
                                 default = nil)
  if valid_569101 != nil:
    section.add "namespaceName", valid_569101
  var valid_569102 = path.getOrDefault("resourceGroupName")
  valid_569102 = validateParameter(valid_569102, JString, required = true,
                                 default = nil)
  if valid_569102 != nil:
    section.add "resourceGroupName", valid_569102
  var valid_569103 = path.getOrDefault("name")
  valid_569103 = validateParameter(valid_569103, JString, required = true,
                                 default = nil)
  if valid_569103 != nil:
    section.add "name", valid_569103
  var valid_569104 = path.getOrDefault("subscriptionId")
  valid_569104 = validateParameter(valid_569104, JString, required = true,
                                 default = nil)
  if valid_569104 != nil:
    section.add "subscriptionId", valid_569104
  var valid_569105 = path.getOrDefault("relayName")
  valid_569105 = validateParameter(valid_569105, JString, required = true,
                                 default = nil)
  if valid_569105 != nil:
    section.add "relayName", valid_569105
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569106 = query.getOrDefault("api-version")
  valid_569106 = validateParameter(valid_569106, JString, required = true,
                                 default = nil)
  if valid_569106 != nil:
    section.add "api-version", valid_569106
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569108: Call_WebAppsUpdateHybridConnection_569098; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_569108.validator(path, query, header, formData, body)
  let scheme = call_569108.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569108.url(scheme.get, call_569108.host, call_569108.base,
                         call_569108.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569108, url, valid)

proc call*(call_569109: Call_WebAppsUpdateHybridConnection_569098;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          subscriptionId: string; relayName: string): Recallable =
  ## webAppsUpdateHybridConnection
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_569110 = newJObject()
  var query_569111 = newJObject()
  var body_569112 = newJObject()
  add(path_569110, "namespaceName", newJString(namespaceName))
  add(path_569110, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_569112 = connectionEnvelope
  add(path_569110, "name", newJString(name))
  add(query_569111, "api-version", newJString(apiVersion))
  add(path_569110, "subscriptionId", newJString(subscriptionId))
  add(path_569110, "relayName", newJString(relayName))
  result = call_569109.call(path_569110, query_569111, nil, nil, body_569112)

var webAppsUpdateHybridConnection* = Call_WebAppsUpdateHybridConnection_569098(
    name: "webAppsUpdateHybridConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnection_569099, base: "",
    url: url_WebAppsUpdateHybridConnection_569100, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnection_569085 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteHybridConnection_569087(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnection_569086(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_569088 = path.getOrDefault("namespaceName")
  valid_569088 = validateParameter(valid_569088, JString, required = true,
                                 default = nil)
  if valid_569088 != nil:
    section.add "namespaceName", valid_569088
  var valid_569089 = path.getOrDefault("resourceGroupName")
  valid_569089 = validateParameter(valid_569089, JString, required = true,
                                 default = nil)
  if valid_569089 != nil:
    section.add "resourceGroupName", valid_569089
  var valid_569090 = path.getOrDefault("name")
  valid_569090 = validateParameter(valid_569090, JString, required = true,
                                 default = nil)
  if valid_569090 != nil:
    section.add "name", valid_569090
  var valid_569091 = path.getOrDefault("subscriptionId")
  valid_569091 = validateParameter(valid_569091, JString, required = true,
                                 default = nil)
  if valid_569091 != nil:
    section.add "subscriptionId", valid_569091
  var valid_569092 = path.getOrDefault("relayName")
  valid_569092 = validateParameter(valid_569092, JString, required = true,
                                 default = nil)
  if valid_569092 != nil:
    section.add "relayName", valid_569092
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569093 = query.getOrDefault("api-version")
  valid_569093 = validateParameter(valid_569093, JString, required = true,
                                 default = nil)
  if valid_569093 != nil:
    section.add "api-version", valid_569093
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569094: Call_WebAppsDeleteHybridConnection_569085; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_569094.validator(path, query, header, formData, body)
  let scheme = call_569094.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569094.url(scheme.get, call_569094.host, call_569094.base,
                         call_569094.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569094, url, valid)

proc call*(call_569095: Call_WebAppsDeleteHybridConnection_569085;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnection
  ## Removes a Hybrid Connection from this site.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_569096 = newJObject()
  var query_569097 = newJObject()
  add(path_569096, "namespaceName", newJString(namespaceName))
  add(path_569096, "resourceGroupName", newJString(resourceGroupName))
  add(query_569097, "api-version", newJString(apiVersion))
  add(path_569096, "name", newJString(name))
  add(path_569096, "subscriptionId", newJString(subscriptionId))
  add(path_569096, "relayName", newJString(relayName))
  result = call_569095.call(path_569096, query_569097, nil, nil, nil)

var webAppsDeleteHybridConnection* = Call_WebAppsDeleteHybridConnection_569085(
    name: "webAppsDeleteHybridConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnection_569086, base: "",
    url: url_WebAppsDeleteHybridConnection_569087, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeys_569113 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHybridConnectionKeys_569115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeys_569114(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_569116 = path.getOrDefault("namespaceName")
  valid_569116 = validateParameter(valid_569116, JString, required = true,
                                 default = nil)
  if valid_569116 != nil:
    section.add "namespaceName", valid_569116
  var valid_569117 = path.getOrDefault("resourceGroupName")
  valid_569117 = validateParameter(valid_569117, JString, required = true,
                                 default = nil)
  if valid_569117 != nil:
    section.add "resourceGroupName", valid_569117
  var valid_569118 = path.getOrDefault("name")
  valid_569118 = validateParameter(valid_569118, JString, required = true,
                                 default = nil)
  if valid_569118 != nil:
    section.add "name", valid_569118
  var valid_569119 = path.getOrDefault("subscriptionId")
  valid_569119 = validateParameter(valid_569119, JString, required = true,
                                 default = nil)
  if valid_569119 != nil:
    section.add "subscriptionId", valid_569119
  var valid_569120 = path.getOrDefault("relayName")
  valid_569120 = validateParameter(valid_569120, JString, required = true,
                                 default = nil)
  if valid_569120 != nil:
    section.add "relayName", valid_569120
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569121 = query.getOrDefault("api-version")
  valid_569121 = validateParameter(valid_569121, JString, required = true,
                                 default = nil)
  if valid_569121 != nil:
    section.add "api-version", valid_569121
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569122: Call_WebAppsListHybridConnectionKeys_569113;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_569122.validator(path, query, header, formData, body)
  let scheme = call_569122.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569122.url(scheme.get, call_569122.host, call_569122.base,
                         call_569122.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569122, url, valid)

proc call*(call_569123: Call_WebAppsListHybridConnectionKeys_569113;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeys
  ## Gets the send key name and value for a Hybrid Connection.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_569124 = newJObject()
  var query_569125 = newJObject()
  add(path_569124, "namespaceName", newJString(namespaceName))
  add(path_569124, "resourceGroupName", newJString(resourceGroupName))
  add(query_569125, "api-version", newJString(apiVersion))
  add(path_569124, "name", newJString(name))
  add(path_569124, "subscriptionId", newJString(subscriptionId))
  add(path_569124, "relayName", newJString(relayName))
  result = call_569123.call(path_569124, query_569125, nil, nil, nil)

var webAppsListHybridConnectionKeys* = Call_WebAppsListHybridConnectionKeys_569113(
    name: "webAppsListHybridConnectionKeys", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeys_569114, base: "",
    url: url_WebAppsListHybridConnectionKeys_569115, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnections_569126 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHybridConnections_569128(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnections_569127(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569129 = path.getOrDefault("resourceGroupName")
  valid_569129 = validateParameter(valid_569129, JString, required = true,
                                 default = nil)
  if valid_569129 != nil:
    section.add "resourceGroupName", valid_569129
  var valid_569130 = path.getOrDefault("name")
  valid_569130 = validateParameter(valid_569130, JString, required = true,
                                 default = nil)
  if valid_569130 != nil:
    section.add "name", valid_569130
  var valid_569131 = path.getOrDefault("subscriptionId")
  valid_569131 = validateParameter(valid_569131, JString, required = true,
                                 default = nil)
  if valid_569131 != nil:
    section.add "subscriptionId", valid_569131
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569132 = query.getOrDefault("api-version")
  valid_569132 = validateParameter(valid_569132, JString, required = true,
                                 default = nil)
  if valid_569132 != nil:
    section.add "api-version", valid_569132
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569133: Call_WebAppsListHybridConnections_569126; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_569133.validator(path, query, header, formData, body)
  let scheme = call_569133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569133.url(scheme.get, call_569133.host, call_569133.base,
                         call_569133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569133, url, valid)

proc call*(call_569134: Call_WebAppsListHybridConnections_569126;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListHybridConnections
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569135 = newJObject()
  var query_569136 = newJObject()
  add(path_569135, "resourceGroupName", newJString(resourceGroupName))
  add(query_569136, "api-version", newJString(apiVersion))
  add(path_569135, "name", newJString(name))
  add(path_569135, "subscriptionId", newJString(subscriptionId))
  result = call_569134.call(path_569135, query_569136, nil, nil, nil)

var webAppsListHybridConnections* = Call_WebAppsListHybridConnections_569126(
    name: "webAppsListHybridConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnections_569127, base: "",
    url: url_WebAppsListHybridConnections_569128, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnections_569137 = ref object of OpenApiRestCall_567666
proc url_WebAppsListRelayServiceConnections_569139(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnections_569138(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569140 = path.getOrDefault("resourceGroupName")
  valid_569140 = validateParameter(valid_569140, JString, required = true,
                                 default = nil)
  if valid_569140 != nil:
    section.add "resourceGroupName", valid_569140
  var valid_569141 = path.getOrDefault("name")
  valid_569141 = validateParameter(valid_569141, JString, required = true,
                                 default = nil)
  if valid_569141 != nil:
    section.add "name", valid_569141
  var valid_569142 = path.getOrDefault("subscriptionId")
  valid_569142 = validateParameter(valid_569142, JString, required = true,
                                 default = nil)
  if valid_569142 != nil:
    section.add "subscriptionId", valid_569142
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569143 = query.getOrDefault("api-version")
  valid_569143 = validateParameter(valid_569143, JString, required = true,
                                 default = nil)
  if valid_569143 != nil:
    section.add "api-version", valid_569143
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569144: Call_WebAppsListRelayServiceConnections_569137;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_569144.validator(path, query, header, formData, body)
  let scheme = call_569144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569144.url(scheme.get, call_569144.host, call_569144.base,
                         call_569144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569144, url, valid)

proc call*(call_569145: Call_WebAppsListRelayServiceConnections_569137;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListRelayServiceConnections
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569146 = newJObject()
  var query_569147 = newJObject()
  add(path_569146, "resourceGroupName", newJString(resourceGroupName))
  add(query_569147, "api-version", newJString(apiVersion))
  add(path_569146, "name", newJString(name))
  add(path_569146, "subscriptionId", newJString(subscriptionId))
  result = call_569145.call(path_569146, query_569147, nil, nil, nil)

var webAppsListRelayServiceConnections* = Call_WebAppsListRelayServiceConnections_569137(
    name: "webAppsListRelayServiceConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnections_569138, base: "",
    url: url_WebAppsListRelayServiceConnections_569139, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnection_569160 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateRelayServiceConnection_569162(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnection_569161(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569163 = path.getOrDefault("resourceGroupName")
  valid_569163 = validateParameter(valid_569163, JString, required = true,
                                 default = nil)
  if valid_569163 != nil:
    section.add "resourceGroupName", valid_569163
  var valid_569164 = path.getOrDefault("name")
  valid_569164 = validateParameter(valid_569164, JString, required = true,
                                 default = nil)
  if valid_569164 != nil:
    section.add "name", valid_569164
  var valid_569165 = path.getOrDefault("subscriptionId")
  valid_569165 = validateParameter(valid_569165, JString, required = true,
                                 default = nil)
  if valid_569165 != nil:
    section.add "subscriptionId", valid_569165
  var valid_569166 = path.getOrDefault("entityName")
  valid_569166 = validateParameter(valid_569166, JString, required = true,
                                 default = nil)
  if valid_569166 != nil:
    section.add "entityName", valid_569166
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569167 = query.getOrDefault("api-version")
  valid_569167 = validateParameter(valid_569167, JString, required = true,
                                 default = nil)
  if valid_569167 != nil:
    section.add "api-version", valid_569167
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569169: Call_WebAppsCreateOrUpdateRelayServiceConnection_569160;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_569169.validator(path, query, header, formData, body)
  let scheme = call_569169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569169.url(scheme.get, call_569169.host, call_569169.base,
                         call_569169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569169, url, valid)

proc call*(call_569170: Call_WebAppsCreateOrUpdateRelayServiceConnection_569160;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_569171 = newJObject()
  var query_569172 = newJObject()
  var body_569173 = newJObject()
  add(path_569171, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_569173 = connectionEnvelope
  add(path_569171, "name", newJString(name))
  add(query_569172, "api-version", newJString(apiVersion))
  add(path_569171, "subscriptionId", newJString(subscriptionId))
  add(path_569171, "entityName", newJString(entityName))
  result = call_569170.call(path_569171, query_569172, nil, nil, body_569173)

var webAppsCreateOrUpdateRelayServiceConnection* = Call_WebAppsCreateOrUpdateRelayServiceConnection_569160(
    name: "webAppsCreateOrUpdateRelayServiceConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnection_569161,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnection_569162,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnection_569148 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetRelayServiceConnection_569150(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnection_569149(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569151 = path.getOrDefault("resourceGroupName")
  valid_569151 = validateParameter(valid_569151, JString, required = true,
                                 default = nil)
  if valid_569151 != nil:
    section.add "resourceGroupName", valid_569151
  var valid_569152 = path.getOrDefault("name")
  valid_569152 = validateParameter(valid_569152, JString, required = true,
                                 default = nil)
  if valid_569152 != nil:
    section.add "name", valid_569152
  var valid_569153 = path.getOrDefault("subscriptionId")
  valid_569153 = validateParameter(valid_569153, JString, required = true,
                                 default = nil)
  if valid_569153 != nil:
    section.add "subscriptionId", valid_569153
  var valid_569154 = path.getOrDefault("entityName")
  valid_569154 = validateParameter(valid_569154, JString, required = true,
                                 default = nil)
  if valid_569154 != nil:
    section.add "entityName", valid_569154
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569155 = query.getOrDefault("api-version")
  valid_569155 = validateParameter(valid_569155, JString, required = true,
                                 default = nil)
  if valid_569155 != nil:
    section.add "api-version", valid_569155
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569156: Call_WebAppsGetRelayServiceConnection_569148;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_569156.validator(path, query, header, formData, body)
  let scheme = call_569156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569156.url(scheme.get, call_569156.host, call_569156.base,
                         call_569156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569156, url, valid)

proc call*(call_569157: Call_WebAppsGetRelayServiceConnection_569148;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnection
  ## Gets a hybrid connection configuration by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_569158 = newJObject()
  var query_569159 = newJObject()
  add(path_569158, "resourceGroupName", newJString(resourceGroupName))
  add(query_569159, "api-version", newJString(apiVersion))
  add(path_569158, "name", newJString(name))
  add(path_569158, "subscriptionId", newJString(subscriptionId))
  add(path_569158, "entityName", newJString(entityName))
  result = call_569157.call(path_569158, query_569159, nil, nil, nil)

var webAppsGetRelayServiceConnection* = Call_WebAppsGetRelayServiceConnection_569148(
    name: "webAppsGetRelayServiceConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnection_569149, base: "",
    url: url_WebAppsGetRelayServiceConnection_569150, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnection_569186 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateRelayServiceConnection_569188(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnection_569187(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569189 = path.getOrDefault("resourceGroupName")
  valid_569189 = validateParameter(valid_569189, JString, required = true,
                                 default = nil)
  if valid_569189 != nil:
    section.add "resourceGroupName", valid_569189
  var valid_569190 = path.getOrDefault("name")
  valid_569190 = validateParameter(valid_569190, JString, required = true,
                                 default = nil)
  if valid_569190 != nil:
    section.add "name", valid_569190
  var valid_569191 = path.getOrDefault("subscriptionId")
  valid_569191 = validateParameter(valid_569191, JString, required = true,
                                 default = nil)
  if valid_569191 != nil:
    section.add "subscriptionId", valid_569191
  var valid_569192 = path.getOrDefault("entityName")
  valid_569192 = validateParameter(valid_569192, JString, required = true,
                                 default = nil)
  if valid_569192 != nil:
    section.add "entityName", valid_569192
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569193 = query.getOrDefault("api-version")
  valid_569193 = validateParameter(valid_569193, JString, required = true,
                                 default = nil)
  if valid_569193 != nil:
    section.add "api-version", valid_569193
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569195: Call_WebAppsUpdateRelayServiceConnection_569186;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_569195.validator(path, query, header, formData, body)
  let scheme = call_569195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569195.url(scheme.get, call_569195.host, call_569195.base,
                         call_569195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569195, url, valid)

proc call*(call_569196: Call_WebAppsUpdateRelayServiceConnection_569186;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnection
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_569197 = newJObject()
  var query_569198 = newJObject()
  var body_569199 = newJObject()
  add(path_569197, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_569199 = connectionEnvelope
  add(path_569197, "name", newJString(name))
  add(query_569198, "api-version", newJString(apiVersion))
  add(path_569197, "subscriptionId", newJString(subscriptionId))
  add(path_569197, "entityName", newJString(entityName))
  result = call_569196.call(path_569197, query_569198, nil, nil, body_569199)

var webAppsUpdateRelayServiceConnection* = Call_WebAppsUpdateRelayServiceConnection_569186(
    name: "webAppsUpdateRelayServiceConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnection_569187, base: "",
    url: url_WebAppsUpdateRelayServiceConnection_569188, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnection_569174 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteRelayServiceConnection_569176(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnection_569175(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569177 = path.getOrDefault("resourceGroupName")
  valid_569177 = validateParameter(valid_569177, JString, required = true,
                                 default = nil)
  if valid_569177 != nil:
    section.add "resourceGroupName", valid_569177
  var valid_569178 = path.getOrDefault("name")
  valid_569178 = validateParameter(valid_569178, JString, required = true,
                                 default = nil)
  if valid_569178 != nil:
    section.add "name", valid_569178
  var valid_569179 = path.getOrDefault("subscriptionId")
  valid_569179 = validateParameter(valid_569179, JString, required = true,
                                 default = nil)
  if valid_569179 != nil:
    section.add "subscriptionId", valid_569179
  var valid_569180 = path.getOrDefault("entityName")
  valid_569180 = validateParameter(valid_569180, JString, required = true,
                                 default = nil)
  if valid_569180 != nil:
    section.add "entityName", valid_569180
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569181 = query.getOrDefault("api-version")
  valid_569181 = validateParameter(valid_569181, JString, required = true,
                                 default = nil)
  if valid_569181 != nil:
    section.add "api-version", valid_569181
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569182: Call_WebAppsDeleteRelayServiceConnection_569174;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_569182.validator(path, query, header, formData, body)
  let scheme = call_569182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569182.url(scheme.get, call_569182.host, call_569182.base,
                         call_569182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569182, url, valid)

proc call*(call_569183: Call_WebAppsDeleteRelayServiceConnection_569174;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnection
  ## Deletes a relay service connection by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_569184 = newJObject()
  var query_569185 = newJObject()
  add(path_569184, "resourceGroupName", newJString(resourceGroupName))
  add(query_569185, "api-version", newJString(apiVersion))
  add(path_569184, "name", newJString(name))
  add(path_569184, "subscriptionId", newJString(subscriptionId))
  add(path_569184, "entityName", newJString(entityName))
  result = call_569183.call(path_569184, query_569185, nil, nil, nil)

var webAppsDeleteRelayServiceConnection* = Call_WebAppsDeleteRelayServiceConnection_569174(
    name: "webAppsDeleteRelayServiceConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnection_569175, base: "",
    url: url_WebAppsDeleteRelayServiceConnection_569176, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiers_569200 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceIdentifiers_569202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiers_569201(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569203 = path.getOrDefault("resourceGroupName")
  valid_569203 = validateParameter(valid_569203, JString, required = true,
                                 default = nil)
  if valid_569203 != nil:
    section.add "resourceGroupName", valid_569203
  var valid_569204 = path.getOrDefault("name")
  valid_569204 = validateParameter(valid_569204, JString, required = true,
                                 default = nil)
  if valid_569204 != nil:
    section.add "name", valid_569204
  var valid_569205 = path.getOrDefault("subscriptionId")
  valid_569205 = validateParameter(valid_569205, JString, required = true,
                                 default = nil)
  if valid_569205 != nil:
    section.add "subscriptionId", valid_569205
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569206 = query.getOrDefault("api-version")
  valid_569206 = validateParameter(valid_569206, JString, required = true,
                                 default = nil)
  if valid_569206 != nil:
    section.add "api-version", valid_569206
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569207: Call_WebAppsListInstanceIdentifiers_569200; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_569207.validator(path, query, header, formData, body)
  let scheme = call_569207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569207.url(scheme.get, call_569207.host, call_569207.base,
                         call_569207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569207, url, valid)

proc call*(call_569208: Call_WebAppsListInstanceIdentifiers_569200;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceIdentifiers
  ## Gets all scale-out instances of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569209 = newJObject()
  var query_569210 = newJObject()
  add(path_569209, "resourceGroupName", newJString(resourceGroupName))
  add(query_569210, "api-version", newJString(apiVersion))
  add(path_569209, "name", newJString(name))
  add(path_569209, "subscriptionId", newJString(subscriptionId))
  result = call_569208.call(path_569209, query_569210, nil, nil, nil)

var webAppsListInstanceIdentifiers* = Call_WebAppsListInstanceIdentifiers_569200(
    name: "webAppsListInstanceIdentifiers", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
    validator: validate_WebAppsListInstanceIdentifiers_569201, base: "",
    url: url_WebAppsListInstanceIdentifiers_569202, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperation_569223 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateInstanceMSDeployOperation_569225(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperation_569224(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569226 = path.getOrDefault("resourceGroupName")
  valid_569226 = validateParameter(valid_569226, JString, required = true,
                                 default = nil)
  if valid_569226 != nil:
    section.add "resourceGroupName", valid_569226
  var valid_569227 = path.getOrDefault("name")
  valid_569227 = validateParameter(valid_569227, JString, required = true,
                                 default = nil)
  if valid_569227 != nil:
    section.add "name", valid_569227
  var valid_569228 = path.getOrDefault("subscriptionId")
  valid_569228 = validateParameter(valid_569228, JString, required = true,
                                 default = nil)
  if valid_569228 != nil:
    section.add "subscriptionId", valid_569228
  var valid_569229 = path.getOrDefault("instanceId")
  valid_569229 = validateParameter(valid_569229, JString, required = true,
                                 default = nil)
  if valid_569229 != nil:
    section.add "instanceId", valid_569229
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569230 = query.getOrDefault("api-version")
  valid_569230 = validateParameter(valid_569230, JString, required = true,
                                 default = nil)
  if valid_569230 != nil:
    section.add "api-version", valid_569230
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569232: Call_WebAppsCreateInstanceMSDeployOperation_569223;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_569232.validator(path, query, header, formData, body)
  let scheme = call_569232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569232.url(scheme.get, call_569232.host, call_569232.base,
                         call_569232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569232, url, valid)

proc call*(call_569233: Call_WebAppsCreateInstanceMSDeployOperation_569223;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateInstanceMSDeployOperation
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_569234 = newJObject()
  var query_569235 = newJObject()
  var body_569236 = newJObject()
  add(path_569234, "resourceGroupName", newJString(resourceGroupName))
  add(query_569235, "api-version", newJString(apiVersion))
  add(path_569234, "name", newJString(name))
  add(path_569234, "subscriptionId", newJString(subscriptionId))
  add(path_569234, "instanceId", newJString(instanceId))
  if MSDeploy != nil:
    body_569236 = MSDeploy
  result = call_569233.call(path_569234, query_569235, nil, nil, body_569236)

var webAppsCreateInstanceMSDeployOperation* = Call_WebAppsCreateInstanceMSDeployOperation_569223(
    name: "webAppsCreateInstanceMSDeployOperation", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperation_569224, base: "",
    url: url_WebAppsCreateInstanceMSDeployOperation_569225,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatus_569211 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceMsDeployStatus_569213(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatus_569212(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569214 = path.getOrDefault("resourceGroupName")
  valid_569214 = validateParameter(valid_569214, JString, required = true,
                                 default = nil)
  if valid_569214 != nil:
    section.add "resourceGroupName", valid_569214
  var valid_569215 = path.getOrDefault("name")
  valid_569215 = validateParameter(valid_569215, JString, required = true,
                                 default = nil)
  if valid_569215 != nil:
    section.add "name", valid_569215
  var valid_569216 = path.getOrDefault("subscriptionId")
  valid_569216 = validateParameter(valid_569216, JString, required = true,
                                 default = nil)
  if valid_569216 != nil:
    section.add "subscriptionId", valid_569216
  var valid_569217 = path.getOrDefault("instanceId")
  valid_569217 = validateParameter(valid_569217, JString, required = true,
                                 default = nil)
  if valid_569217 != nil:
    section.add "instanceId", valid_569217
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569218 = query.getOrDefault("api-version")
  valid_569218 = validateParameter(valid_569218, JString, required = true,
                                 default = nil)
  if valid_569218 != nil:
    section.add "api-version", valid_569218
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569219: Call_WebAppsGetInstanceMsDeployStatus_569211;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_569219.validator(path, query, header, formData, body)
  let scheme = call_569219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569219.url(scheme.get, call_569219.host, call_569219.base,
                         call_569219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569219, url, valid)

proc call*(call_569220: Call_WebAppsGetInstanceMsDeployStatus_569211;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatus
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_569221 = newJObject()
  var query_569222 = newJObject()
  add(path_569221, "resourceGroupName", newJString(resourceGroupName))
  add(query_569222, "api-version", newJString(apiVersion))
  add(path_569221, "name", newJString(name))
  add(path_569221, "subscriptionId", newJString(subscriptionId))
  add(path_569221, "instanceId", newJString(instanceId))
  result = call_569220.call(path_569221, query_569222, nil, nil, nil)

var webAppsGetInstanceMsDeployStatus* = Call_WebAppsGetInstanceMsDeployStatus_569211(
    name: "webAppsGetInstanceMsDeployStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatus_569212, base: "",
    url: url_WebAppsGetInstanceMsDeployStatus_569213, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLog_569237 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceMSDeployLog_569239(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLog_569238(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569240 = path.getOrDefault("resourceGroupName")
  valid_569240 = validateParameter(valid_569240, JString, required = true,
                                 default = nil)
  if valid_569240 != nil:
    section.add "resourceGroupName", valid_569240
  var valid_569241 = path.getOrDefault("name")
  valid_569241 = validateParameter(valid_569241, JString, required = true,
                                 default = nil)
  if valid_569241 != nil:
    section.add "name", valid_569241
  var valid_569242 = path.getOrDefault("subscriptionId")
  valid_569242 = validateParameter(valid_569242, JString, required = true,
                                 default = nil)
  if valid_569242 != nil:
    section.add "subscriptionId", valid_569242
  var valid_569243 = path.getOrDefault("instanceId")
  valid_569243 = validateParameter(valid_569243, JString, required = true,
                                 default = nil)
  if valid_569243 != nil:
    section.add "instanceId", valid_569243
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569244 = query.getOrDefault("api-version")
  valid_569244 = validateParameter(valid_569244, JString, required = true,
                                 default = nil)
  if valid_569244 != nil:
    section.add "api-version", valid_569244
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569245: Call_WebAppsGetInstanceMSDeployLog_569237; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_569245.validator(path, query, header, formData, body)
  let scheme = call_569245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569245.url(scheme.get, call_569245.host, call_569245.base,
                         call_569245.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569245, url, valid)

proc call*(call_569246: Call_WebAppsGetInstanceMSDeployLog_569237;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLog
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_569247 = newJObject()
  var query_569248 = newJObject()
  add(path_569247, "resourceGroupName", newJString(resourceGroupName))
  add(query_569248, "api-version", newJString(apiVersion))
  add(path_569247, "name", newJString(name))
  add(path_569247, "subscriptionId", newJString(subscriptionId))
  add(path_569247, "instanceId", newJString(instanceId))
  result = call_569246.call(path_569247, query_569248, nil, nil, nil)

var webAppsGetInstanceMSDeployLog* = Call_WebAppsGetInstanceMSDeployLog_569237(
    name: "webAppsGetInstanceMSDeployLog", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLog_569238, base: "",
    url: url_WebAppsGetInstanceMSDeployLog_569239, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcesses_569249 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcesses_569251(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcesses_569250(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569252 = path.getOrDefault("resourceGroupName")
  valid_569252 = validateParameter(valid_569252, JString, required = true,
                                 default = nil)
  if valid_569252 != nil:
    section.add "resourceGroupName", valid_569252
  var valid_569253 = path.getOrDefault("name")
  valid_569253 = validateParameter(valid_569253, JString, required = true,
                                 default = nil)
  if valid_569253 != nil:
    section.add "name", valid_569253
  var valid_569254 = path.getOrDefault("subscriptionId")
  valid_569254 = validateParameter(valid_569254, JString, required = true,
                                 default = nil)
  if valid_569254 != nil:
    section.add "subscriptionId", valid_569254
  var valid_569255 = path.getOrDefault("instanceId")
  valid_569255 = validateParameter(valid_569255, JString, required = true,
                                 default = nil)
  if valid_569255 != nil:
    section.add "instanceId", valid_569255
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569256 = query.getOrDefault("api-version")
  valid_569256 = validateParameter(valid_569256, JString, required = true,
                                 default = nil)
  if valid_569256 != nil:
    section.add "api-version", valid_569256
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569257: Call_WebAppsListInstanceProcesses_569249; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569257.validator(path, query, header, formData, body)
  let scheme = call_569257.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569257.url(scheme.get, call_569257.host, call_569257.base,
                         call_569257.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569257, url, valid)

proc call*(call_569258: Call_WebAppsListInstanceProcesses_569249;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569259 = newJObject()
  var query_569260 = newJObject()
  add(path_569259, "resourceGroupName", newJString(resourceGroupName))
  add(query_569260, "api-version", newJString(apiVersion))
  add(path_569259, "name", newJString(name))
  add(path_569259, "subscriptionId", newJString(subscriptionId))
  add(path_569259, "instanceId", newJString(instanceId))
  result = call_569258.call(path_569259, query_569260, nil, nil, nil)

var webAppsListInstanceProcesses* = Call_WebAppsListInstanceProcesses_569249(
    name: "webAppsListInstanceProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcesses_569250, base: "",
    url: url_WebAppsListInstanceProcesses_569251, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcess_569261 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcess_569263(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcess_569262(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569264 = path.getOrDefault("resourceGroupName")
  valid_569264 = validateParameter(valid_569264, JString, required = true,
                                 default = nil)
  if valid_569264 != nil:
    section.add "resourceGroupName", valid_569264
  var valid_569265 = path.getOrDefault("name")
  valid_569265 = validateParameter(valid_569265, JString, required = true,
                                 default = nil)
  if valid_569265 != nil:
    section.add "name", valid_569265
  var valid_569266 = path.getOrDefault("processId")
  valid_569266 = validateParameter(valid_569266, JString, required = true,
                                 default = nil)
  if valid_569266 != nil:
    section.add "processId", valid_569266
  var valid_569267 = path.getOrDefault("subscriptionId")
  valid_569267 = validateParameter(valid_569267, JString, required = true,
                                 default = nil)
  if valid_569267 != nil:
    section.add "subscriptionId", valid_569267
  var valid_569268 = path.getOrDefault("instanceId")
  valid_569268 = validateParameter(valid_569268, JString, required = true,
                                 default = nil)
  if valid_569268 != nil:
    section.add "instanceId", valid_569268
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569269 = query.getOrDefault("api-version")
  valid_569269 = validateParameter(valid_569269, JString, required = true,
                                 default = nil)
  if valid_569269 != nil:
    section.add "api-version", valid_569269
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569270: Call_WebAppsGetInstanceProcess_569261; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569270.validator(path, query, header, formData, body)
  let scheme = call_569270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569270.url(scheme.get, call_569270.host, call_569270.base,
                         call_569270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569270, url, valid)

proc call*(call_569271: Call_WebAppsGetInstanceProcess_569261;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569272 = newJObject()
  var query_569273 = newJObject()
  add(path_569272, "resourceGroupName", newJString(resourceGroupName))
  add(query_569273, "api-version", newJString(apiVersion))
  add(path_569272, "name", newJString(name))
  add(path_569272, "processId", newJString(processId))
  add(path_569272, "subscriptionId", newJString(subscriptionId))
  add(path_569272, "instanceId", newJString(instanceId))
  result = call_569271.call(path_569272, query_569273, nil, nil, nil)

var webAppsGetInstanceProcess* = Call_WebAppsGetInstanceProcess_569261(
    name: "webAppsGetInstanceProcess", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcess_569262, base: "",
    url: url_WebAppsGetInstanceProcess_569263, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcess_569274 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteInstanceProcess_569276(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcess_569275(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569277 = path.getOrDefault("resourceGroupName")
  valid_569277 = validateParameter(valid_569277, JString, required = true,
                                 default = nil)
  if valid_569277 != nil:
    section.add "resourceGroupName", valid_569277
  var valid_569278 = path.getOrDefault("name")
  valid_569278 = validateParameter(valid_569278, JString, required = true,
                                 default = nil)
  if valid_569278 != nil:
    section.add "name", valid_569278
  var valid_569279 = path.getOrDefault("processId")
  valid_569279 = validateParameter(valid_569279, JString, required = true,
                                 default = nil)
  if valid_569279 != nil:
    section.add "processId", valid_569279
  var valid_569280 = path.getOrDefault("subscriptionId")
  valid_569280 = validateParameter(valid_569280, JString, required = true,
                                 default = nil)
  if valid_569280 != nil:
    section.add "subscriptionId", valid_569280
  var valid_569281 = path.getOrDefault("instanceId")
  valid_569281 = validateParameter(valid_569281, JString, required = true,
                                 default = nil)
  if valid_569281 != nil:
    section.add "instanceId", valid_569281
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569282 = query.getOrDefault("api-version")
  valid_569282 = validateParameter(valid_569282, JString, required = true,
                                 default = nil)
  if valid_569282 != nil:
    section.add "api-version", valid_569282
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569283: Call_WebAppsDeleteInstanceProcess_569274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_569283.validator(path, query, header, formData, body)
  let scheme = call_569283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569283.url(scheme.get, call_569283.host, call_569283.base,
                         call_569283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569283, url, valid)

proc call*(call_569284: Call_WebAppsDeleteInstanceProcess_569274;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569285 = newJObject()
  var query_569286 = newJObject()
  add(path_569285, "resourceGroupName", newJString(resourceGroupName))
  add(query_569286, "api-version", newJString(apiVersion))
  add(path_569285, "name", newJString(name))
  add(path_569285, "processId", newJString(processId))
  add(path_569285, "subscriptionId", newJString(subscriptionId))
  add(path_569285, "instanceId", newJString(instanceId))
  result = call_569284.call(path_569285, query_569286, nil, nil, nil)

var webAppsDeleteInstanceProcess* = Call_WebAppsDeleteInstanceProcess_569274(
    name: "webAppsDeleteInstanceProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcess_569275, base: "",
    url: url_WebAppsDeleteInstanceProcess_569276, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDump_569287 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessDump_569289(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDump_569288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569290 = path.getOrDefault("resourceGroupName")
  valid_569290 = validateParameter(valid_569290, JString, required = true,
                                 default = nil)
  if valid_569290 != nil:
    section.add "resourceGroupName", valid_569290
  var valid_569291 = path.getOrDefault("name")
  valid_569291 = validateParameter(valid_569291, JString, required = true,
                                 default = nil)
  if valid_569291 != nil:
    section.add "name", valid_569291
  var valid_569292 = path.getOrDefault("processId")
  valid_569292 = validateParameter(valid_569292, JString, required = true,
                                 default = nil)
  if valid_569292 != nil:
    section.add "processId", valid_569292
  var valid_569293 = path.getOrDefault("subscriptionId")
  valid_569293 = validateParameter(valid_569293, JString, required = true,
                                 default = nil)
  if valid_569293 != nil:
    section.add "subscriptionId", valid_569293
  var valid_569294 = path.getOrDefault("instanceId")
  valid_569294 = validateParameter(valid_569294, JString, required = true,
                                 default = nil)
  if valid_569294 != nil:
    section.add "instanceId", valid_569294
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569295 = query.getOrDefault("api-version")
  valid_569295 = validateParameter(valid_569295, JString, required = true,
                                 default = nil)
  if valid_569295 != nil:
    section.add "api-version", valid_569295
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569296: Call_WebAppsGetInstanceProcessDump_569287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569296.validator(path, query, header, formData, body)
  let scheme = call_569296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569296.url(scheme.get, call_569296.host, call_569296.base,
                         call_569296.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569296, url, valid)

proc call*(call_569297: Call_WebAppsGetInstanceProcessDump_569287;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569298 = newJObject()
  var query_569299 = newJObject()
  add(path_569298, "resourceGroupName", newJString(resourceGroupName))
  add(query_569299, "api-version", newJString(apiVersion))
  add(path_569298, "name", newJString(name))
  add(path_569298, "processId", newJString(processId))
  add(path_569298, "subscriptionId", newJString(subscriptionId))
  add(path_569298, "instanceId", newJString(instanceId))
  result = call_569297.call(path_569298, query_569299, nil, nil, nil)

var webAppsGetInstanceProcessDump* = Call_WebAppsGetInstanceProcessDump_569287(
    name: "webAppsGetInstanceProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDump_569288, base: "",
    url: url_WebAppsGetInstanceProcessDump_569289, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModules_569300 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcessModules_569302(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModules_569301(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569303 = path.getOrDefault("resourceGroupName")
  valid_569303 = validateParameter(valid_569303, JString, required = true,
                                 default = nil)
  if valid_569303 != nil:
    section.add "resourceGroupName", valid_569303
  var valid_569304 = path.getOrDefault("name")
  valid_569304 = validateParameter(valid_569304, JString, required = true,
                                 default = nil)
  if valid_569304 != nil:
    section.add "name", valid_569304
  var valid_569305 = path.getOrDefault("processId")
  valid_569305 = validateParameter(valid_569305, JString, required = true,
                                 default = nil)
  if valid_569305 != nil:
    section.add "processId", valid_569305
  var valid_569306 = path.getOrDefault("subscriptionId")
  valid_569306 = validateParameter(valid_569306, JString, required = true,
                                 default = nil)
  if valid_569306 != nil:
    section.add "subscriptionId", valid_569306
  var valid_569307 = path.getOrDefault("instanceId")
  valid_569307 = validateParameter(valid_569307, JString, required = true,
                                 default = nil)
  if valid_569307 != nil:
    section.add "instanceId", valid_569307
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569308 = query.getOrDefault("api-version")
  valid_569308 = validateParameter(valid_569308, JString, required = true,
                                 default = nil)
  if valid_569308 != nil:
    section.add "api-version", valid_569308
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569309: Call_WebAppsListInstanceProcessModules_569300;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569309.validator(path, query, header, formData, body)
  let scheme = call_569309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569309.url(scheme.get, call_569309.host, call_569309.base,
                         call_569309.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569309, url, valid)

proc call*(call_569310: Call_WebAppsListInstanceProcessModules_569300;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569311 = newJObject()
  var query_569312 = newJObject()
  add(path_569311, "resourceGroupName", newJString(resourceGroupName))
  add(query_569312, "api-version", newJString(apiVersion))
  add(path_569311, "name", newJString(name))
  add(path_569311, "processId", newJString(processId))
  add(path_569311, "subscriptionId", newJString(subscriptionId))
  add(path_569311, "instanceId", newJString(instanceId))
  result = call_569310.call(path_569311, query_569312, nil, nil, nil)

var webAppsListInstanceProcessModules* = Call_WebAppsListInstanceProcessModules_569300(
    name: "webAppsListInstanceProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModules_569301, base: "",
    url: url_WebAppsListInstanceProcessModules_569302, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModule_569313 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessModule_569315(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModule_569314(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569316 = path.getOrDefault("resourceGroupName")
  valid_569316 = validateParameter(valid_569316, JString, required = true,
                                 default = nil)
  if valid_569316 != nil:
    section.add "resourceGroupName", valid_569316
  var valid_569317 = path.getOrDefault("name")
  valid_569317 = validateParameter(valid_569317, JString, required = true,
                                 default = nil)
  if valid_569317 != nil:
    section.add "name", valid_569317
  var valid_569318 = path.getOrDefault("processId")
  valid_569318 = validateParameter(valid_569318, JString, required = true,
                                 default = nil)
  if valid_569318 != nil:
    section.add "processId", valid_569318
  var valid_569319 = path.getOrDefault("subscriptionId")
  valid_569319 = validateParameter(valid_569319, JString, required = true,
                                 default = nil)
  if valid_569319 != nil:
    section.add "subscriptionId", valid_569319
  var valid_569320 = path.getOrDefault("baseAddress")
  valid_569320 = validateParameter(valid_569320, JString, required = true,
                                 default = nil)
  if valid_569320 != nil:
    section.add "baseAddress", valid_569320
  var valid_569321 = path.getOrDefault("instanceId")
  valid_569321 = validateParameter(valid_569321, JString, required = true,
                                 default = nil)
  if valid_569321 != nil:
    section.add "instanceId", valid_569321
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569322 = query.getOrDefault("api-version")
  valid_569322 = validateParameter(valid_569322, JString, required = true,
                                 default = nil)
  if valid_569322 != nil:
    section.add "api-version", valid_569322
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569323: Call_WebAppsGetInstanceProcessModule_569313;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569323.validator(path, query, header, formData, body)
  let scheme = call_569323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569323.url(scheme.get, call_569323.host, call_569323.base,
                         call_569323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569323, url, valid)

proc call*(call_569324: Call_WebAppsGetInstanceProcessModule_569313;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; baseAddress: string;
          instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569325 = newJObject()
  var query_569326 = newJObject()
  add(path_569325, "resourceGroupName", newJString(resourceGroupName))
  add(query_569326, "api-version", newJString(apiVersion))
  add(path_569325, "name", newJString(name))
  add(path_569325, "processId", newJString(processId))
  add(path_569325, "subscriptionId", newJString(subscriptionId))
  add(path_569325, "baseAddress", newJString(baseAddress))
  add(path_569325, "instanceId", newJString(instanceId))
  result = call_569324.call(path_569325, query_569326, nil, nil, nil)

var webAppsGetInstanceProcessModule* = Call_WebAppsGetInstanceProcessModule_569313(
    name: "webAppsGetInstanceProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModule_569314, base: "",
    url: url_WebAppsGetInstanceProcessModule_569315, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreads_569327 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcessThreads_569329(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreads_569328(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569330 = path.getOrDefault("resourceGroupName")
  valid_569330 = validateParameter(valid_569330, JString, required = true,
                                 default = nil)
  if valid_569330 != nil:
    section.add "resourceGroupName", valid_569330
  var valid_569331 = path.getOrDefault("name")
  valid_569331 = validateParameter(valid_569331, JString, required = true,
                                 default = nil)
  if valid_569331 != nil:
    section.add "name", valid_569331
  var valid_569332 = path.getOrDefault("processId")
  valid_569332 = validateParameter(valid_569332, JString, required = true,
                                 default = nil)
  if valid_569332 != nil:
    section.add "processId", valid_569332
  var valid_569333 = path.getOrDefault("subscriptionId")
  valid_569333 = validateParameter(valid_569333, JString, required = true,
                                 default = nil)
  if valid_569333 != nil:
    section.add "subscriptionId", valid_569333
  var valid_569334 = path.getOrDefault("instanceId")
  valid_569334 = validateParameter(valid_569334, JString, required = true,
                                 default = nil)
  if valid_569334 != nil:
    section.add "instanceId", valid_569334
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569335 = query.getOrDefault("api-version")
  valid_569335 = validateParameter(valid_569335, JString, required = true,
                                 default = nil)
  if valid_569335 != nil:
    section.add "api-version", valid_569335
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569336: Call_WebAppsListInstanceProcessThreads_569327;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569336.validator(path, query, header, formData, body)
  let scheme = call_569336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569336.url(scheme.get, call_569336.host, call_569336.base,
                         call_569336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569336, url, valid)

proc call*(call_569337: Call_WebAppsListInstanceProcessThreads_569327;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_569338 = newJObject()
  var query_569339 = newJObject()
  add(path_569338, "resourceGroupName", newJString(resourceGroupName))
  add(query_569339, "api-version", newJString(apiVersion))
  add(path_569338, "name", newJString(name))
  add(path_569338, "processId", newJString(processId))
  add(path_569338, "subscriptionId", newJString(subscriptionId))
  add(path_569338, "instanceId", newJString(instanceId))
  result = call_569337.call(path_569338, query_569339, nil, nil, nil)

var webAppsListInstanceProcessThreads* = Call_WebAppsListInstanceProcessThreads_569327(
    name: "webAppsListInstanceProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreads_569328, base: "",
    url: url_WebAppsListInstanceProcessThreads_569329, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThread_569340 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessThread_569342(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThread_569341(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569343 = path.getOrDefault("resourceGroupName")
  valid_569343 = validateParameter(valid_569343, JString, required = true,
                                 default = nil)
  if valid_569343 != nil:
    section.add "resourceGroupName", valid_569343
  var valid_569344 = path.getOrDefault("name")
  valid_569344 = validateParameter(valid_569344, JString, required = true,
                                 default = nil)
  if valid_569344 != nil:
    section.add "name", valid_569344
  var valid_569345 = path.getOrDefault("processId")
  valid_569345 = validateParameter(valid_569345, JString, required = true,
                                 default = nil)
  if valid_569345 != nil:
    section.add "processId", valid_569345
  var valid_569346 = path.getOrDefault("subscriptionId")
  valid_569346 = validateParameter(valid_569346, JString, required = true,
                                 default = nil)
  if valid_569346 != nil:
    section.add "subscriptionId", valid_569346
  var valid_569347 = path.getOrDefault("instanceId")
  valid_569347 = validateParameter(valid_569347, JString, required = true,
                                 default = nil)
  if valid_569347 != nil:
    section.add "instanceId", valid_569347
  var valid_569348 = path.getOrDefault("threadId")
  valid_569348 = validateParameter(valid_569348, JString, required = true,
                                 default = nil)
  if valid_569348 != nil:
    section.add "threadId", valid_569348
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569349 = query.getOrDefault("api-version")
  valid_569349 = validateParameter(valid_569349, JString, required = true,
                                 default = nil)
  if valid_569349 != nil:
    section.add "api-version", valid_569349
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569350: Call_WebAppsGetInstanceProcessThread_569340;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_569350.validator(path, query, header, formData, body)
  let scheme = call_569350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569350.url(scheme.get, call_569350.host, call_569350.base,
                         call_569350.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569350, url, valid)

proc call*(call_569351: Call_WebAppsGetInstanceProcessThread_569340;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; instanceId: string;
          threadId: string): Recallable =
  ## webAppsGetInstanceProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: string (required)
  ##           : TID.
  var path_569352 = newJObject()
  var query_569353 = newJObject()
  add(path_569352, "resourceGroupName", newJString(resourceGroupName))
  add(query_569353, "api-version", newJString(apiVersion))
  add(path_569352, "name", newJString(name))
  add(path_569352, "processId", newJString(processId))
  add(path_569352, "subscriptionId", newJString(subscriptionId))
  add(path_569352, "instanceId", newJString(instanceId))
  add(path_569352, "threadId", newJString(threadId))
  result = call_569351.call(path_569352, query_569353, nil, nil, nil)

var webAppsGetInstanceProcessThread* = Call_WebAppsGetInstanceProcessThread_569340(
    name: "webAppsGetInstanceProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThread_569341, base: "",
    url: url_WebAppsGetInstanceProcessThread_569342, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneable_569354 = ref object of OpenApiRestCall_567666
proc url_WebAppsIsCloneable_569356(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneable_569355(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569357 = path.getOrDefault("resourceGroupName")
  valid_569357 = validateParameter(valid_569357, JString, required = true,
                                 default = nil)
  if valid_569357 != nil:
    section.add "resourceGroupName", valid_569357
  var valid_569358 = path.getOrDefault("name")
  valid_569358 = validateParameter(valid_569358, JString, required = true,
                                 default = nil)
  if valid_569358 != nil:
    section.add "name", valid_569358
  var valid_569359 = path.getOrDefault("subscriptionId")
  valid_569359 = validateParameter(valid_569359, JString, required = true,
                                 default = nil)
  if valid_569359 != nil:
    section.add "subscriptionId", valid_569359
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569360 = query.getOrDefault("api-version")
  valid_569360 = validateParameter(valid_569360, JString, required = true,
                                 default = nil)
  if valid_569360 != nil:
    section.add "api-version", valid_569360
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569361: Call_WebAppsIsCloneable_569354; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_569361.validator(path, query, header, formData, body)
  let scheme = call_569361.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569361.url(scheme.get, call_569361.host, call_569361.base,
                         call_569361.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569361, url, valid)

proc call*(call_569362: Call_WebAppsIsCloneable_569354; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsIsCloneable
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569363 = newJObject()
  var query_569364 = newJObject()
  add(path_569363, "resourceGroupName", newJString(resourceGroupName))
  add(query_569364, "api-version", newJString(apiVersion))
  add(path_569363, "name", newJString(name))
  add(path_569363, "subscriptionId", newJString(subscriptionId))
  result = call_569362.call(path_569363, query_569364, nil, nil, nil)

var webAppsIsCloneable* = Call_WebAppsIsCloneable_569354(
    name: "webAppsIsCloneable", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
    validator: validate_WebAppsIsCloneable_569355, base: "",
    url: url_WebAppsIsCloneable_569356, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggers_569365 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSyncFunctionTriggers_569367(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggers_569366(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569368 = path.getOrDefault("resourceGroupName")
  valid_569368 = validateParameter(valid_569368, JString, required = true,
                                 default = nil)
  if valid_569368 != nil:
    section.add "resourceGroupName", valid_569368
  var valid_569369 = path.getOrDefault("name")
  valid_569369 = validateParameter(valid_569369, JString, required = true,
                                 default = nil)
  if valid_569369 != nil:
    section.add "name", valid_569369
  var valid_569370 = path.getOrDefault("subscriptionId")
  valid_569370 = validateParameter(valid_569370, JString, required = true,
                                 default = nil)
  if valid_569370 != nil:
    section.add "subscriptionId", valid_569370
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569371 = query.getOrDefault("api-version")
  valid_569371 = validateParameter(valid_569371, JString, required = true,
                                 default = nil)
  if valid_569371 != nil:
    section.add "api-version", valid_569371
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569372: Call_WebAppsListSyncFunctionTriggers_569365;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_569372.validator(path, query, header, formData, body)
  let scheme = call_569372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569372.url(scheme.get, call_569372.host, call_569372.base,
                         call_569372.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569372, url, valid)

proc call*(call_569373: Call_WebAppsListSyncFunctionTriggers_569365;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSyncFunctionTriggers
  ## This is to allow calling via powershell and ARM template.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569374 = newJObject()
  var query_569375 = newJObject()
  add(path_569374, "resourceGroupName", newJString(resourceGroupName))
  add(query_569375, "api-version", newJString(apiVersion))
  add(path_569374, "name", newJString(name))
  add(path_569374, "subscriptionId", newJString(subscriptionId))
  result = call_569373.call(path_569374, query_569375, nil, nil, nil)

var webAppsListSyncFunctionTriggers* = Call_WebAppsListSyncFunctionTriggers_569365(
    name: "webAppsListSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggers_569366, base: "",
    url: url_WebAppsListSyncFunctionTriggers_569367, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitions_569376 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetricDefinitions_569378(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitions_569377(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569379 = path.getOrDefault("resourceGroupName")
  valid_569379 = validateParameter(valid_569379, JString, required = true,
                                 default = nil)
  if valid_569379 != nil:
    section.add "resourceGroupName", valid_569379
  var valid_569380 = path.getOrDefault("name")
  valid_569380 = validateParameter(valid_569380, JString, required = true,
                                 default = nil)
  if valid_569380 != nil:
    section.add "name", valid_569380
  var valid_569381 = path.getOrDefault("subscriptionId")
  valid_569381 = validateParameter(valid_569381, JString, required = true,
                                 default = nil)
  if valid_569381 != nil:
    section.add "subscriptionId", valid_569381
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569382 = query.getOrDefault("api-version")
  valid_569382 = validateParameter(valid_569382, JString, required = true,
                                 default = nil)
  if valid_569382 != nil:
    section.add "api-version", valid_569382
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569383: Call_WebAppsListMetricDefinitions_569376; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_569383.validator(path, query, header, formData, body)
  let scheme = call_569383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569383.url(scheme.get, call_569383.host, call_569383.base,
                         call_569383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569383, url, valid)

proc call*(call_569384: Call_WebAppsListMetricDefinitions_569376;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetricDefinitions
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569385 = newJObject()
  var query_569386 = newJObject()
  add(path_569385, "resourceGroupName", newJString(resourceGroupName))
  add(query_569386, "api-version", newJString(apiVersion))
  add(path_569385, "name", newJString(name))
  add(path_569385, "subscriptionId", newJString(subscriptionId))
  result = call_569384.call(path_569385, query_569386, nil, nil, nil)

var webAppsListMetricDefinitions* = Call_WebAppsListMetricDefinitions_569376(
    name: "webAppsListMetricDefinitions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitions_569377, base: "",
    url: url_WebAppsListMetricDefinitions_569378, schemes: {Scheme.Https})
type
  Call_WebAppsListMetrics_569387 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetrics_569389(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetrics_569388(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569391 = path.getOrDefault("resourceGroupName")
  valid_569391 = validateParameter(valid_569391, JString, required = true,
                                 default = nil)
  if valid_569391 != nil:
    section.add "resourceGroupName", valid_569391
  var valid_569392 = path.getOrDefault("name")
  valid_569392 = validateParameter(valid_569392, JString, required = true,
                                 default = nil)
  if valid_569392 != nil:
    section.add "name", valid_569392
  var valid_569393 = path.getOrDefault("subscriptionId")
  valid_569393 = validateParameter(valid_569393, JString, required = true,
                                 default = nil)
  if valid_569393 != nil:
    section.add "subscriptionId", valid_569393
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569394 = query.getOrDefault("api-version")
  valid_569394 = validateParameter(valid_569394, JString, required = true,
                                 default = nil)
  if valid_569394 != nil:
    section.add "api-version", valid_569394
  var valid_569395 = query.getOrDefault("details")
  valid_569395 = validateParameter(valid_569395, JBool, required = false, default = nil)
  if valid_569395 != nil:
    section.add "details", valid_569395
  var valid_569396 = query.getOrDefault("$filter")
  valid_569396 = validateParameter(valid_569396, JString, required = false,
                                 default = nil)
  if valid_569396 != nil:
    section.add "$filter", valid_569396
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569397: Call_WebAppsListMetrics_569387; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_569397.validator(path, query, header, formData, body)
  let scheme = call_569397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569397.url(scheme.get, call_569397.host, call_569397.base,
                         call_569397.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569397, url, valid)

proc call*(call_569398: Call_WebAppsListMetrics_569387; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetrics
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_569399 = newJObject()
  var query_569400 = newJObject()
  add(path_569399, "resourceGroupName", newJString(resourceGroupName))
  add(query_569400, "api-version", newJString(apiVersion))
  add(path_569399, "name", newJString(name))
  add(query_569400, "details", newJBool(details))
  add(path_569399, "subscriptionId", newJString(subscriptionId))
  add(query_569400, "$filter", newJString(Filter))
  result = call_569398.call(path_569399, query_569400, nil, nil, nil)

var webAppsListMetrics* = Call_WebAppsListMetrics_569387(
    name: "webAppsListMetrics", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics",
    validator: validate_WebAppsListMetrics_569388, base: "",
    url: url_WebAppsListMetrics_569389, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateStorage_569401 = ref object of OpenApiRestCall_567666
proc url_WebAppsMigrateStorage_569403(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migrate")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateStorage_569402(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569404 = path.getOrDefault("resourceGroupName")
  valid_569404 = validateParameter(valid_569404, JString, required = true,
                                 default = nil)
  if valid_569404 != nil:
    section.add "resourceGroupName", valid_569404
  var valid_569405 = path.getOrDefault("name")
  valid_569405 = validateParameter(valid_569405, JString, required = true,
                                 default = nil)
  if valid_569405 != nil:
    section.add "name", valid_569405
  var valid_569406 = path.getOrDefault("subscriptionId")
  valid_569406 = validateParameter(valid_569406, JString, required = true,
                                 default = nil)
  if valid_569406 != nil:
    section.add "subscriptionId", valid_569406
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   subscriptionName: JString (required)
  ##                   : Azure subscription.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569407 = query.getOrDefault("api-version")
  valid_569407 = validateParameter(valid_569407, JString, required = true,
                                 default = nil)
  if valid_569407 != nil:
    section.add "api-version", valid_569407
  var valid_569408 = query.getOrDefault("subscriptionName")
  valid_569408 = validateParameter(valid_569408, JString, required = true,
                                 default = nil)
  if valid_569408 != nil:
    section.add "subscriptionName", valid_569408
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569410: Call_WebAppsMigrateStorage_569401; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app.
  ## 
  let valid = call_569410.validator(path, query, header, formData, body)
  let scheme = call_569410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569410.url(scheme.get, call_569410.host, call_569410.base,
                         call_569410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569410, url, valid)

proc call*(call_569411: Call_WebAppsMigrateStorage_569401;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionName: string; subscriptionId: string;
          migrationOptions: JsonNode): Recallable =
  ## webAppsMigrateStorage
  ## Restores a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionName: string (required)
  ##                   : Azure subscription.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   migrationOptions: JObject (required)
  ##                   : Migration migrationOptions.
  var path_569412 = newJObject()
  var query_569413 = newJObject()
  var body_569414 = newJObject()
  add(path_569412, "resourceGroupName", newJString(resourceGroupName))
  add(query_569413, "api-version", newJString(apiVersion))
  add(path_569412, "name", newJString(name))
  add(query_569413, "subscriptionName", newJString(subscriptionName))
  add(path_569412, "subscriptionId", newJString(subscriptionId))
  if migrationOptions != nil:
    body_569414 = migrationOptions
  result = call_569411.call(path_569412, query_569413, nil, nil, body_569414)

var webAppsMigrateStorage* = Call_WebAppsMigrateStorage_569401(
    name: "webAppsMigrateStorage", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate",
    validator: validate_WebAppsMigrateStorage_569402, base: "",
    url: url_WebAppsMigrateStorage_569403, schemes: {Scheme.Https})
type
  Call_WebAppsMigrateMySql_569415 = ref object of OpenApiRestCall_567666
proc url_WebAppsMigrateMySql_569417(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsMigrateMySql_569416(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569418 = path.getOrDefault("resourceGroupName")
  valid_569418 = validateParameter(valid_569418, JString, required = true,
                                 default = nil)
  if valid_569418 != nil:
    section.add "resourceGroupName", valid_569418
  var valid_569419 = path.getOrDefault("name")
  valid_569419 = validateParameter(valid_569419, JString, required = true,
                                 default = nil)
  if valid_569419 != nil:
    section.add "name", valid_569419
  var valid_569420 = path.getOrDefault("subscriptionId")
  valid_569420 = validateParameter(valid_569420, JString, required = true,
                                 default = nil)
  if valid_569420 != nil:
    section.add "subscriptionId", valid_569420
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569421 = query.getOrDefault("api-version")
  valid_569421 = validateParameter(valid_569421, JString, required = true,
                                 default = nil)
  if valid_569421 != nil:
    section.add "api-version", valid_569421
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569423: Call_WebAppsMigrateMySql_569415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ## 
  let valid = call_569423.validator(path, query, header, formData, body)
  let scheme = call_569423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569423.url(scheme.get, call_569423.host, call_569423.base,
                         call_569423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569423, url, valid)

proc call*(call_569424: Call_WebAppsMigrateMySql_569415; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          migrationRequestEnvelope: JsonNode): Recallable =
  ## webAppsMigrateMySql
  ## Migrates a local (in-app) MySql database to a remote MySql database.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   migrationRequestEnvelope: JObject (required)
  ##                           : MySql migration options.
  var path_569425 = newJObject()
  var query_569426 = newJObject()
  var body_569427 = newJObject()
  add(path_569425, "resourceGroupName", newJString(resourceGroupName))
  add(query_569426, "api-version", newJString(apiVersion))
  add(path_569425, "name", newJString(name))
  add(path_569425, "subscriptionId", newJString(subscriptionId))
  if migrationRequestEnvelope != nil:
    body_569427 = migrationRequestEnvelope
  result = call_569424.call(path_569425, query_569426, nil, nil, body_569427)

var webAppsMigrateMySql* = Call_WebAppsMigrateMySql_569415(
    name: "webAppsMigrateMySql", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql",
    validator: validate_WebAppsMigrateMySql_569416, base: "",
    url: url_WebAppsMigrateMySql_569417, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatus_569428 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMigrateMySqlStatus_569430(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatus_569429(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569431 = path.getOrDefault("resourceGroupName")
  valid_569431 = validateParameter(valid_569431, JString, required = true,
                                 default = nil)
  if valid_569431 != nil:
    section.add "resourceGroupName", valid_569431
  var valid_569432 = path.getOrDefault("name")
  valid_569432 = validateParameter(valid_569432, JString, required = true,
                                 default = nil)
  if valid_569432 != nil:
    section.add "name", valid_569432
  var valid_569433 = path.getOrDefault("subscriptionId")
  valid_569433 = validateParameter(valid_569433, JString, required = true,
                                 default = nil)
  if valid_569433 != nil:
    section.add "subscriptionId", valid_569433
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569434 = query.getOrDefault("api-version")
  valid_569434 = validateParameter(valid_569434, JString, required = true,
                                 default = nil)
  if valid_569434 != nil:
    section.add "api-version", valid_569434
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569435: Call_WebAppsGetMigrateMySqlStatus_569428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_569435.validator(path, query, header, formData, body)
  let scheme = call_569435.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569435.url(scheme.get, call_569435.host, call_569435.base,
                         call_569435.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569435, url, valid)

proc call*(call_569436: Call_WebAppsGetMigrateMySqlStatus_569428;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMigrateMySqlStatus
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569437 = newJObject()
  var query_569438 = newJObject()
  add(path_569437, "resourceGroupName", newJString(resourceGroupName))
  add(query_569438, "api-version", newJString(apiVersion))
  add(path_569437, "name", newJString(name))
  add(path_569437, "subscriptionId", newJString(subscriptionId))
  result = call_569436.call(path_569437, query_569438, nil, nil, nil)

var webAppsGetMigrateMySqlStatus* = Call_WebAppsGetMigrateMySqlStatus_569428(
    name: "webAppsGetMigrateMySqlStatus", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatus_569429, base: "",
    url: url_WebAppsGetMigrateMySqlStatus_569430, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_569450 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_569452(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_569451(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569453 = path.getOrDefault("resourceGroupName")
  valid_569453 = validateParameter(valid_569453, JString, required = true,
                                 default = nil)
  if valid_569453 != nil:
    section.add "resourceGroupName", valid_569453
  var valid_569454 = path.getOrDefault("name")
  valid_569454 = validateParameter(valid_569454, JString, required = true,
                                 default = nil)
  if valid_569454 != nil:
    section.add "name", valid_569454
  var valid_569455 = path.getOrDefault("subscriptionId")
  valid_569455 = validateParameter(valid_569455, JString, required = true,
                                 default = nil)
  if valid_569455 != nil:
    section.add "subscriptionId", valid_569455
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569456 = query.getOrDefault("api-version")
  valid_569456 = validateParameter(valid_569456, JString, required = true,
                                 default = nil)
  if valid_569456 != nil:
    section.add "api-version", valid_569456
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569458: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_569450;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_569458.validator(path, query, header, formData, body)
  let scheme = call_569458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569458.url(scheme.get, call_569458.host, call_569458.base,
                         call_569458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569458, url, valid)

proc call*(call_569459: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_569450;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateSwiftVirtualNetworkConnection
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569460 = newJObject()
  var query_569461 = newJObject()
  var body_569462 = newJObject()
  add(path_569460, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_569462 = connectionEnvelope
  add(path_569460, "name", newJString(name))
  add(query_569461, "api-version", newJString(apiVersion))
  add(path_569460, "subscriptionId", newJString(subscriptionId))
  result = call_569459.call(path_569460, query_569461, nil, nil, body_569462)

var webAppsCreateOrUpdateSwiftVirtualNetworkConnection* = Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_569450(
    name: "webAppsCreateOrUpdateSwiftVirtualNetworkConnection",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_569451,
    base: "", url: url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnection_569452,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSwiftVirtualNetworkConnection_569439 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSwiftVirtualNetworkConnection_569441(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSwiftVirtualNetworkConnection_569440(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a Swift Virtual Network connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569442 = path.getOrDefault("resourceGroupName")
  valid_569442 = validateParameter(valid_569442, JString, required = true,
                                 default = nil)
  if valid_569442 != nil:
    section.add "resourceGroupName", valid_569442
  var valid_569443 = path.getOrDefault("name")
  valid_569443 = validateParameter(valid_569443, JString, required = true,
                                 default = nil)
  if valid_569443 != nil:
    section.add "name", valid_569443
  var valid_569444 = path.getOrDefault("subscriptionId")
  valid_569444 = validateParameter(valid_569444, JString, required = true,
                                 default = nil)
  if valid_569444 != nil:
    section.add "subscriptionId", valid_569444
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569445 = query.getOrDefault("api-version")
  valid_569445 = validateParameter(valid_569445, JString, required = true,
                                 default = nil)
  if valid_569445 != nil:
    section.add "api-version", valid_569445
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569446: Call_WebAppsGetSwiftVirtualNetworkConnection_569439;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a Swift Virtual Network connection.
  ## 
  let valid = call_569446.validator(path, query, header, formData, body)
  let scheme = call_569446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569446.url(scheme.get, call_569446.host, call_569446.base,
                         call_569446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569446, url, valid)

proc call*(call_569447: Call_WebAppsGetSwiftVirtualNetworkConnection_569439;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSwiftVirtualNetworkConnection
  ## Gets a Swift Virtual Network connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569448 = newJObject()
  var query_569449 = newJObject()
  add(path_569448, "resourceGroupName", newJString(resourceGroupName))
  add(query_569449, "api-version", newJString(apiVersion))
  add(path_569448, "name", newJString(name))
  add(path_569448, "subscriptionId", newJString(subscriptionId))
  result = call_569447.call(path_569448, query_569449, nil, nil, nil)

var webAppsGetSwiftVirtualNetworkConnection* = Call_WebAppsGetSwiftVirtualNetworkConnection_569439(
    name: "webAppsGetSwiftVirtualNetworkConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsGetSwiftVirtualNetworkConnection_569440, base: "",
    url: url_WebAppsGetSwiftVirtualNetworkConnection_569441,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSwiftVirtualNetworkConnection_569474 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSwiftVirtualNetworkConnection_569476(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSwiftVirtualNetworkConnection_569475(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569477 = path.getOrDefault("resourceGroupName")
  valid_569477 = validateParameter(valid_569477, JString, required = true,
                                 default = nil)
  if valid_569477 != nil:
    section.add "resourceGroupName", valid_569477
  var valid_569478 = path.getOrDefault("name")
  valid_569478 = validateParameter(valid_569478, JString, required = true,
                                 default = nil)
  if valid_569478 != nil:
    section.add "name", valid_569478
  var valid_569479 = path.getOrDefault("subscriptionId")
  valid_569479 = validateParameter(valid_569479, JString, required = true,
                                 default = nil)
  if valid_569479 != nil:
    section.add "subscriptionId", valid_569479
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569480 = query.getOrDefault("api-version")
  valid_569480 = validateParameter(valid_569480, JString, required = true,
                                 default = nil)
  if valid_569480 != nil:
    section.add "api-version", valid_569480
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569482: Call_WebAppsUpdateSwiftVirtualNetworkConnection_569474;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_569482.validator(path, query, header, formData, body)
  let scheme = call_569482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569482.url(scheme.get, call_569482.host, call_569482.base,
                         call_569482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569482, url, valid)

proc call*(call_569483: Call_WebAppsUpdateSwiftVirtualNetworkConnection_569474;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsUpdateSwiftVirtualNetworkConnection
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569484 = newJObject()
  var query_569485 = newJObject()
  var body_569486 = newJObject()
  add(path_569484, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_569486 = connectionEnvelope
  add(path_569484, "name", newJString(name))
  add(query_569485, "api-version", newJString(apiVersion))
  add(path_569484, "subscriptionId", newJString(subscriptionId))
  result = call_569483.call(path_569484, query_569485, nil, nil, body_569486)

var webAppsUpdateSwiftVirtualNetworkConnection* = Call_WebAppsUpdateSwiftVirtualNetworkConnection_569474(
    name: "webAppsUpdateSwiftVirtualNetworkConnection",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsUpdateSwiftVirtualNetworkConnection_569475,
    base: "", url: url_WebAppsUpdateSwiftVirtualNetworkConnection_569476,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSwiftVirtualNetwork_569463 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSwiftVirtualNetwork_569465(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSwiftVirtualNetwork_569464(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569466 = path.getOrDefault("resourceGroupName")
  valid_569466 = validateParameter(valid_569466, JString, required = true,
                                 default = nil)
  if valid_569466 != nil:
    section.add "resourceGroupName", valid_569466
  var valid_569467 = path.getOrDefault("name")
  valid_569467 = validateParameter(valid_569467, JString, required = true,
                                 default = nil)
  if valid_569467 != nil:
    section.add "name", valid_569467
  var valid_569468 = path.getOrDefault("subscriptionId")
  valid_569468 = validateParameter(valid_569468, JString, required = true,
                                 default = nil)
  if valid_569468 != nil:
    section.add "subscriptionId", valid_569468
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569469 = query.getOrDefault("api-version")
  valid_569469 = validateParameter(valid_569469, JString, required = true,
                                 default = nil)
  if valid_569469 != nil:
    section.add "api-version", valid_569469
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569470: Call_WebAppsDeleteSwiftVirtualNetwork_569463;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  let valid = call_569470.validator(path, query, header, formData, body)
  let scheme = call_569470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569470.url(scheme.get, call_569470.host, call_569470.base,
                         call_569470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569470, url, valid)

proc call*(call_569471: Call_WebAppsDeleteSwiftVirtualNetwork_569463;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSwiftVirtualNetwork
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569472 = newJObject()
  var query_569473 = newJObject()
  add(path_569472, "resourceGroupName", newJString(resourceGroupName))
  add(query_569473, "api-version", newJString(apiVersion))
  add(path_569472, "name", newJString(name))
  add(path_569472, "subscriptionId", newJString(subscriptionId))
  result = call_569471.call(path_569472, query_569473, nil, nil, nil)

var webAppsDeleteSwiftVirtualNetwork* = Call_WebAppsDeleteSwiftVirtualNetwork_569463(
    name: "webAppsDeleteSwiftVirtualNetwork", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    validator: validate_WebAppsDeleteSwiftVirtualNetwork_569464, base: "",
    url: url_WebAppsDeleteSwiftVirtualNetwork_569465, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeatures_569487 = ref object of OpenApiRestCall_567666
proc url_WebAppsListNetworkFeatures_569489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeatures_569488(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569490 = path.getOrDefault("resourceGroupName")
  valid_569490 = validateParameter(valid_569490, JString, required = true,
                                 default = nil)
  if valid_569490 != nil:
    section.add "resourceGroupName", valid_569490
  var valid_569491 = path.getOrDefault("name")
  valid_569491 = validateParameter(valid_569491, JString, required = true,
                                 default = nil)
  if valid_569491 != nil:
    section.add "name", valid_569491
  var valid_569492 = path.getOrDefault("subscriptionId")
  valid_569492 = validateParameter(valid_569492, JString, required = true,
                                 default = nil)
  if valid_569492 != nil:
    section.add "subscriptionId", valid_569492
  var valid_569493 = path.getOrDefault("view")
  valid_569493 = validateParameter(valid_569493, JString, required = true,
                                 default = nil)
  if valid_569493 != nil:
    section.add "view", valid_569493
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569494 = query.getOrDefault("api-version")
  valid_569494 = validateParameter(valid_569494, JString, required = true,
                                 default = nil)
  if valid_569494 != nil:
    section.add "api-version", valid_569494
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569495: Call_WebAppsListNetworkFeatures_569487; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_569495.validator(path, query, header, formData, body)
  let scheme = call_569495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569495.url(scheme.get, call_569495.host, call_569495.base,
                         call_569495.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569495, url, valid)

proc call*(call_569496: Call_WebAppsListNetworkFeatures_569487;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; view: string): Recallable =
  ## webAppsListNetworkFeatures
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_569497 = newJObject()
  var query_569498 = newJObject()
  add(path_569497, "resourceGroupName", newJString(resourceGroupName))
  add(query_569498, "api-version", newJString(apiVersion))
  add(path_569497, "name", newJString(name))
  add(path_569497, "subscriptionId", newJString(subscriptionId))
  add(path_569497, "view", newJString(view))
  result = call_569496.call(path_569497, query_569498, nil, nil, nil)

var webAppsListNetworkFeatures* = Call_WebAppsListNetworkFeatures_569487(
    name: "webAppsListNetworkFeatures", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeatures_569488, base: "",
    url: url_WebAppsListNetworkFeatures_569489, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperation_569499 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetNetworkTraceOperation_569501(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/networkTrace/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperation_569500(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569502 = path.getOrDefault("resourceGroupName")
  valid_569502 = validateParameter(valid_569502, JString, required = true,
                                 default = nil)
  if valid_569502 != nil:
    section.add "resourceGroupName", valid_569502
  var valid_569503 = path.getOrDefault("name")
  valid_569503 = validateParameter(valid_569503, JString, required = true,
                                 default = nil)
  if valid_569503 != nil:
    section.add "name", valid_569503
  var valid_569504 = path.getOrDefault("subscriptionId")
  valid_569504 = validateParameter(valid_569504, JString, required = true,
                                 default = nil)
  if valid_569504 != nil:
    section.add "subscriptionId", valid_569504
  var valid_569505 = path.getOrDefault("operationId")
  valid_569505 = validateParameter(valid_569505, JString, required = true,
                                 default = nil)
  if valid_569505 != nil:
    section.add "operationId", valid_569505
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569506 = query.getOrDefault("api-version")
  valid_569506 = validateParameter(valid_569506, JString, required = true,
                                 default = nil)
  if valid_569506 != nil:
    section.add "api-version", valid_569506
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569507: Call_WebAppsGetNetworkTraceOperation_569499;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_569507.validator(path, query, header, formData, body)
  let scheme = call_569507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569507.url(scheme.get, call_569507.host, call_569507.base,
                         call_569507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569507, url, valid)

proc call*(call_569508: Call_WebAppsGetNetworkTraceOperation_569499;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTraceOperation
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_569509 = newJObject()
  var query_569510 = newJObject()
  add(path_569509, "resourceGroupName", newJString(resourceGroupName))
  add(query_569510, "api-version", newJString(apiVersion))
  add(path_569509, "name", newJString(name))
  add(path_569509, "subscriptionId", newJString(subscriptionId))
  add(path_569509, "operationId", newJString(operationId))
  result = call_569508.call(path_569509, query_569510, nil, nil, nil)

var webAppsGetNetworkTraceOperation* = Call_WebAppsGetNetworkTraceOperation_569499(
    name: "webAppsGetNetworkTraceOperation", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperation_569500, base: "",
    url: url_WebAppsGetNetworkTraceOperation_569501, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTrace_569511 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartWebSiteNetworkTrace_569513(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTrace_569512(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569514 = path.getOrDefault("resourceGroupName")
  valid_569514 = validateParameter(valid_569514, JString, required = true,
                                 default = nil)
  if valid_569514 != nil:
    section.add "resourceGroupName", valid_569514
  var valid_569515 = path.getOrDefault("name")
  valid_569515 = validateParameter(valid_569515, JString, required = true,
                                 default = nil)
  if valid_569515 != nil:
    section.add "name", valid_569515
  var valid_569516 = path.getOrDefault("subscriptionId")
  valid_569516 = validateParameter(valid_569516, JString, required = true,
                                 default = nil)
  if valid_569516 != nil:
    section.add "subscriptionId", valid_569516
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569517 = query.getOrDefault("api-version")
  valid_569517 = validateParameter(valid_569517, JString, required = true,
                                 default = nil)
  if valid_569517 != nil:
    section.add "api-version", valid_569517
  var valid_569518 = query.getOrDefault("durationInSeconds")
  valid_569518 = validateParameter(valid_569518, JInt, required = false, default = nil)
  if valid_569518 != nil:
    section.add "durationInSeconds", valid_569518
  var valid_569519 = query.getOrDefault("maxFrameLength")
  valid_569519 = validateParameter(valid_569519, JInt, required = false, default = nil)
  if valid_569519 != nil:
    section.add "maxFrameLength", valid_569519
  var valid_569520 = query.getOrDefault("sasUrl")
  valid_569520 = validateParameter(valid_569520, JString, required = false,
                                 default = nil)
  if valid_569520 != nil:
    section.add "sasUrl", valid_569520
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569521: Call_WebAppsStartWebSiteNetworkTrace_569511;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  let valid = call_569521.validator(path, query, header, formData, body)
  let scheme = call_569521.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569521.url(scheme.get, call_569521.host, call_569521.base,
                         call_569521.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569521, url, valid)

proc call*(call_569522: Call_WebAppsStartWebSiteNetworkTrace_569511;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTrace
  ## Start capturing network packets for the site (To be deprecated).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_569523 = newJObject()
  var query_569524 = newJObject()
  add(path_569523, "resourceGroupName", newJString(resourceGroupName))
  add(query_569524, "api-version", newJString(apiVersion))
  add(path_569523, "name", newJString(name))
  add(path_569523, "subscriptionId", newJString(subscriptionId))
  add(query_569524, "durationInSeconds", newJInt(durationInSeconds))
  add(query_569524, "maxFrameLength", newJInt(maxFrameLength))
  add(query_569524, "sasUrl", newJString(sasUrl))
  result = call_569522.call(path_569523, query_569524, nil, nil, nil)

var webAppsStartWebSiteNetworkTrace* = Call_WebAppsStartWebSiteNetworkTrace_569511(
    name: "webAppsStartWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTrace_569512, base: "",
    url: url_WebAppsStartWebSiteNetworkTrace_569513, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceOperation_569525 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartWebSiteNetworkTraceOperation_569527(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/startOperation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceOperation_569526(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569528 = path.getOrDefault("resourceGroupName")
  valid_569528 = validateParameter(valid_569528, JString, required = true,
                                 default = nil)
  if valid_569528 != nil:
    section.add "resourceGroupName", valid_569528
  var valid_569529 = path.getOrDefault("name")
  valid_569529 = validateParameter(valid_569529, JString, required = true,
                                 default = nil)
  if valid_569529 != nil:
    section.add "name", valid_569529
  var valid_569530 = path.getOrDefault("subscriptionId")
  valid_569530 = validateParameter(valid_569530, JString, required = true,
                                 default = nil)
  if valid_569530 != nil:
    section.add "subscriptionId", valid_569530
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569531 = query.getOrDefault("api-version")
  valid_569531 = validateParameter(valid_569531, JString, required = true,
                                 default = nil)
  if valid_569531 != nil:
    section.add "api-version", valid_569531
  var valid_569532 = query.getOrDefault("durationInSeconds")
  valid_569532 = validateParameter(valid_569532, JInt, required = false, default = nil)
  if valid_569532 != nil:
    section.add "durationInSeconds", valid_569532
  var valid_569533 = query.getOrDefault("maxFrameLength")
  valid_569533 = validateParameter(valid_569533, JInt, required = false, default = nil)
  if valid_569533 != nil:
    section.add "maxFrameLength", valid_569533
  var valid_569534 = query.getOrDefault("sasUrl")
  valid_569534 = validateParameter(valid_569534, JString, required = false,
                                 default = nil)
  if valid_569534 != nil:
    section.add "sasUrl", valid_569534
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569535: Call_WebAppsStartWebSiteNetworkTraceOperation_569525;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_569535.validator(path, query, header, formData, body)
  let scheme = call_569535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569535.url(scheme.get, call_569535.host, call_569535.base,
                         call_569535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569535, url, valid)

proc call*(call_569536: Call_WebAppsStartWebSiteNetworkTraceOperation_569525;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTraceOperation
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_569537 = newJObject()
  var query_569538 = newJObject()
  add(path_569537, "resourceGroupName", newJString(resourceGroupName))
  add(query_569538, "api-version", newJString(apiVersion))
  add(path_569537, "name", newJString(name))
  add(path_569537, "subscriptionId", newJString(subscriptionId))
  add(query_569538, "durationInSeconds", newJInt(durationInSeconds))
  add(query_569538, "maxFrameLength", newJInt(maxFrameLength))
  add(query_569538, "sasUrl", newJString(sasUrl))
  result = call_569536.call(path_569537, query_569538, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceOperation* = Call_WebAppsStartWebSiteNetworkTraceOperation_569525(
    name: "webAppsStartWebSiteNetworkTraceOperation", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation",
    validator: validate_WebAppsStartWebSiteNetworkTraceOperation_569526, base: "",
    url: url_WebAppsStartWebSiteNetworkTraceOperation_569527,
    schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTrace_569539 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopWebSiteNetworkTrace_569541(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTrace_569540(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569542 = path.getOrDefault("resourceGroupName")
  valid_569542 = validateParameter(valid_569542, JString, required = true,
                                 default = nil)
  if valid_569542 != nil:
    section.add "resourceGroupName", valid_569542
  var valid_569543 = path.getOrDefault("name")
  valid_569543 = validateParameter(valid_569543, JString, required = true,
                                 default = nil)
  if valid_569543 != nil:
    section.add "name", valid_569543
  var valid_569544 = path.getOrDefault("subscriptionId")
  valid_569544 = validateParameter(valid_569544, JString, required = true,
                                 default = nil)
  if valid_569544 != nil:
    section.add "subscriptionId", valid_569544
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569545 = query.getOrDefault("api-version")
  valid_569545 = validateParameter(valid_569545, JString, required = true,
                                 default = nil)
  if valid_569545 != nil:
    section.add "api-version", valid_569545
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569546: Call_WebAppsStopWebSiteNetworkTrace_569539; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_569546.validator(path, query, header, formData, body)
  let scheme = call_569546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569546.url(scheme.get, call_569546.host, call_569546.base,
                         call_569546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569546, url, valid)

proc call*(call_569547: Call_WebAppsStopWebSiteNetworkTrace_569539;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsStopWebSiteNetworkTrace
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569548 = newJObject()
  var query_569549 = newJObject()
  add(path_569548, "resourceGroupName", newJString(resourceGroupName))
  add(query_569549, "api-version", newJString(apiVersion))
  add(path_569548, "name", newJString(name))
  add(path_569548, "subscriptionId", newJString(subscriptionId))
  result = call_569547.call(path_569548, query_569549, nil, nil, nil)

var webAppsStopWebSiteNetworkTrace* = Call_WebAppsStopWebSiteNetworkTrace_569539(
    name: "webAppsStopWebSiteNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTrace_569540, base: "",
    url: url_WebAppsStopWebSiteNetworkTrace_569541, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraces_569550 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetNetworkTraces_569552(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTrace/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraces_569551(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569553 = path.getOrDefault("resourceGroupName")
  valid_569553 = validateParameter(valid_569553, JString, required = true,
                                 default = nil)
  if valid_569553 != nil:
    section.add "resourceGroupName", valid_569553
  var valid_569554 = path.getOrDefault("name")
  valid_569554 = validateParameter(valid_569554, JString, required = true,
                                 default = nil)
  if valid_569554 != nil:
    section.add "name", valid_569554
  var valid_569555 = path.getOrDefault("subscriptionId")
  valid_569555 = validateParameter(valid_569555, JString, required = true,
                                 default = nil)
  if valid_569555 != nil:
    section.add "subscriptionId", valid_569555
  var valid_569556 = path.getOrDefault("operationId")
  valid_569556 = validateParameter(valid_569556, JString, required = true,
                                 default = nil)
  if valid_569556 != nil:
    section.add "operationId", valid_569556
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569557 = query.getOrDefault("api-version")
  valid_569557 = validateParameter(valid_569557, JString, required = true,
                                 default = nil)
  if valid_569557 != nil:
    section.add "api-version", valid_569557
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569558: Call_WebAppsGetNetworkTraces_569550; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_569558.validator(path, query, header, formData, body)
  let scheme = call_569558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569558.url(scheme.get, call_569558.host, call_569558.base,
                         call_569558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569558, url, valid)

proc call*(call_569559: Call_WebAppsGetNetworkTraces_569550;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTraces
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_569560 = newJObject()
  var query_569561 = newJObject()
  add(path_569560, "resourceGroupName", newJString(resourceGroupName))
  add(query_569561, "api-version", newJString(apiVersion))
  add(path_569560, "name", newJString(name))
  add(path_569560, "subscriptionId", newJString(subscriptionId))
  add(path_569560, "operationId", newJString(operationId))
  result = call_569559.call(path_569560, query_569561, nil, nil, nil)

var webAppsGetNetworkTraces* = Call_WebAppsGetNetworkTraces_569550(
    name: "webAppsGetNetworkTraces", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/{operationId}",
    validator: validate_WebAppsGetNetworkTraces_569551, base: "",
    url: url_WebAppsGetNetworkTraces_569552, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperationV2_569562 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetNetworkTraceOperationV2_569564(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"), (kind: ConstantSegment,
        value: "/networkTraces/current/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperationV2_569563(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569565 = path.getOrDefault("resourceGroupName")
  valid_569565 = validateParameter(valid_569565, JString, required = true,
                                 default = nil)
  if valid_569565 != nil:
    section.add "resourceGroupName", valid_569565
  var valid_569566 = path.getOrDefault("name")
  valid_569566 = validateParameter(valid_569566, JString, required = true,
                                 default = nil)
  if valid_569566 != nil:
    section.add "name", valid_569566
  var valid_569567 = path.getOrDefault("subscriptionId")
  valid_569567 = validateParameter(valid_569567, JString, required = true,
                                 default = nil)
  if valid_569567 != nil:
    section.add "subscriptionId", valid_569567
  var valid_569568 = path.getOrDefault("operationId")
  valid_569568 = validateParameter(valid_569568, JString, required = true,
                                 default = nil)
  if valid_569568 != nil:
    section.add "operationId", valid_569568
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569569 = query.getOrDefault("api-version")
  valid_569569 = validateParameter(valid_569569, JString, required = true,
                                 default = nil)
  if valid_569569 != nil:
    section.add "api-version", valid_569569
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569570: Call_WebAppsGetNetworkTraceOperationV2_569562;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_569570.validator(path, query, header, formData, body)
  let scheme = call_569570.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569570.url(scheme.get, call_569570.host, call_569570.base,
                         call_569570.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569570, url, valid)

proc call*(call_569571: Call_WebAppsGetNetworkTraceOperationV2_569562;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTraceOperationV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_569572 = newJObject()
  var query_569573 = newJObject()
  add(path_569572, "resourceGroupName", newJString(resourceGroupName))
  add(query_569573, "api-version", newJString(apiVersion))
  add(path_569572, "name", newJString(name))
  add(path_569572, "subscriptionId", newJString(subscriptionId))
  add(path_569572, "operationId", newJString(operationId))
  result = call_569571.call(path_569572, query_569573, nil, nil, nil)

var webAppsGetNetworkTraceOperationV2* = Call_WebAppsGetNetworkTraceOperationV2_569562(
    name: "webAppsGetNetworkTraceOperationV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/current/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperationV2_569563, base: "",
    url: url_WebAppsGetNetworkTraceOperationV2_569564, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTracesV2_569574 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetNetworkTracesV2_569576(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/networkTraces/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTracesV2_569575(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569577 = path.getOrDefault("resourceGroupName")
  valid_569577 = validateParameter(valid_569577, JString, required = true,
                                 default = nil)
  if valid_569577 != nil:
    section.add "resourceGroupName", valid_569577
  var valid_569578 = path.getOrDefault("name")
  valid_569578 = validateParameter(valid_569578, JString, required = true,
                                 default = nil)
  if valid_569578 != nil:
    section.add "name", valid_569578
  var valid_569579 = path.getOrDefault("subscriptionId")
  valid_569579 = validateParameter(valid_569579, JString, required = true,
                                 default = nil)
  if valid_569579 != nil:
    section.add "subscriptionId", valid_569579
  var valid_569580 = path.getOrDefault("operationId")
  valid_569580 = validateParameter(valid_569580, JString, required = true,
                                 default = nil)
  if valid_569580 != nil:
    section.add "operationId", valid_569580
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569581 = query.getOrDefault("api-version")
  valid_569581 = validateParameter(valid_569581, JString, required = true,
                                 default = nil)
  if valid_569581 != nil:
    section.add "api-version", valid_569581
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569582: Call_WebAppsGetNetworkTracesV2_569574; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_569582.validator(path, query, header, formData, body)
  let scheme = call_569582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569582.url(scheme.get, call_569582.host, call_569582.base,
                         call_569582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569582, url, valid)

proc call*(call_569583: Call_WebAppsGetNetworkTracesV2_569574;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTracesV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_569584 = newJObject()
  var query_569585 = newJObject()
  add(path_569584, "resourceGroupName", newJString(resourceGroupName))
  add(query_569585, "api-version", newJString(apiVersion))
  add(path_569584, "name", newJString(name))
  add(path_569584, "subscriptionId", newJString(subscriptionId))
  add(path_569584, "operationId", newJString(operationId))
  result = call_569583.call(path_569584, query_569585, nil, nil, nil)

var webAppsGetNetworkTracesV2* = Call_WebAppsGetNetworkTracesV2_569574(
    name: "webAppsGetNetworkTracesV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/{operationId}",
    validator: validate_WebAppsGetNetworkTracesV2_569575, base: "",
    url: url_WebAppsGetNetworkTracesV2_569576, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPassword_569586 = ref object of OpenApiRestCall_567666
proc url_WebAppsGenerateNewSitePublishingPassword_569588(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPassword_569587(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569589 = path.getOrDefault("resourceGroupName")
  valid_569589 = validateParameter(valid_569589, JString, required = true,
                                 default = nil)
  if valid_569589 != nil:
    section.add "resourceGroupName", valid_569589
  var valid_569590 = path.getOrDefault("name")
  valid_569590 = validateParameter(valid_569590, JString, required = true,
                                 default = nil)
  if valid_569590 != nil:
    section.add "name", valid_569590
  var valid_569591 = path.getOrDefault("subscriptionId")
  valid_569591 = validateParameter(valid_569591, JString, required = true,
                                 default = nil)
  if valid_569591 != nil:
    section.add "subscriptionId", valid_569591
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569592 = query.getOrDefault("api-version")
  valid_569592 = validateParameter(valid_569592, JString, required = true,
                                 default = nil)
  if valid_569592 != nil:
    section.add "api-version", valid_569592
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569593: Call_WebAppsGenerateNewSitePublishingPassword_569586;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_569593.validator(path, query, header, formData, body)
  let scheme = call_569593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569593.url(scheme.get, call_569593.host, call_569593.base,
                         call_569593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569593, url, valid)

proc call*(call_569594: Call_WebAppsGenerateNewSitePublishingPassword_569586;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGenerateNewSitePublishingPassword
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569595 = newJObject()
  var query_569596 = newJObject()
  add(path_569595, "resourceGroupName", newJString(resourceGroupName))
  add(query_569596, "api-version", newJString(apiVersion))
  add(path_569595, "name", newJString(name))
  add(path_569595, "subscriptionId", newJString(subscriptionId))
  result = call_569594.call(path_569595, query_569596, nil, nil, nil)

var webAppsGenerateNewSitePublishingPassword* = Call_WebAppsGenerateNewSitePublishingPassword_569586(
    name: "webAppsGenerateNewSitePublishingPassword", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPassword_569587, base: "",
    url: url_WebAppsGenerateNewSitePublishingPassword_569588,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCounters_569597 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPerfMonCounters_569599(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCounters_569598(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569600 = path.getOrDefault("resourceGroupName")
  valid_569600 = validateParameter(valid_569600, JString, required = true,
                                 default = nil)
  if valid_569600 != nil:
    section.add "resourceGroupName", valid_569600
  var valid_569601 = path.getOrDefault("name")
  valid_569601 = validateParameter(valid_569601, JString, required = true,
                                 default = nil)
  if valid_569601 != nil:
    section.add "name", valid_569601
  var valid_569602 = path.getOrDefault("subscriptionId")
  valid_569602 = validateParameter(valid_569602, JString, required = true,
                                 default = nil)
  if valid_569602 != nil:
    section.add "subscriptionId", valid_569602
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569603 = query.getOrDefault("api-version")
  valid_569603 = validateParameter(valid_569603, JString, required = true,
                                 default = nil)
  if valid_569603 != nil:
    section.add "api-version", valid_569603
  var valid_569604 = query.getOrDefault("$filter")
  valid_569604 = validateParameter(valid_569604, JString, required = false,
                                 default = nil)
  if valid_569604 != nil:
    section.add "$filter", valid_569604
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569605: Call_WebAppsListPerfMonCounters_569597; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_569605.validator(path, query, header, formData, body)
  let scheme = call_569605.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569605.url(scheme.get, call_569605.host, call_569605.base,
                         call_569605.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569605, url, valid)

proc call*(call_569606: Call_WebAppsListPerfMonCounters_569597;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListPerfMonCounters
  ## Gets perfmon counters for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_569607 = newJObject()
  var query_569608 = newJObject()
  add(path_569607, "resourceGroupName", newJString(resourceGroupName))
  add(query_569608, "api-version", newJString(apiVersion))
  add(path_569607, "name", newJString(name))
  add(path_569607, "subscriptionId", newJString(subscriptionId))
  add(query_569608, "$filter", newJString(Filter))
  result = call_569606.call(path_569607, query_569608, nil, nil, nil)

var webAppsListPerfMonCounters* = Call_WebAppsListPerfMonCounters_569597(
    name: "webAppsListPerfMonCounters", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters",
    validator: validate_WebAppsListPerfMonCounters_569598, base: "",
    url: url_WebAppsListPerfMonCounters_569599, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlag_569609 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSitePhpErrorLogFlag_569611(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlag_569610(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569612 = path.getOrDefault("resourceGroupName")
  valid_569612 = validateParameter(valid_569612, JString, required = true,
                                 default = nil)
  if valid_569612 != nil:
    section.add "resourceGroupName", valid_569612
  var valid_569613 = path.getOrDefault("name")
  valid_569613 = validateParameter(valid_569613, JString, required = true,
                                 default = nil)
  if valid_569613 != nil:
    section.add "name", valid_569613
  var valid_569614 = path.getOrDefault("subscriptionId")
  valid_569614 = validateParameter(valid_569614, JString, required = true,
                                 default = nil)
  if valid_569614 != nil:
    section.add "subscriptionId", valid_569614
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569615 = query.getOrDefault("api-version")
  valid_569615 = validateParameter(valid_569615, JString, required = true,
                                 default = nil)
  if valid_569615 != nil:
    section.add "api-version", valid_569615
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569616: Call_WebAppsGetSitePhpErrorLogFlag_569609; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_569616.validator(path, query, header, formData, body)
  let scheme = call_569616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569616.url(scheme.get, call_569616.host, call_569616.base,
                         call_569616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569616, url, valid)

proc call*(call_569617: Call_WebAppsGetSitePhpErrorLogFlag_569609;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlag
  ## Gets web app's event logs.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569618 = newJObject()
  var query_569619 = newJObject()
  add(path_569618, "resourceGroupName", newJString(resourceGroupName))
  add(query_569619, "api-version", newJString(apiVersion))
  add(path_569618, "name", newJString(name))
  add(path_569618, "subscriptionId", newJString(subscriptionId))
  result = call_569617.call(path_569618, query_569619, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlag* = Call_WebAppsGetSitePhpErrorLogFlag_569609(
    name: "webAppsGetSitePhpErrorLogFlag", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlag_569610, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlag_569611, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOns_569620 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPremierAddOns_569622(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOns_569621(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569623 = path.getOrDefault("resourceGroupName")
  valid_569623 = validateParameter(valid_569623, JString, required = true,
                                 default = nil)
  if valid_569623 != nil:
    section.add "resourceGroupName", valid_569623
  var valid_569624 = path.getOrDefault("name")
  valid_569624 = validateParameter(valid_569624, JString, required = true,
                                 default = nil)
  if valid_569624 != nil:
    section.add "name", valid_569624
  var valid_569625 = path.getOrDefault("subscriptionId")
  valid_569625 = validateParameter(valid_569625, JString, required = true,
                                 default = nil)
  if valid_569625 != nil:
    section.add "subscriptionId", valid_569625
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569626 = query.getOrDefault("api-version")
  valid_569626 = validateParameter(valid_569626, JString, required = true,
                                 default = nil)
  if valid_569626 != nil:
    section.add "api-version", valid_569626
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569627: Call_WebAppsListPremierAddOns_569620; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_569627.validator(path, query, header, formData, body)
  let scheme = call_569627.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569627.url(scheme.get, call_569627.host, call_569627.base,
                         call_569627.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569627, url, valid)

proc call*(call_569628: Call_WebAppsListPremierAddOns_569620;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPremierAddOns
  ## Gets the premier add-ons of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569629 = newJObject()
  var query_569630 = newJObject()
  add(path_569629, "resourceGroupName", newJString(resourceGroupName))
  add(query_569630, "api-version", newJString(apiVersion))
  add(path_569629, "name", newJString(name))
  add(path_569629, "subscriptionId", newJString(subscriptionId))
  result = call_569628.call(path_569629, query_569630, nil, nil, nil)

var webAppsListPremierAddOns* = Call_WebAppsListPremierAddOns_569620(
    name: "webAppsListPremierAddOns", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
    validator: validate_WebAppsListPremierAddOns_569621, base: "",
    url: url_WebAppsListPremierAddOns_569622, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOn_569643 = ref object of OpenApiRestCall_567666
proc url_WebAppsAddPremierAddOn_569645(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOn_569644(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569646 = path.getOrDefault("resourceGroupName")
  valid_569646 = validateParameter(valid_569646, JString, required = true,
                                 default = nil)
  if valid_569646 != nil:
    section.add "resourceGroupName", valid_569646
  var valid_569647 = path.getOrDefault("name")
  valid_569647 = validateParameter(valid_569647, JString, required = true,
                                 default = nil)
  if valid_569647 != nil:
    section.add "name", valid_569647
  var valid_569648 = path.getOrDefault("subscriptionId")
  valid_569648 = validateParameter(valid_569648, JString, required = true,
                                 default = nil)
  if valid_569648 != nil:
    section.add "subscriptionId", valid_569648
  var valid_569649 = path.getOrDefault("premierAddOnName")
  valid_569649 = validateParameter(valid_569649, JString, required = true,
                                 default = nil)
  if valid_569649 != nil:
    section.add "premierAddOnName", valid_569649
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569650 = query.getOrDefault("api-version")
  valid_569650 = validateParameter(valid_569650, JString, required = true,
                                 default = nil)
  if valid_569650 != nil:
    section.add "api-version", valid_569650
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569652: Call_WebAppsAddPremierAddOn_569643; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_569652.validator(path, query, header, formData, body)
  let scheme = call_569652.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569652.url(scheme.get, call_569652.host, call_569652.base,
                         call_569652.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569652, url, valid)

proc call*(call_569653: Call_WebAppsAddPremierAddOn_569643;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsAddPremierAddOn
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_569654 = newJObject()
  var query_569655 = newJObject()
  var body_569656 = newJObject()
  add(path_569654, "resourceGroupName", newJString(resourceGroupName))
  add(query_569655, "api-version", newJString(apiVersion))
  add(path_569654, "name", newJString(name))
  if premierAddOn != nil:
    body_569656 = premierAddOn
  add(path_569654, "subscriptionId", newJString(subscriptionId))
  add(path_569654, "premierAddOnName", newJString(premierAddOnName))
  result = call_569653.call(path_569654, query_569655, nil, nil, body_569656)

var webAppsAddPremierAddOn* = Call_WebAppsAddPremierAddOn_569643(
    name: "webAppsAddPremierAddOn", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOn_569644, base: "",
    url: url_WebAppsAddPremierAddOn_569645, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOn_569631 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetPremierAddOn_569633(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOn_569632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569634 = path.getOrDefault("resourceGroupName")
  valid_569634 = validateParameter(valid_569634, JString, required = true,
                                 default = nil)
  if valid_569634 != nil:
    section.add "resourceGroupName", valid_569634
  var valid_569635 = path.getOrDefault("name")
  valid_569635 = validateParameter(valid_569635, JString, required = true,
                                 default = nil)
  if valid_569635 != nil:
    section.add "name", valid_569635
  var valid_569636 = path.getOrDefault("subscriptionId")
  valid_569636 = validateParameter(valid_569636, JString, required = true,
                                 default = nil)
  if valid_569636 != nil:
    section.add "subscriptionId", valid_569636
  var valid_569637 = path.getOrDefault("premierAddOnName")
  valid_569637 = validateParameter(valid_569637, JString, required = true,
                                 default = nil)
  if valid_569637 != nil:
    section.add "premierAddOnName", valid_569637
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569638 = query.getOrDefault("api-version")
  valid_569638 = validateParameter(valid_569638, JString, required = true,
                                 default = nil)
  if valid_569638 != nil:
    section.add "api-version", valid_569638
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569639: Call_WebAppsGetPremierAddOn_569631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_569639.validator(path, query, header, formData, body)
  let scheme = call_569639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569639.url(scheme.get, call_569639.host, call_569639.base,
                         call_569639.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569639, url, valid)

proc call*(call_569640: Call_WebAppsGetPremierAddOn_569631;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsGetPremierAddOn
  ## Gets a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_569641 = newJObject()
  var query_569642 = newJObject()
  add(path_569641, "resourceGroupName", newJString(resourceGroupName))
  add(query_569642, "api-version", newJString(apiVersion))
  add(path_569641, "name", newJString(name))
  add(path_569641, "subscriptionId", newJString(subscriptionId))
  add(path_569641, "premierAddOnName", newJString(premierAddOnName))
  result = call_569640.call(path_569641, query_569642, nil, nil, nil)

var webAppsGetPremierAddOn* = Call_WebAppsGetPremierAddOn_569631(
    name: "webAppsGetPremierAddOn", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOn_569632, base: "",
    url: url_WebAppsGetPremierAddOn_569633, schemes: {Scheme.Https})
type
  Call_WebAppsUpdatePremierAddOn_569669 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdatePremierAddOn_569671(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdatePremierAddOn_569670(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569672 = path.getOrDefault("resourceGroupName")
  valid_569672 = validateParameter(valid_569672, JString, required = true,
                                 default = nil)
  if valid_569672 != nil:
    section.add "resourceGroupName", valid_569672
  var valid_569673 = path.getOrDefault("name")
  valid_569673 = validateParameter(valid_569673, JString, required = true,
                                 default = nil)
  if valid_569673 != nil:
    section.add "name", valid_569673
  var valid_569674 = path.getOrDefault("subscriptionId")
  valid_569674 = validateParameter(valid_569674, JString, required = true,
                                 default = nil)
  if valid_569674 != nil:
    section.add "subscriptionId", valid_569674
  var valid_569675 = path.getOrDefault("premierAddOnName")
  valid_569675 = validateParameter(valid_569675, JString, required = true,
                                 default = nil)
  if valid_569675 != nil:
    section.add "premierAddOnName", valid_569675
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569676 = query.getOrDefault("api-version")
  valid_569676 = validateParameter(valid_569676, JString, required = true,
                                 default = nil)
  if valid_569676 != nil:
    section.add "api-version", valid_569676
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569678: Call_WebAppsUpdatePremierAddOn_569669; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_569678.validator(path, query, header, formData, body)
  let scheme = call_569678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569678.url(scheme.get, call_569678.host, call_569678.base,
                         call_569678.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569678, url, valid)

proc call*(call_569679: Call_WebAppsUpdatePremierAddOn_569669;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsUpdatePremierAddOn
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_569680 = newJObject()
  var query_569681 = newJObject()
  var body_569682 = newJObject()
  add(path_569680, "resourceGroupName", newJString(resourceGroupName))
  add(query_569681, "api-version", newJString(apiVersion))
  add(path_569680, "name", newJString(name))
  if premierAddOn != nil:
    body_569682 = premierAddOn
  add(path_569680, "subscriptionId", newJString(subscriptionId))
  add(path_569680, "premierAddOnName", newJString(premierAddOnName))
  result = call_569679.call(path_569680, query_569681, nil, nil, body_569682)

var webAppsUpdatePremierAddOn* = Call_WebAppsUpdatePremierAddOn_569669(
    name: "webAppsUpdatePremierAddOn", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsUpdatePremierAddOn_569670, base: "",
    url: url_WebAppsUpdatePremierAddOn_569671, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOn_569657 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeletePremierAddOn_569659(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOn_569658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569660 = path.getOrDefault("resourceGroupName")
  valid_569660 = validateParameter(valid_569660, JString, required = true,
                                 default = nil)
  if valid_569660 != nil:
    section.add "resourceGroupName", valid_569660
  var valid_569661 = path.getOrDefault("name")
  valid_569661 = validateParameter(valid_569661, JString, required = true,
                                 default = nil)
  if valid_569661 != nil:
    section.add "name", valid_569661
  var valid_569662 = path.getOrDefault("subscriptionId")
  valid_569662 = validateParameter(valid_569662, JString, required = true,
                                 default = nil)
  if valid_569662 != nil:
    section.add "subscriptionId", valid_569662
  var valid_569663 = path.getOrDefault("premierAddOnName")
  valid_569663 = validateParameter(valid_569663, JString, required = true,
                                 default = nil)
  if valid_569663 != nil:
    section.add "premierAddOnName", valid_569663
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569664 = query.getOrDefault("api-version")
  valid_569664 = validateParameter(valid_569664, JString, required = true,
                                 default = nil)
  if valid_569664 != nil:
    section.add "api-version", valid_569664
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569665: Call_WebAppsDeletePremierAddOn_569657; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_569665.validator(path, query, header, formData, body)
  let scheme = call_569665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569665.url(scheme.get, call_569665.host, call_569665.base,
                         call_569665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569665, url, valid)

proc call*(call_569666: Call_WebAppsDeletePremierAddOn_569657;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsDeletePremierAddOn
  ## Delete a premier add-on from an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_569667 = newJObject()
  var query_569668 = newJObject()
  add(path_569667, "resourceGroupName", newJString(resourceGroupName))
  add(query_569668, "api-version", newJString(apiVersion))
  add(path_569667, "name", newJString(name))
  add(path_569667, "subscriptionId", newJString(subscriptionId))
  add(path_569667, "premierAddOnName", newJString(premierAddOnName))
  result = call_569666.call(path_569667, query_569668, nil, nil, nil)

var webAppsDeletePremierAddOn* = Call_WebAppsDeletePremierAddOn_569657(
    name: "webAppsDeletePremierAddOn", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOn_569658, base: "",
    url: url_WebAppsDeletePremierAddOn_569659, schemes: {Scheme.Https})
type
  Call_WebAppsPutPrivateAccessVnet_569694 = ref object of OpenApiRestCall_567666
proc url_WebAppsPutPrivateAccessVnet_569696(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsPutPrivateAccessVnet_569695(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569697 = path.getOrDefault("resourceGroupName")
  valid_569697 = validateParameter(valid_569697, JString, required = true,
                                 default = nil)
  if valid_569697 != nil:
    section.add "resourceGroupName", valid_569697
  var valid_569698 = path.getOrDefault("name")
  valid_569698 = validateParameter(valid_569698, JString, required = true,
                                 default = nil)
  if valid_569698 != nil:
    section.add "name", valid_569698
  var valid_569699 = path.getOrDefault("subscriptionId")
  valid_569699 = validateParameter(valid_569699, JString, required = true,
                                 default = nil)
  if valid_569699 != nil:
    section.add "subscriptionId", valid_569699
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569700 = query.getOrDefault("api-version")
  valid_569700 = validateParameter(valid_569700, JString, required = true,
                                 default = nil)
  if valid_569700 != nil:
    section.add "api-version", valid_569700
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   access: JObject (required)
  ##         : The information for the private access
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569702: Call_WebAppsPutPrivateAccessVnet_569694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_569702.validator(path, query, header, formData, body)
  let scheme = call_569702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569702.url(scheme.get, call_569702.host, call_569702.base,
                         call_569702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569702, url, valid)

proc call*(call_569703: Call_WebAppsPutPrivateAccessVnet_569694;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; access: JsonNode): Recallable =
  ## webAppsPutPrivateAccessVnet
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   access: JObject (required)
  ##         : The information for the private access
  var path_569704 = newJObject()
  var query_569705 = newJObject()
  var body_569706 = newJObject()
  add(path_569704, "resourceGroupName", newJString(resourceGroupName))
  add(query_569705, "api-version", newJString(apiVersion))
  add(path_569704, "name", newJString(name))
  add(path_569704, "subscriptionId", newJString(subscriptionId))
  if access != nil:
    body_569706 = access
  result = call_569703.call(path_569704, query_569705, nil, nil, body_569706)

var webAppsPutPrivateAccessVnet* = Call_WebAppsPutPrivateAccessVnet_569694(
    name: "webAppsPutPrivateAccessVnet", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
    validator: validate_WebAppsPutPrivateAccessVnet_569695, base: "",
    url: url_WebAppsPutPrivateAccessVnet_569696, schemes: {Scheme.Https})
type
  Call_WebAppsGetPrivateAccess_569683 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetPrivateAccess_569685(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPrivateAccess_569684(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569686 = path.getOrDefault("resourceGroupName")
  valid_569686 = validateParameter(valid_569686, JString, required = true,
                                 default = nil)
  if valid_569686 != nil:
    section.add "resourceGroupName", valid_569686
  var valid_569687 = path.getOrDefault("name")
  valid_569687 = validateParameter(valid_569687, JString, required = true,
                                 default = nil)
  if valid_569687 != nil:
    section.add "name", valid_569687
  var valid_569688 = path.getOrDefault("subscriptionId")
  valid_569688 = validateParameter(valid_569688, JString, required = true,
                                 default = nil)
  if valid_569688 != nil:
    section.add "subscriptionId", valid_569688
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569689 = query.getOrDefault("api-version")
  valid_569689 = validateParameter(valid_569689, JString, required = true,
                                 default = nil)
  if valid_569689 != nil:
    section.add "api-version", valid_569689
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569690: Call_WebAppsGetPrivateAccess_569683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_569690.validator(path, query, header, formData, body)
  let scheme = call_569690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569690.url(scheme.get, call_569690.host, call_569690.base,
                         call_569690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569690, url, valid)

proc call*(call_569691: Call_WebAppsGetPrivateAccess_569683;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetPrivateAccess
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569692 = newJObject()
  var query_569693 = newJObject()
  add(path_569692, "resourceGroupName", newJString(resourceGroupName))
  add(query_569693, "api-version", newJString(apiVersion))
  add(path_569692, "name", newJString(name))
  add(path_569692, "subscriptionId", newJString(subscriptionId))
  result = call_569691.call(path_569692, query_569693, nil, nil, nil)

var webAppsGetPrivateAccess* = Call_WebAppsGetPrivateAccess_569683(
    name: "webAppsGetPrivateAccess", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
    validator: validate_WebAppsGetPrivateAccess_569684, base: "",
    url: url_WebAppsGetPrivateAccess_569685, schemes: {Scheme.Https})
type
  Call_WebAppsListProcesses_569707 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcesses_569709(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcesses_569708(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569710 = path.getOrDefault("resourceGroupName")
  valid_569710 = validateParameter(valid_569710, JString, required = true,
                                 default = nil)
  if valid_569710 != nil:
    section.add "resourceGroupName", valid_569710
  var valid_569711 = path.getOrDefault("name")
  valid_569711 = validateParameter(valid_569711, JString, required = true,
                                 default = nil)
  if valid_569711 != nil:
    section.add "name", valid_569711
  var valid_569712 = path.getOrDefault("subscriptionId")
  valid_569712 = validateParameter(valid_569712, JString, required = true,
                                 default = nil)
  if valid_569712 != nil:
    section.add "subscriptionId", valid_569712
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569713 = query.getOrDefault("api-version")
  valid_569713 = validateParameter(valid_569713, JString, required = true,
                                 default = nil)
  if valid_569713 != nil:
    section.add "api-version", valid_569713
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569714: Call_WebAppsListProcesses_569707; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569714.validator(path, query, header, formData, body)
  let scheme = call_569714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569714.url(scheme.get, call_569714.host, call_569714.base,
                         call_569714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569714, url, valid)

proc call*(call_569715: Call_WebAppsListProcesses_569707;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListProcesses
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569716 = newJObject()
  var query_569717 = newJObject()
  add(path_569716, "resourceGroupName", newJString(resourceGroupName))
  add(query_569717, "api-version", newJString(apiVersion))
  add(path_569716, "name", newJString(name))
  add(path_569716, "subscriptionId", newJString(subscriptionId))
  result = call_569715.call(path_569716, query_569717, nil, nil, nil)

var webAppsListProcesses* = Call_WebAppsListProcesses_569707(
    name: "webAppsListProcesses", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes",
    validator: validate_WebAppsListProcesses_569708, base: "",
    url: url_WebAppsListProcesses_569709, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcess_569718 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcess_569720(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcess_569719(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569721 = path.getOrDefault("resourceGroupName")
  valid_569721 = validateParameter(valid_569721, JString, required = true,
                                 default = nil)
  if valid_569721 != nil:
    section.add "resourceGroupName", valid_569721
  var valid_569722 = path.getOrDefault("name")
  valid_569722 = validateParameter(valid_569722, JString, required = true,
                                 default = nil)
  if valid_569722 != nil:
    section.add "name", valid_569722
  var valid_569723 = path.getOrDefault("processId")
  valid_569723 = validateParameter(valid_569723, JString, required = true,
                                 default = nil)
  if valid_569723 != nil:
    section.add "processId", valid_569723
  var valid_569724 = path.getOrDefault("subscriptionId")
  valid_569724 = validateParameter(valid_569724, JString, required = true,
                                 default = nil)
  if valid_569724 != nil:
    section.add "subscriptionId", valid_569724
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569725 = query.getOrDefault("api-version")
  valid_569725 = validateParameter(valid_569725, JString, required = true,
                                 default = nil)
  if valid_569725 != nil:
    section.add "api-version", valid_569725
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569726: Call_WebAppsGetProcess_569718; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569726.validator(path, query, header, formData, body)
  let scheme = call_569726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569726.url(scheme.get, call_569726.host, call_569726.base,
                         call_569726.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569726, url, valid)

proc call*(call_569727: Call_WebAppsGetProcess_569718; resourceGroupName: string;
          apiVersion: string; name: string; processId: string; subscriptionId: string): Recallable =
  ## webAppsGetProcess
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569728 = newJObject()
  var query_569729 = newJObject()
  add(path_569728, "resourceGroupName", newJString(resourceGroupName))
  add(query_569729, "api-version", newJString(apiVersion))
  add(path_569728, "name", newJString(name))
  add(path_569728, "processId", newJString(processId))
  add(path_569728, "subscriptionId", newJString(subscriptionId))
  result = call_569727.call(path_569728, query_569729, nil, nil, nil)

var webAppsGetProcess* = Call_WebAppsGetProcess_569718(name: "webAppsGetProcess",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsGetProcess_569719, base: "",
    url: url_WebAppsGetProcess_569720, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcess_569730 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteProcess_569732(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcess_569731(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569733 = path.getOrDefault("resourceGroupName")
  valid_569733 = validateParameter(valid_569733, JString, required = true,
                                 default = nil)
  if valid_569733 != nil:
    section.add "resourceGroupName", valid_569733
  var valid_569734 = path.getOrDefault("name")
  valid_569734 = validateParameter(valid_569734, JString, required = true,
                                 default = nil)
  if valid_569734 != nil:
    section.add "name", valid_569734
  var valid_569735 = path.getOrDefault("processId")
  valid_569735 = validateParameter(valid_569735, JString, required = true,
                                 default = nil)
  if valid_569735 != nil:
    section.add "processId", valid_569735
  var valid_569736 = path.getOrDefault("subscriptionId")
  valid_569736 = validateParameter(valid_569736, JString, required = true,
                                 default = nil)
  if valid_569736 != nil:
    section.add "subscriptionId", valid_569736
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569737 = query.getOrDefault("api-version")
  valid_569737 = validateParameter(valid_569737, JString, required = true,
                                 default = nil)
  if valid_569737 != nil:
    section.add "api-version", valid_569737
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569738: Call_WebAppsDeleteProcess_569730; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_569738.validator(path, query, header, formData, body)
  let scheme = call_569738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569738.url(scheme.get, call_569738.host, call_569738.base,
                         call_569738.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569738, url, valid)

proc call*(call_569739: Call_WebAppsDeleteProcess_569730;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsDeleteProcess
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569740 = newJObject()
  var query_569741 = newJObject()
  add(path_569740, "resourceGroupName", newJString(resourceGroupName))
  add(query_569741, "api-version", newJString(apiVersion))
  add(path_569740, "name", newJString(name))
  add(path_569740, "processId", newJString(processId))
  add(path_569740, "subscriptionId", newJString(subscriptionId))
  result = call_569739.call(path_569740, query_569741, nil, nil, nil)

var webAppsDeleteProcess* = Call_WebAppsDeleteProcess_569730(
    name: "webAppsDeleteProcess", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    validator: validate_WebAppsDeleteProcess_569731, base: "",
    url: url_WebAppsDeleteProcess_569732, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDump_569742 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessDump_569744(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDump_569743(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569745 = path.getOrDefault("resourceGroupName")
  valid_569745 = validateParameter(valid_569745, JString, required = true,
                                 default = nil)
  if valid_569745 != nil:
    section.add "resourceGroupName", valid_569745
  var valid_569746 = path.getOrDefault("name")
  valid_569746 = validateParameter(valid_569746, JString, required = true,
                                 default = nil)
  if valid_569746 != nil:
    section.add "name", valid_569746
  var valid_569747 = path.getOrDefault("processId")
  valid_569747 = validateParameter(valid_569747, JString, required = true,
                                 default = nil)
  if valid_569747 != nil:
    section.add "processId", valid_569747
  var valid_569748 = path.getOrDefault("subscriptionId")
  valid_569748 = validateParameter(valid_569748, JString, required = true,
                                 default = nil)
  if valid_569748 != nil:
    section.add "subscriptionId", valid_569748
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569749 = query.getOrDefault("api-version")
  valid_569749 = validateParameter(valid_569749, JString, required = true,
                                 default = nil)
  if valid_569749 != nil:
    section.add "api-version", valid_569749
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569750: Call_WebAppsGetProcessDump_569742; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569750.validator(path, query, header, formData, body)
  let scheme = call_569750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569750.url(scheme.get, call_569750.host, call_569750.base,
                         call_569750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569750, url, valid)

proc call*(call_569751: Call_WebAppsGetProcessDump_569742;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessDump
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569752 = newJObject()
  var query_569753 = newJObject()
  add(path_569752, "resourceGroupName", newJString(resourceGroupName))
  add(query_569753, "api-version", newJString(apiVersion))
  add(path_569752, "name", newJString(name))
  add(path_569752, "processId", newJString(processId))
  add(path_569752, "subscriptionId", newJString(subscriptionId))
  result = call_569751.call(path_569752, query_569753, nil, nil, nil)

var webAppsGetProcessDump* = Call_WebAppsGetProcessDump_569742(
    name: "webAppsGetProcessDump", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDump_569743, base: "",
    url: url_WebAppsGetProcessDump_569744, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModules_569754 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcessModules_569756(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModules_569755(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569757 = path.getOrDefault("resourceGroupName")
  valid_569757 = validateParameter(valid_569757, JString, required = true,
                                 default = nil)
  if valid_569757 != nil:
    section.add "resourceGroupName", valid_569757
  var valid_569758 = path.getOrDefault("name")
  valid_569758 = validateParameter(valid_569758, JString, required = true,
                                 default = nil)
  if valid_569758 != nil:
    section.add "name", valid_569758
  var valid_569759 = path.getOrDefault("processId")
  valid_569759 = validateParameter(valid_569759, JString, required = true,
                                 default = nil)
  if valid_569759 != nil:
    section.add "processId", valid_569759
  var valid_569760 = path.getOrDefault("subscriptionId")
  valid_569760 = validateParameter(valid_569760, JString, required = true,
                                 default = nil)
  if valid_569760 != nil:
    section.add "subscriptionId", valid_569760
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569761 = query.getOrDefault("api-version")
  valid_569761 = validateParameter(valid_569761, JString, required = true,
                                 default = nil)
  if valid_569761 != nil:
    section.add "api-version", valid_569761
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569762: Call_WebAppsListProcessModules_569754; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569762.validator(path, query, header, formData, body)
  let scheme = call_569762.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569762.url(scheme.get, call_569762.host, call_569762.base,
                         call_569762.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569762, url, valid)

proc call*(call_569763: Call_WebAppsListProcessModules_569754;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsListProcessModules
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569764 = newJObject()
  var query_569765 = newJObject()
  add(path_569764, "resourceGroupName", newJString(resourceGroupName))
  add(query_569765, "api-version", newJString(apiVersion))
  add(path_569764, "name", newJString(name))
  add(path_569764, "processId", newJString(processId))
  add(path_569764, "subscriptionId", newJString(subscriptionId))
  result = call_569763.call(path_569764, query_569765, nil, nil, nil)

var webAppsListProcessModules* = Call_WebAppsListProcessModules_569754(
    name: "webAppsListProcessModules", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModules_569755, base: "",
    url: url_WebAppsListProcessModules_569756, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModule_569766 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessModule_569768(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModule_569767(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569769 = path.getOrDefault("resourceGroupName")
  valid_569769 = validateParameter(valid_569769, JString, required = true,
                                 default = nil)
  if valid_569769 != nil:
    section.add "resourceGroupName", valid_569769
  var valid_569770 = path.getOrDefault("name")
  valid_569770 = validateParameter(valid_569770, JString, required = true,
                                 default = nil)
  if valid_569770 != nil:
    section.add "name", valid_569770
  var valid_569771 = path.getOrDefault("processId")
  valid_569771 = validateParameter(valid_569771, JString, required = true,
                                 default = nil)
  if valid_569771 != nil:
    section.add "processId", valid_569771
  var valid_569772 = path.getOrDefault("subscriptionId")
  valid_569772 = validateParameter(valid_569772, JString, required = true,
                                 default = nil)
  if valid_569772 != nil:
    section.add "subscriptionId", valid_569772
  var valid_569773 = path.getOrDefault("baseAddress")
  valid_569773 = validateParameter(valid_569773, JString, required = true,
                                 default = nil)
  if valid_569773 != nil:
    section.add "baseAddress", valid_569773
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569774 = query.getOrDefault("api-version")
  valid_569774 = validateParameter(valid_569774, JString, required = true,
                                 default = nil)
  if valid_569774 != nil:
    section.add "api-version", valid_569774
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569775: Call_WebAppsGetProcessModule_569766; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569775.validator(path, query, header, formData, body)
  let scheme = call_569775.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569775.url(scheme.get, call_569775.host, call_569775.base,
                         call_569775.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569775, url, valid)

proc call*(call_569776: Call_WebAppsGetProcessModule_569766;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModule
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_569777 = newJObject()
  var query_569778 = newJObject()
  add(path_569777, "resourceGroupName", newJString(resourceGroupName))
  add(query_569778, "api-version", newJString(apiVersion))
  add(path_569777, "name", newJString(name))
  add(path_569777, "processId", newJString(processId))
  add(path_569777, "subscriptionId", newJString(subscriptionId))
  add(path_569777, "baseAddress", newJString(baseAddress))
  result = call_569776.call(path_569777, query_569778, nil, nil, nil)

var webAppsGetProcessModule* = Call_WebAppsGetProcessModule_569766(
    name: "webAppsGetProcessModule", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModule_569767, base: "",
    url: url_WebAppsGetProcessModule_569768, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreads_569779 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcessThreads_569781(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreads_569780(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569782 = path.getOrDefault("resourceGroupName")
  valid_569782 = validateParameter(valid_569782, JString, required = true,
                                 default = nil)
  if valid_569782 != nil:
    section.add "resourceGroupName", valid_569782
  var valid_569783 = path.getOrDefault("name")
  valid_569783 = validateParameter(valid_569783, JString, required = true,
                                 default = nil)
  if valid_569783 != nil:
    section.add "name", valid_569783
  var valid_569784 = path.getOrDefault("processId")
  valid_569784 = validateParameter(valid_569784, JString, required = true,
                                 default = nil)
  if valid_569784 != nil:
    section.add "processId", valid_569784
  var valid_569785 = path.getOrDefault("subscriptionId")
  valid_569785 = validateParameter(valid_569785, JString, required = true,
                                 default = nil)
  if valid_569785 != nil:
    section.add "subscriptionId", valid_569785
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569786 = query.getOrDefault("api-version")
  valid_569786 = validateParameter(valid_569786, JString, required = true,
                                 default = nil)
  if valid_569786 != nil:
    section.add "api-version", valid_569786
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569787: Call_WebAppsListProcessThreads_569779; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_569787.validator(path, query, header, formData, body)
  let scheme = call_569787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569787.url(scheme.get, call_569787.host, call_569787.base,
                         call_569787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569787, url, valid)

proc call*(call_569788: Call_WebAppsListProcessThreads_569779;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string): Recallable =
  ## webAppsListProcessThreads
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569789 = newJObject()
  var query_569790 = newJObject()
  add(path_569789, "resourceGroupName", newJString(resourceGroupName))
  add(query_569790, "api-version", newJString(apiVersion))
  add(path_569789, "name", newJString(name))
  add(path_569789, "processId", newJString(processId))
  add(path_569789, "subscriptionId", newJString(subscriptionId))
  result = call_569788.call(path_569789, query_569790, nil, nil, nil)

var webAppsListProcessThreads* = Call_WebAppsListProcessThreads_569779(
    name: "webAppsListProcessThreads", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreads_569780, base: "",
    url: url_WebAppsListProcessThreads_569781, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThread_569791 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessThread_569793(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThread_569792(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569794 = path.getOrDefault("resourceGroupName")
  valid_569794 = validateParameter(valid_569794, JString, required = true,
                                 default = nil)
  if valid_569794 != nil:
    section.add "resourceGroupName", valid_569794
  var valid_569795 = path.getOrDefault("name")
  valid_569795 = validateParameter(valid_569795, JString, required = true,
                                 default = nil)
  if valid_569795 != nil:
    section.add "name", valid_569795
  var valid_569796 = path.getOrDefault("processId")
  valid_569796 = validateParameter(valid_569796, JString, required = true,
                                 default = nil)
  if valid_569796 != nil:
    section.add "processId", valid_569796
  var valid_569797 = path.getOrDefault("subscriptionId")
  valid_569797 = validateParameter(valid_569797, JString, required = true,
                                 default = nil)
  if valid_569797 != nil:
    section.add "subscriptionId", valid_569797
  var valid_569798 = path.getOrDefault("threadId")
  valid_569798 = validateParameter(valid_569798, JString, required = true,
                                 default = nil)
  if valid_569798 != nil:
    section.add "threadId", valid_569798
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569799 = query.getOrDefault("api-version")
  valid_569799 = validateParameter(valid_569799, JString, required = true,
                                 default = nil)
  if valid_569799 != nil:
    section.add "api-version", valid_569799
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569800: Call_WebAppsGetProcessThread_569791; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_569800.validator(path, query, header, formData, body)
  let scheme = call_569800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569800.url(scheme.get, call_569800.host, call_569800.base,
                         call_569800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569800, url, valid)

proc call*(call_569801: Call_WebAppsGetProcessThread_569791;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; subscriptionId: string; threadId: string): Recallable =
  ## webAppsGetProcessThread
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: string (required)
  ##           : TID.
  var path_569802 = newJObject()
  var query_569803 = newJObject()
  add(path_569802, "resourceGroupName", newJString(resourceGroupName))
  add(query_569803, "api-version", newJString(apiVersion))
  add(path_569802, "name", newJString(name))
  add(path_569802, "processId", newJString(processId))
  add(path_569802, "subscriptionId", newJString(subscriptionId))
  add(path_569802, "threadId", newJString(threadId))
  result = call_569801.call(path_569802, query_569803, nil, nil, nil)

var webAppsGetProcessThread* = Call_WebAppsGetProcessThread_569791(
    name: "webAppsGetProcessThread", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThread_569792, base: "",
    url: url_WebAppsGetProcessThread_569793, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificates_569804 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublicCertificates_569806(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificates_569805(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569807 = path.getOrDefault("resourceGroupName")
  valid_569807 = validateParameter(valid_569807, JString, required = true,
                                 default = nil)
  if valid_569807 != nil:
    section.add "resourceGroupName", valid_569807
  var valid_569808 = path.getOrDefault("name")
  valid_569808 = validateParameter(valid_569808, JString, required = true,
                                 default = nil)
  if valid_569808 != nil:
    section.add "name", valid_569808
  var valid_569809 = path.getOrDefault("subscriptionId")
  valid_569809 = validateParameter(valid_569809, JString, required = true,
                                 default = nil)
  if valid_569809 != nil:
    section.add "subscriptionId", valid_569809
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569810 = query.getOrDefault("api-version")
  valid_569810 = validateParameter(valid_569810, JString, required = true,
                                 default = nil)
  if valid_569810 != nil:
    section.add "api-version", valid_569810
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569811: Call_WebAppsListPublicCertificates_569804; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_569811.validator(path, query, header, formData, body)
  let scheme = call_569811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569811.url(scheme.get, call_569811.host, call_569811.base,
                         call_569811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569811, url, valid)

proc call*(call_569812: Call_WebAppsListPublicCertificates_569804;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublicCertificates
  ## Get public certificates for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569813 = newJObject()
  var query_569814 = newJObject()
  add(path_569813, "resourceGroupName", newJString(resourceGroupName))
  add(query_569814, "api-version", newJString(apiVersion))
  add(path_569813, "name", newJString(name))
  add(path_569813, "subscriptionId", newJString(subscriptionId))
  result = call_569812.call(path_569813, query_569814, nil, nil, nil)

var webAppsListPublicCertificates* = Call_WebAppsListPublicCertificates_569804(
    name: "webAppsListPublicCertificates", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates",
    validator: validate_WebAppsListPublicCertificates_569805, base: "",
    url: url_WebAppsListPublicCertificates_569806, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificate_569827 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdatePublicCertificate_569829(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificate_569828(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569830 = path.getOrDefault("resourceGroupName")
  valid_569830 = validateParameter(valid_569830, JString, required = true,
                                 default = nil)
  if valid_569830 != nil:
    section.add "resourceGroupName", valid_569830
  var valid_569831 = path.getOrDefault("name")
  valid_569831 = validateParameter(valid_569831, JString, required = true,
                                 default = nil)
  if valid_569831 != nil:
    section.add "name", valid_569831
  var valid_569832 = path.getOrDefault("subscriptionId")
  valid_569832 = validateParameter(valid_569832, JString, required = true,
                                 default = nil)
  if valid_569832 != nil:
    section.add "subscriptionId", valid_569832
  var valid_569833 = path.getOrDefault("publicCertificateName")
  valid_569833 = validateParameter(valid_569833, JString, required = true,
                                 default = nil)
  if valid_569833 != nil:
    section.add "publicCertificateName", valid_569833
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569834 = query.getOrDefault("api-version")
  valid_569834 = validateParameter(valid_569834, JString, required = true,
                                 default = nil)
  if valid_569834 != nil:
    section.add "api-version", valid_569834
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569836: Call_WebAppsCreateOrUpdatePublicCertificate_569827;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_569836.validator(path, query, header, formData, body)
  let scheme = call_569836.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569836.url(scheme.get, call_569836.host, call_569836.base,
                         call_569836.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569836, url, valid)

proc call*(call_569837: Call_WebAppsCreateOrUpdatePublicCertificate_569827;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificate
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_569838 = newJObject()
  var query_569839 = newJObject()
  var body_569840 = newJObject()
  add(path_569838, "resourceGroupName", newJString(resourceGroupName))
  add(query_569839, "api-version", newJString(apiVersion))
  add(path_569838, "name", newJString(name))
  add(path_569838, "subscriptionId", newJString(subscriptionId))
  add(path_569838, "publicCertificateName", newJString(publicCertificateName))
  if publicCertificate != nil:
    body_569840 = publicCertificate
  result = call_569837.call(path_569838, query_569839, nil, nil, body_569840)

var webAppsCreateOrUpdatePublicCertificate* = Call_WebAppsCreateOrUpdatePublicCertificate_569827(
    name: "webAppsCreateOrUpdatePublicCertificate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificate_569828, base: "",
    url: url_WebAppsCreateOrUpdatePublicCertificate_569829,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificate_569815 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetPublicCertificate_569817(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificate_569816(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569818 = path.getOrDefault("resourceGroupName")
  valid_569818 = validateParameter(valid_569818, JString, required = true,
                                 default = nil)
  if valid_569818 != nil:
    section.add "resourceGroupName", valid_569818
  var valid_569819 = path.getOrDefault("name")
  valid_569819 = validateParameter(valid_569819, JString, required = true,
                                 default = nil)
  if valid_569819 != nil:
    section.add "name", valid_569819
  var valid_569820 = path.getOrDefault("subscriptionId")
  valid_569820 = validateParameter(valid_569820, JString, required = true,
                                 default = nil)
  if valid_569820 != nil:
    section.add "subscriptionId", valid_569820
  var valid_569821 = path.getOrDefault("publicCertificateName")
  valid_569821 = validateParameter(valid_569821, JString, required = true,
                                 default = nil)
  if valid_569821 != nil:
    section.add "publicCertificateName", valid_569821
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569822 = query.getOrDefault("api-version")
  valid_569822 = validateParameter(valid_569822, JString, required = true,
                                 default = nil)
  if valid_569822 != nil:
    section.add "api-version", valid_569822
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569823: Call_WebAppsGetPublicCertificate_569815; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_569823.validator(path, query, header, formData, body)
  let scheme = call_569823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569823.url(scheme.get, call_569823.host, call_569823.base,
                         call_569823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569823, url, valid)

proc call*(call_569824: Call_WebAppsGetPublicCertificate_569815;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsGetPublicCertificate
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_569825 = newJObject()
  var query_569826 = newJObject()
  add(path_569825, "resourceGroupName", newJString(resourceGroupName))
  add(query_569826, "api-version", newJString(apiVersion))
  add(path_569825, "name", newJString(name))
  add(path_569825, "subscriptionId", newJString(subscriptionId))
  add(path_569825, "publicCertificateName", newJString(publicCertificateName))
  result = call_569824.call(path_569825, query_569826, nil, nil, nil)

var webAppsGetPublicCertificate* = Call_WebAppsGetPublicCertificate_569815(
    name: "webAppsGetPublicCertificate", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificate_569816, base: "",
    url: url_WebAppsGetPublicCertificate_569817, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificate_569841 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeletePublicCertificate_569843(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificate_569842(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569844 = path.getOrDefault("resourceGroupName")
  valid_569844 = validateParameter(valid_569844, JString, required = true,
                                 default = nil)
  if valid_569844 != nil:
    section.add "resourceGroupName", valid_569844
  var valid_569845 = path.getOrDefault("name")
  valid_569845 = validateParameter(valid_569845, JString, required = true,
                                 default = nil)
  if valid_569845 != nil:
    section.add "name", valid_569845
  var valid_569846 = path.getOrDefault("subscriptionId")
  valid_569846 = validateParameter(valid_569846, JString, required = true,
                                 default = nil)
  if valid_569846 != nil:
    section.add "subscriptionId", valid_569846
  var valid_569847 = path.getOrDefault("publicCertificateName")
  valid_569847 = validateParameter(valid_569847, JString, required = true,
                                 default = nil)
  if valid_569847 != nil:
    section.add "publicCertificateName", valid_569847
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569848 = query.getOrDefault("api-version")
  valid_569848 = validateParameter(valid_569848, JString, required = true,
                                 default = nil)
  if valid_569848 != nil:
    section.add "api-version", valid_569848
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569849: Call_WebAppsDeletePublicCertificate_569841; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_569849.validator(path, query, header, formData, body)
  let scheme = call_569849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569849.url(scheme.get, call_569849.host, call_569849.base,
                         call_569849.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569849, url, valid)

proc call*(call_569850: Call_WebAppsDeletePublicCertificate_569841;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsDeletePublicCertificate
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_569851 = newJObject()
  var query_569852 = newJObject()
  add(path_569851, "resourceGroupName", newJString(resourceGroupName))
  add(query_569852, "api-version", newJString(apiVersion))
  add(path_569851, "name", newJString(name))
  add(path_569851, "subscriptionId", newJString(subscriptionId))
  add(path_569851, "publicCertificateName", newJString(publicCertificateName))
  result = call_569850.call(path_569851, query_569852, nil, nil, nil)

var webAppsDeletePublicCertificate* = Call_WebAppsDeletePublicCertificate_569841(
    name: "webAppsDeletePublicCertificate", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificate_569842, base: "",
    url: url_WebAppsDeletePublicCertificate_569843, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecrets_569853 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublishingProfileXmlWithSecrets_569855(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecrets_569854(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569856 = path.getOrDefault("resourceGroupName")
  valid_569856 = validateParameter(valid_569856, JString, required = true,
                                 default = nil)
  if valid_569856 != nil:
    section.add "resourceGroupName", valid_569856
  var valid_569857 = path.getOrDefault("name")
  valid_569857 = validateParameter(valid_569857, JString, required = true,
                                 default = nil)
  if valid_569857 != nil:
    section.add "name", valid_569857
  var valid_569858 = path.getOrDefault("subscriptionId")
  valid_569858 = validateParameter(valid_569858, JString, required = true,
                                 default = nil)
  if valid_569858 != nil:
    section.add "subscriptionId", valid_569858
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569859 = query.getOrDefault("api-version")
  valid_569859 = validateParameter(valid_569859, JString, required = true,
                                 default = nil)
  if valid_569859 != nil:
    section.add "api-version", valid_569859
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569861: Call_WebAppsListPublishingProfileXmlWithSecrets_569853;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_569861.validator(path, query, header, formData, body)
  let scheme = call_569861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569861.url(scheme.get, call_569861.host, call_569861.base,
                         call_569861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569861, url, valid)

proc call*(call_569862: Call_WebAppsListPublishingProfileXmlWithSecrets_569853;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; publishingProfileOptions: JsonNode): Recallable =
  ## webAppsListPublishingProfileXmlWithSecrets
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  var path_569863 = newJObject()
  var query_569864 = newJObject()
  var body_569865 = newJObject()
  add(path_569863, "resourceGroupName", newJString(resourceGroupName))
  add(query_569864, "api-version", newJString(apiVersion))
  add(path_569863, "name", newJString(name))
  add(path_569863, "subscriptionId", newJString(subscriptionId))
  if publishingProfileOptions != nil:
    body_569865 = publishingProfileOptions
  result = call_569862.call(path_569863, query_569864, nil, nil, body_569865)

var webAppsListPublishingProfileXmlWithSecrets* = Call_WebAppsListPublishingProfileXmlWithSecrets_569853(
    name: "webAppsListPublishingProfileXmlWithSecrets", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecrets_569854,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecrets_569855,
    schemes: {Scheme.Https})
type
  Call_WebAppsResetProductionSlotConfig_569866 = ref object of OpenApiRestCall_567666
proc url_WebAppsResetProductionSlotConfig_569868(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetProductionSlotConfig_569867(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569869 = path.getOrDefault("resourceGroupName")
  valid_569869 = validateParameter(valid_569869, JString, required = true,
                                 default = nil)
  if valid_569869 != nil:
    section.add "resourceGroupName", valid_569869
  var valid_569870 = path.getOrDefault("name")
  valid_569870 = validateParameter(valid_569870, JString, required = true,
                                 default = nil)
  if valid_569870 != nil:
    section.add "name", valid_569870
  var valid_569871 = path.getOrDefault("subscriptionId")
  valid_569871 = validateParameter(valid_569871, JString, required = true,
                                 default = nil)
  if valid_569871 != nil:
    section.add "subscriptionId", valid_569871
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569872 = query.getOrDefault("api-version")
  valid_569872 = validateParameter(valid_569872, JString, required = true,
                                 default = nil)
  if valid_569872 != nil:
    section.add "api-version", valid_569872
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569873: Call_WebAppsResetProductionSlotConfig_569866;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_569873.validator(path, query, header, formData, body)
  let scheme = call_569873.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569873.url(scheme.get, call_569873.host, call_569873.base,
                         call_569873.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569873, url, valid)

proc call*(call_569874: Call_WebAppsResetProductionSlotConfig_569866;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsResetProductionSlotConfig
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569875 = newJObject()
  var query_569876 = newJObject()
  add(path_569875, "resourceGroupName", newJString(resourceGroupName))
  add(query_569876, "api-version", newJString(apiVersion))
  add(path_569875, "name", newJString(name))
  add(path_569875, "subscriptionId", newJString(subscriptionId))
  result = call_569874.call(path_569875, query_569876, nil, nil, nil)

var webAppsResetProductionSlotConfig* = Call_WebAppsResetProductionSlotConfig_569866(
    name: "webAppsResetProductionSlotConfig", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
    validator: validate_WebAppsResetProductionSlotConfig_569867, base: "",
    url: url_WebAppsResetProductionSlotConfig_569868, schemes: {Scheme.Https})
type
  Call_WebAppsRestart_569877 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestart_569879(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestart_569878(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569880 = path.getOrDefault("resourceGroupName")
  valid_569880 = validateParameter(valid_569880, JString, required = true,
                                 default = nil)
  if valid_569880 != nil:
    section.add "resourceGroupName", valid_569880
  var valid_569881 = path.getOrDefault("name")
  valid_569881 = validateParameter(valid_569881, JString, required = true,
                                 default = nil)
  if valid_569881 != nil:
    section.add "name", valid_569881
  var valid_569882 = path.getOrDefault("subscriptionId")
  valid_569882 = validateParameter(valid_569882, JString, required = true,
                                 default = nil)
  if valid_569882 != nil:
    section.add "subscriptionId", valid_569882
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569883 = query.getOrDefault("api-version")
  valid_569883 = validateParameter(valid_569883, JString, required = true,
                                 default = nil)
  if valid_569883 != nil:
    section.add "api-version", valid_569883
  var valid_569884 = query.getOrDefault("synchronous")
  valid_569884 = validateParameter(valid_569884, JBool, required = false, default = nil)
  if valid_569884 != nil:
    section.add "synchronous", valid_569884
  var valid_569885 = query.getOrDefault("softRestart")
  valid_569885 = validateParameter(valid_569885, JBool, required = false, default = nil)
  if valid_569885 != nil:
    section.add "softRestart", valid_569885
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569886: Call_WebAppsRestart_569877; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_569886.validator(path, query, header, formData, body)
  let scheme = call_569886.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569886.url(scheme.get, call_569886.host, call_569886.base,
                         call_569886.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569886, url, valid)

proc call*(call_569887: Call_WebAppsRestart_569877; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## webAppsRestart
  ## Restarts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_569888 = newJObject()
  var query_569889 = newJObject()
  add(path_569888, "resourceGroupName", newJString(resourceGroupName))
  add(query_569889, "api-version", newJString(apiVersion))
  add(path_569888, "name", newJString(name))
  add(path_569888, "subscriptionId", newJString(subscriptionId))
  add(query_569889, "synchronous", newJBool(synchronous))
  add(query_569889, "softRestart", newJBool(softRestart))
  result = call_569887.call(path_569888, query_569889, nil, nil, nil)

var webAppsRestart* = Call_WebAppsRestart_569877(name: "webAppsRestart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
    validator: validate_WebAppsRestart_569878, base: "", url: url_WebAppsRestart_569879,
    schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromBackupBlob_569890 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestoreFromBackupBlob_569892(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restoreFromBackupBlob")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromBackupBlob_569891(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569893 = path.getOrDefault("resourceGroupName")
  valid_569893 = validateParameter(valid_569893, JString, required = true,
                                 default = nil)
  if valid_569893 != nil:
    section.add "resourceGroupName", valid_569893
  var valid_569894 = path.getOrDefault("name")
  valid_569894 = validateParameter(valid_569894, JString, required = true,
                                 default = nil)
  if valid_569894 != nil:
    section.add "name", valid_569894
  var valid_569895 = path.getOrDefault("subscriptionId")
  valid_569895 = validateParameter(valid_569895, JString, required = true,
                                 default = nil)
  if valid_569895 != nil:
    section.add "subscriptionId", valid_569895
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569896 = query.getOrDefault("api-version")
  valid_569896 = validateParameter(valid_569896, JString, required = true,
                                 default = nil)
  if valid_569896 != nil:
    section.add "api-version", valid_569896
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569898: Call_WebAppsRestoreFromBackupBlob_569890; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  let valid = call_569898.validator(path, query, header, formData, body)
  let scheme = call_569898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569898.url(scheme.get, call_569898.host, call_569898.base,
                         call_569898.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569898, url, valid)

proc call*(call_569899: Call_WebAppsRestoreFromBackupBlob_569890;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsRestoreFromBackupBlob
  ## Restores an app from a backup blob in Azure Storage.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  var path_569900 = newJObject()
  var query_569901 = newJObject()
  var body_569902 = newJObject()
  add(path_569900, "resourceGroupName", newJString(resourceGroupName))
  add(query_569901, "api-version", newJString(apiVersion))
  add(path_569900, "name", newJString(name))
  add(path_569900, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_569902 = request
  result = call_569899.call(path_569900, query_569901, nil, nil, body_569902)

var webAppsRestoreFromBackupBlob* = Call_WebAppsRestoreFromBackupBlob_569890(
    name: "webAppsRestoreFromBackupBlob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob",
    validator: validate_WebAppsRestoreFromBackupBlob_569891, base: "",
    url: url_WebAppsRestoreFromBackupBlob_569892, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromDeletedApp_569903 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestoreFromDeletedApp_569905(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restoreFromDeletedApp")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromDeletedApp_569904(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a deleted web app to this web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569906 = path.getOrDefault("resourceGroupName")
  valid_569906 = validateParameter(valid_569906, JString, required = true,
                                 default = nil)
  if valid_569906 != nil:
    section.add "resourceGroupName", valid_569906
  var valid_569907 = path.getOrDefault("name")
  valid_569907 = validateParameter(valid_569907, JString, required = true,
                                 default = nil)
  if valid_569907 != nil:
    section.add "name", valid_569907
  var valid_569908 = path.getOrDefault("subscriptionId")
  valid_569908 = validateParameter(valid_569908, JString, required = true,
                                 default = nil)
  if valid_569908 != nil:
    section.add "subscriptionId", valid_569908
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569909 = query.getOrDefault("api-version")
  valid_569909 = validateParameter(valid_569909, JString, required = true,
                                 default = nil)
  if valid_569909 != nil:
    section.add "api-version", valid_569909
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569911: Call_WebAppsRestoreFromDeletedApp_569903; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a deleted web app to this web app.
  ## 
  let valid = call_569911.validator(path, query, header, formData, body)
  let scheme = call_569911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569911.url(scheme.get, call_569911.host, call_569911.base,
                         call_569911.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569911, url, valid)

proc call*(call_569912: Call_WebAppsRestoreFromDeletedApp_569903;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; restoreRequest: JsonNode): Recallable =
  ## webAppsRestoreFromDeletedApp
  ## Restores a deleted web app to this web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  var path_569913 = newJObject()
  var query_569914 = newJObject()
  var body_569915 = newJObject()
  add(path_569913, "resourceGroupName", newJString(resourceGroupName))
  add(query_569914, "api-version", newJString(apiVersion))
  add(path_569913, "name", newJString(name))
  add(path_569913, "subscriptionId", newJString(subscriptionId))
  if restoreRequest != nil:
    body_569915 = restoreRequest
  result = call_569912.call(path_569913, query_569914, nil, nil, body_569915)

var webAppsRestoreFromDeletedApp* = Call_WebAppsRestoreFromDeletedApp_569903(
    name: "webAppsRestoreFromDeletedApp", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp",
    validator: validate_WebAppsRestoreFromDeletedApp_569904, base: "",
    url: url_WebAppsRestoreFromDeletedApp_569905, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSnapshot_569916 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestoreSnapshot_569918(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/restoreSnapshot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSnapshot_569917(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app from a snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569919 = path.getOrDefault("resourceGroupName")
  valid_569919 = validateParameter(valid_569919, JString, required = true,
                                 default = nil)
  if valid_569919 != nil:
    section.add "resourceGroupName", valid_569919
  var valid_569920 = path.getOrDefault("name")
  valid_569920 = validateParameter(valid_569920, JString, required = true,
                                 default = nil)
  if valid_569920 != nil:
    section.add "name", valid_569920
  var valid_569921 = path.getOrDefault("subscriptionId")
  valid_569921 = validateParameter(valid_569921, JString, required = true,
                                 default = nil)
  if valid_569921 != nil:
    section.add "subscriptionId", valid_569921
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569922 = query.getOrDefault("api-version")
  valid_569922 = validateParameter(valid_569922, JString, required = true,
                                 default = nil)
  if valid_569922 != nil:
    section.add "api-version", valid_569922
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_569924: Call_WebAppsRestoreSnapshot_569916; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app from a snapshot.
  ## 
  let valid = call_569924.validator(path, query, header, formData, body)
  let scheme = call_569924.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569924.url(scheme.get, call_569924.host, call_569924.base,
                         call_569924.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569924, url, valid)

proc call*(call_569925: Call_WebAppsRestoreSnapshot_569916;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; restoreRequest: JsonNode): Recallable =
  ## webAppsRestoreSnapshot
  ## Restores a web app from a snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_569926 = newJObject()
  var query_569927 = newJObject()
  var body_569928 = newJObject()
  add(path_569926, "resourceGroupName", newJString(resourceGroupName))
  add(query_569927, "api-version", newJString(apiVersion))
  add(path_569926, "name", newJString(name))
  add(path_569926, "subscriptionId", newJString(subscriptionId))
  if restoreRequest != nil:
    body_569928 = restoreRequest
  result = call_569925.call(path_569926, query_569927, nil, nil, body_569928)

var webAppsRestoreSnapshot* = Call_WebAppsRestoreSnapshot_569916(
    name: "webAppsRestoreSnapshot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot",
    validator: validate_WebAppsRestoreSnapshot_569917, base: "",
    url: url_WebAppsRestoreSnapshot_569918, schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensions_569929 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSiteExtensions_569931(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensions_569930(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569932 = path.getOrDefault("resourceGroupName")
  valid_569932 = validateParameter(valid_569932, JString, required = true,
                                 default = nil)
  if valid_569932 != nil:
    section.add "resourceGroupName", valid_569932
  var valid_569933 = path.getOrDefault("name")
  valid_569933 = validateParameter(valid_569933, JString, required = true,
                                 default = nil)
  if valid_569933 != nil:
    section.add "name", valid_569933
  var valid_569934 = path.getOrDefault("subscriptionId")
  valid_569934 = validateParameter(valid_569934, JString, required = true,
                                 default = nil)
  if valid_569934 != nil:
    section.add "subscriptionId", valid_569934
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569935 = query.getOrDefault("api-version")
  valid_569935 = validateParameter(valid_569935, JString, required = true,
                                 default = nil)
  if valid_569935 != nil:
    section.add "api-version", valid_569935
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569936: Call_WebAppsListSiteExtensions_569929; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  let valid = call_569936.validator(path, query, header, formData, body)
  let scheme = call_569936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569936.url(scheme.get, call_569936.host, call_569936.base,
                         call_569936.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569936, url, valid)

proc call*(call_569937: Call_WebAppsListSiteExtensions_569929;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSiteExtensions
  ## Get list of siteextensions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569938 = newJObject()
  var query_569939 = newJObject()
  add(path_569938, "resourceGroupName", newJString(resourceGroupName))
  add(query_569939, "api-version", newJString(apiVersion))
  add(path_569938, "name", newJString(name))
  add(path_569938, "subscriptionId", newJString(subscriptionId))
  result = call_569937.call(path_569938, query_569939, nil, nil, nil)

var webAppsListSiteExtensions* = Call_WebAppsListSiteExtensions_569929(
    name: "webAppsListSiteExtensions", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions",
    validator: validate_WebAppsListSiteExtensions_569930, base: "",
    url: url_WebAppsListSiteExtensions_569931, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtension_569952 = ref object of OpenApiRestCall_567666
proc url_WebAppsInstallSiteExtension_569954(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtension_569953(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569955 = path.getOrDefault("resourceGroupName")
  valid_569955 = validateParameter(valid_569955, JString, required = true,
                                 default = nil)
  if valid_569955 != nil:
    section.add "resourceGroupName", valid_569955
  var valid_569956 = path.getOrDefault("name")
  valid_569956 = validateParameter(valid_569956, JString, required = true,
                                 default = nil)
  if valid_569956 != nil:
    section.add "name", valid_569956
  var valid_569957 = path.getOrDefault("subscriptionId")
  valid_569957 = validateParameter(valid_569957, JString, required = true,
                                 default = nil)
  if valid_569957 != nil:
    section.add "subscriptionId", valid_569957
  var valid_569958 = path.getOrDefault("siteExtensionId")
  valid_569958 = validateParameter(valid_569958, JString, required = true,
                                 default = nil)
  if valid_569958 != nil:
    section.add "siteExtensionId", valid_569958
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569959 = query.getOrDefault("api-version")
  valid_569959 = validateParameter(valid_569959, JString, required = true,
                                 default = nil)
  if valid_569959 != nil:
    section.add "api-version", valid_569959
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569960: Call_WebAppsInstallSiteExtension_569952; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_569960.validator(path, query, header, formData, body)
  let scheme = call_569960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569960.url(scheme.get, call_569960.host, call_569960.base,
                         call_569960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569960, url, valid)

proc call*(call_569961: Call_WebAppsInstallSiteExtension_569952;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtension
  ## Install site extension on a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_569962 = newJObject()
  var query_569963 = newJObject()
  add(path_569962, "resourceGroupName", newJString(resourceGroupName))
  add(query_569963, "api-version", newJString(apiVersion))
  add(path_569962, "name", newJString(name))
  add(path_569962, "subscriptionId", newJString(subscriptionId))
  add(path_569962, "siteExtensionId", newJString(siteExtensionId))
  result = call_569961.call(path_569962, query_569963, nil, nil, nil)

var webAppsInstallSiteExtension* = Call_WebAppsInstallSiteExtension_569952(
    name: "webAppsInstallSiteExtension", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtension_569953, base: "",
    url: url_WebAppsInstallSiteExtension_569954, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtension_569940 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSiteExtension_569942(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtension_569941(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569943 = path.getOrDefault("resourceGroupName")
  valid_569943 = validateParameter(valid_569943, JString, required = true,
                                 default = nil)
  if valid_569943 != nil:
    section.add "resourceGroupName", valid_569943
  var valid_569944 = path.getOrDefault("name")
  valid_569944 = validateParameter(valid_569944, JString, required = true,
                                 default = nil)
  if valid_569944 != nil:
    section.add "name", valid_569944
  var valid_569945 = path.getOrDefault("subscriptionId")
  valid_569945 = validateParameter(valid_569945, JString, required = true,
                                 default = nil)
  if valid_569945 != nil:
    section.add "subscriptionId", valid_569945
  var valid_569946 = path.getOrDefault("siteExtensionId")
  valid_569946 = validateParameter(valid_569946, JString, required = true,
                                 default = nil)
  if valid_569946 != nil:
    section.add "siteExtensionId", valid_569946
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569947 = query.getOrDefault("api-version")
  valid_569947 = validateParameter(valid_569947, JString, required = true,
                                 default = nil)
  if valid_569947 != nil:
    section.add "api-version", valid_569947
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569948: Call_WebAppsGetSiteExtension_569940; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_569948.validator(path, query, header, formData, body)
  let scheme = call_569948.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569948.url(scheme.get, call_569948.host, call_569948.base,
                         call_569948.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569948, url, valid)

proc call*(call_569949: Call_WebAppsGetSiteExtension_569940;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtension
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_569950 = newJObject()
  var query_569951 = newJObject()
  add(path_569950, "resourceGroupName", newJString(resourceGroupName))
  add(query_569951, "api-version", newJString(apiVersion))
  add(path_569950, "name", newJString(name))
  add(path_569950, "subscriptionId", newJString(subscriptionId))
  add(path_569950, "siteExtensionId", newJString(siteExtensionId))
  result = call_569949.call(path_569950, query_569951, nil, nil, nil)

var webAppsGetSiteExtension* = Call_WebAppsGetSiteExtension_569940(
    name: "webAppsGetSiteExtension", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtension_569941, base: "",
    url: url_WebAppsGetSiteExtension_569942, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtension_569964 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSiteExtension_569966(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtension_569965(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569967 = path.getOrDefault("resourceGroupName")
  valid_569967 = validateParameter(valid_569967, JString, required = true,
                                 default = nil)
  if valid_569967 != nil:
    section.add "resourceGroupName", valid_569967
  var valid_569968 = path.getOrDefault("name")
  valid_569968 = validateParameter(valid_569968, JString, required = true,
                                 default = nil)
  if valid_569968 != nil:
    section.add "name", valid_569968
  var valid_569969 = path.getOrDefault("subscriptionId")
  valid_569969 = validateParameter(valid_569969, JString, required = true,
                                 default = nil)
  if valid_569969 != nil:
    section.add "subscriptionId", valid_569969
  var valid_569970 = path.getOrDefault("siteExtensionId")
  valid_569970 = validateParameter(valid_569970, JString, required = true,
                                 default = nil)
  if valid_569970 != nil:
    section.add "siteExtensionId", valid_569970
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569971 = query.getOrDefault("api-version")
  valid_569971 = validateParameter(valid_569971, JString, required = true,
                                 default = nil)
  if valid_569971 != nil:
    section.add "api-version", valid_569971
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569972: Call_WebAppsDeleteSiteExtension_569964; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_569972.validator(path, query, header, formData, body)
  let scheme = call_569972.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569972.url(scheme.get, call_569972.host, call_569972.base,
                         call_569972.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569972, url, valid)

proc call*(call_569973: Call_WebAppsDeleteSiteExtension_569964;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtension
  ## Remove a site extension from a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_569974 = newJObject()
  var query_569975 = newJObject()
  add(path_569974, "resourceGroupName", newJString(resourceGroupName))
  add(query_569975, "api-version", newJString(apiVersion))
  add(path_569974, "name", newJString(name))
  add(path_569974, "subscriptionId", newJString(subscriptionId))
  add(path_569974, "siteExtensionId", newJString(siteExtensionId))
  result = call_569973.call(path_569974, query_569975, nil, nil, nil)

var webAppsDeleteSiteExtension* = Call_WebAppsDeleteSiteExtension_569964(
    name: "webAppsDeleteSiteExtension", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtension_569965, base: "",
    url: url_WebAppsDeleteSiteExtension_569966, schemes: {Scheme.Https})
type
  Call_WebAppsListSlots_569976 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSlots_569978(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlots_569977(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Gets an app's deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569979 = path.getOrDefault("resourceGroupName")
  valid_569979 = validateParameter(valid_569979, JString, required = true,
                                 default = nil)
  if valid_569979 != nil:
    section.add "resourceGroupName", valid_569979
  var valid_569980 = path.getOrDefault("name")
  valid_569980 = validateParameter(valid_569980, JString, required = true,
                                 default = nil)
  if valid_569980 != nil:
    section.add "name", valid_569980
  var valid_569981 = path.getOrDefault("subscriptionId")
  valid_569981 = validateParameter(valid_569981, JString, required = true,
                                 default = nil)
  if valid_569981 != nil:
    section.add "subscriptionId", valid_569981
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569982 = query.getOrDefault("api-version")
  valid_569982 = validateParameter(valid_569982, JString, required = true,
                                 default = nil)
  if valid_569982 != nil:
    section.add "api-version", valid_569982
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569983: Call_WebAppsListSlots_569976; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets an app's deployment slots.
  ## 
  let valid = call_569983.validator(path, query, header, formData, body)
  let scheme = call_569983.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569983.url(scheme.get, call_569983.host, call_569983.base,
                         call_569983.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569983, url, valid)

proc call*(call_569984: Call_WebAppsListSlots_569976; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListSlots
  ## Gets an app's deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569985 = newJObject()
  var query_569986 = newJObject()
  add(path_569985, "resourceGroupName", newJString(resourceGroupName))
  add(query_569986, "api-version", newJString(apiVersion))
  add(path_569985, "name", newJString(name))
  add(path_569985, "subscriptionId", newJString(subscriptionId))
  result = call_569984.call(path_569985, query_569986, nil, nil, nil)

var webAppsListSlots* = Call_WebAppsListSlots_569976(name: "webAppsListSlots",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
    validator: validate_WebAppsListSlots_569977, base: "",
    url: url_WebAppsListSlots_569978, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSlot_569999 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateSlot_570001(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSlot_570000(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570002 = path.getOrDefault("resourceGroupName")
  valid_570002 = validateParameter(valid_570002, JString, required = true,
                                 default = nil)
  if valid_570002 != nil:
    section.add "resourceGroupName", valid_570002
  var valid_570003 = path.getOrDefault("name")
  valid_570003 = validateParameter(valid_570003, JString, required = true,
                                 default = nil)
  if valid_570003 != nil:
    section.add "name", valid_570003
  var valid_570004 = path.getOrDefault("slot")
  valid_570004 = validateParameter(valid_570004, JString, required = true,
                                 default = nil)
  if valid_570004 != nil:
    section.add "slot", valid_570004
  var valid_570005 = path.getOrDefault("subscriptionId")
  valid_570005 = validateParameter(valid_570005, JString, required = true,
                                 default = nil)
  if valid_570005 != nil:
    section.add "subscriptionId", valid_570005
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570006 = query.getOrDefault("api-version")
  valid_570006 = validateParameter(valid_570006, JString, required = true,
                                 default = nil)
  if valid_570006 != nil:
    section.add "api-version", valid_570006
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570008: Call_WebAppsCreateOrUpdateSlot_569999; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_570008.validator(path, query, header, formData, body)
  let scheme = call_570008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570008.url(scheme.get, call_570008.host, call_570008.base,
                         call_570008.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570008, url, valid)

proc call*(call_570009: Call_WebAppsCreateOrUpdateSlot_569999;
          siteEnvelope: JsonNode; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570010 = newJObject()
  var query_570011 = newJObject()
  var body_570012 = newJObject()
  if siteEnvelope != nil:
    body_570012 = siteEnvelope
  add(path_570010, "resourceGroupName", newJString(resourceGroupName))
  add(query_570011, "api-version", newJString(apiVersion))
  add(path_570010, "name", newJString(name))
  add(path_570010, "slot", newJString(slot))
  add(path_570010, "subscriptionId", newJString(subscriptionId))
  result = call_570009.call(path_570010, query_570011, nil, nil, body_570012)

var webAppsCreateOrUpdateSlot* = Call_WebAppsCreateOrUpdateSlot_569999(
    name: "webAppsCreateOrUpdateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsCreateOrUpdateSlot_570000, base: "",
    url: url_WebAppsCreateOrUpdateSlot_570001, schemes: {Scheme.Https})
type
  Call_WebAppsGetSlot_569987 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSlot_569989(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSlot_569988(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Gets the details of a web, mobile, or API app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_569990 = path.getOrDefault("resourceGroupName")
  valid_569990 = validateParameter(valid_569990, JString, required = true,
                                 default = nil)
  if valid_569990 != nil:
    section.add "resourceGroupName", valid_569990
  var valid_569991 = path.getOrDefault("name")
  valid_569991 = validateParameter(valid_569991, JString, required = true,
                                 default = nil)
  if valid_569991 != nil:
    section.add "name", valid_569991
  var valid_569992 = path.getOrDefault("slot")
  valid_569992 = validateParameter(valid_569992, JString, required = true,
                                 default = nil)
  if valid_569992 != nil:
    section.add "slot", valid_569992
  var valid_569993 = path.getOrDefault("subscriptionId")
  valid_569993 = validateParameter(valid_569993, JString, required = true,
                                 default = nil)
  if valid_569993 != nil:
    section.add "subscriptionId", valid_569993
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_569994 = query.getOrDefault("api-version")
  valid_569994 = validateParameter(valid_569994, JString, required = true,
                                 default = nil)
  if valid_569994 != nil:
    section.add "api-version", valid_569994
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_569995: Call_WebAppsGetSlot_569987; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the details of a web, mobile, or API app.
  ## 
  let valid = call_569995.validator(path, query, header, formData, body)
  let scheme = call_569995.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_569995.url(scheme.get, call_569995.host, call_569995.base,
                         call_569995.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_569995, url, valid)

proc call*(call_569996: Call_WebAppsGetSlot_569987; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetSlot
  ## Gets the details of a web, mobile, or API app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_569997 = newJObject()
  var query_569998 = newJObject()
  add(path_569997, "resourceGroupName", newJString(resourceGroupName))
  add(query_569998, "api-version", newJString(apiVersion))
  add(path_569997, "name", newJString(name))
  add(path_569997, "slot", newJString(slot))
  add(path_569997, "subscriptionId", newJString(subscriptionId))
  result = call_569996.call(path_569997, query_569998, nil, nil, nil)

var webAppsGetSlot* = Call_WebAppsGetSlot_569987(name: "webAppsGetSlot",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsGetSlot_569988, base: "", url: url_WebAppsGetSlot_569989,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSlot_570027 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSlot_570029(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSlot_570028(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570030 = path.getOrDefault("resourceGroupName")
  valid_570030 = validateParameter(valid_570030, JString, required = true,
                                 default = nil)
  if valid_570030 != nil:
    section.add "resourceGroupName", valid_570030
  var valid_570031 = path.getOrDefault("name")
  valid_570031 = validateParameter(valid_570031, JString, required = true,
                                 default = nil)
  if valid_570031 != nil:
    section.add "name", valid_570031
  var valid_570032 = path.getOrDefault("slot")
  valid_570032 = validateParameter(valid_570032, JString, required = true,
                                 default = nil)
  if valid_570032 != nil:
    section.add "slot", valid_570032
  var valid_570033 = path.getOrDefault("subscriptionId")
  valid_570033 = validateParameter(valid_570033, JString, required = true,
                                 default = nil)
  if valid_570033 != nil:
    section.add "subscriptionId", valid_570033
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570034 = query.getOrDefault("api-version")
  valid_570034 = validateParameter(valid_570034, JString, required = true,
                                 default = nil)
  if valid_570034 != nil:
    section.add "api-version", valid_570034
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570036: Call_WebAppsUpdateSlot_570027; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ## 
  let valid = call_570036.validator(path, query, header, formData, body)
  let scheme = call_570036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570036.url(scheme.get, call_570036.host, call_570036.base,
                         call_570036.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570036, url, valid)

proc call*(call_570037: Call_WebAppsUpdateSlot_570027; siteEnvelope: JsonNode;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateSlot
  ## Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
  ##   siteEnvelope: JObject (required)
  ##               : A JSON representation of the app properties. See example.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.
  ##   slot: string (required)
  ##       : Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570038 = newJObject()
  var query_570039 = newJObject()
  var body_570040 = newJObject()
  if siteEnvelope != nil:
    body_570040 = siteEnvelope
  add(path_570038, "resourceGroupName", newJString(resourceGroupName))
  add(query_570039, "api-version", newJString(apiVersion))
  add(path_570038, "name", newJString(name))
  add(path_570038, "slot", newJString(slot))
  add(path_570038, "subscriptionId", newJString(subscriptionId))
  result = call_570037.call(path_570038, query_570039, nil, nil, body_570040)

var webAppsUpdateSlot* = Call_WebAppsUpdateSlot_570027(name: "webAppsUpdateSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsUpdateSlot_570028, base: "",
    url: url_WebAppsUpdateSlot_570029, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSlot_570013 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSlot_570015(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSlot_570014(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app to delete.
  ##   slot: JString (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570016 = path.getOrDefault("resourceGroupName")
  valid_570016 = validateParameter(valid_570016, JString, required = true,
                                 default = nil)
  if valid_570016 != nil:
    section.add "resourceGroupName", valid_570016
  var valid_570017 = path.getOrDefault("name")
  valid_570017 = validateParameter(valid_570017, JString, required = true,
                                 default = nil)
  if valid_570017 != nil:
    section.add "name", valid_570017
  var valid_570018 = path.getOrDefault("slot")
  valid_570018 = validateParameter(valid_570018, JString, required = true,
                                 default = nil)
  if valid_570018 != nil:
    section.add "slot", valid_570018
  var valid_570019 = path.getOrDefault("subscriptionId")
  valid_570019 = validateParameter(valid_570019, JString, required = true,
                                 default = nil)
  if valid_570019 != nil:
    section.add "subscriptionId", valid_570019
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   deleteMetrics: JBool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: JBool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570020 = query.getOrDefault("api-version")
  valid_570020 = validateParameter(valid_570020, JString, required = true,
                                 default = nil)
  if valid_570020 != nil:
    section.add "api-version", valid_570020
  var valid_570021 = query.getOrDefault("deleteMetrics")
  valid_570021 = validateParameter(valid_570021, JBool, required = false, default = nil)
  if valid_570021 != nil:
    section.add "deleteMetrics", valid_570021
  var valid_570022 = query.getOrDefault("deleteEmptyServerFarm")
  valid_570022 = validateParameter(valid_570022, JBool, required = false, default = nil)
  if valid_570022 != nil:
    section.add "deleteEmptyServerFarm", valid_570022
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570023: Call_WebAppsDeleteSlot_570013; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ## 
  let valid = call_570023.validator(path, query, header, formData, body)
  let scheme = call_570023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570023.url(scheme.get, call_570023.host, call_570023.base,
                         call_570023.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570023, url, valid)

proc call*(call_570024: Call_WebAppsDeleteSlot_570013; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          deleteMetrics: bool = false; deleteEmptyServerFarm: bool = false): Recallable =
  ## webAppsDeleteSlot
  ## Deletes a web, mobile, or API app, or one of the deployment slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app to delete.
  ##   slot: string (required)
  ##       : Name of the deployment slot to delete. By default, the API deletes the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   deleteMetrics: bool
  ##                : If true, web app metrics are also deleted.
  ##   deleteEmptyServerFarm: bool
  ##                        : Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.
  var path_570025 = newJObject()
  var query_570026 = newJObject()
  add(path_570025, "resourceGroupName", newJString(resourceGroupName))
  add(query_570026, "api-version", newJString(apiVersion))
  add(path_570025, "name", newJString(name))
  add(path_570025, "slot", newJString(slot))
  add(path_570025, "subscriptionId", newJString(subscriptionId))
  add(query_570026, "deleteMetrics", newJBool(deleteMetrics))
  add(query_570026, "deleteEmptyServerFarm", newJBool(deleteEmptyServerFarm))
  result = call_570024.call(path_570025, query_570026, nil, nil, nil)

var webAppsDeleteSlot* = Call_WebAppsDeleteSlot_570013(name: "webAppsDeleteSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    validator: validate_WebAppsDeleteSlot_570014, base: "",
    url: url_WebAppsDeleteSlot_570015, schemes: {Scheme.Https})
type
  Call_WebAppsAnalyzeCustomHostnameSlot_570041 = ref object of OpenApiRestCall_567666
proc url_WebAppsAnalyzeCustomHostnameSlot_570043(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/analyzeCustomHostname")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAnalyzeCustomHostnameSlot_570042(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Analyze a custom hostname.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570044 = path.getOrDefault("resourceGroupName")
  valid_570044 = validateParameter(valid_570044, JString, required = true,
                                 default = nil)
  if valid_570044 != nil:
    section.add "resourceGroupName", valid_570044
  var valid_570045 = path.getOrDefault("name")
  valid_570045 = validateParameter(valid_570045, JString, required = true,
                                 default = nil)
  if valid_570045 != nil:
    section.add "name", valid_570045
  var valid_570046 = path.getOrDefault("slot")
  valid_570046 = validateParameter(valid_570046, JString, required = true,
                                 default = nil)
  if valid_570046 != nil:
    section.add "slot", valid_570046
  var valid_570047 = path.getOrDefault("subscriptionId")
  valid_570047 = validateParameter(valid_570047, JString, required = true,
                                 default = nil)
  if valid_570047 != nil:
    section.add "subscriptionId", valid_570047
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   hostName: JString
  ##           : Custom hostname.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570048 = query.getOrDefault("api-version")
  valid_570048 = validateParameter(valid_570048, JString, required = true,
                                 default = nil)
  if valid_570048 != nil:
    section.add "api-version", valid_570048
  var valid_570049 = query.getOrDefault("hostName")
  valid_570049 = validateParameter(valid_570049, JString, required = false,
                                 default = nil)
  if valid_570049 != nil:
    section.add "hostName", valid_570049
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570050: Call_WebAppsAnalyzeCustomHostnameSlot_570041;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Analyze a custom hostname.
  ## 
  let valid = call_570050.validator(path, query, header, formData, body)
  let scheme = call_570050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570050.url(scheme.get, call_570050.host, call_570050.base,
                         call_570050.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570050, url, valid)

proc call*(call_570051: Call_WebAppsAnalyzeCustomHostnameSlot_570041;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string = ""): Recallable =
  ## webAppsAnalyzeCustomHostnameSlot
  ## Analyze a custom hostname.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   hostName: string
  ##           : Custom hostname.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570052 = newJObject()
  var query_570053 = newJObject()
  add(path_570052, "resourceGroupName", newJString(resourceGroupName))
  add(query_570053, "api-version", newJString(apiVersion))
  add(path_570052, "name", newJString(name))
  add(query_570053, "hostName", newJString(hostName))
  add(path_570052, "slot", newJString(slot))
  add(path_570052, "subscriptionId", newJString(subscriptionId))
  result = call_570051.call(path_570052, query_570053, nil, nil, nil)

var webAppsAnalyzeCustomHostnameSlot* = Call_WebAppsAnalyzeCustomHostnameSlot_570041(
    name: "webAppsAnalyzeCustomHostnameSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname",
    validator: validate_WebAppsAnalyzeCustomHostnameSlot_570042, base: "",
    url: url_WebAppsAnalyzeCustomHostnameSlot_570043, schemes: {Scheme.Https})
type
  Call_WebAppsApplySlotConfigurationSlot_570054 = ref object of OpenApiRestCall_567666
proc url_WebAppsApplySlotConfigurationSlot_570056(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/applySlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsApplySlotConfigurationSlot_570055(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570057 = path.getOrDefault("resourceGroupName")
  valid_570057 = validateParameter(valid_570057, JString, required = true,
                                 default = nil)
  if valid_570057 != nil:
    section.add "resourceGroupName", valid_570057
  var valid_570058 = path.getOrDefault("name")
  valid_570058 = validateParameter(valid_570058, JString, required = true,
                                 default = nil)
  if valid_570058 != nil:
    section.add "name", valid_570058
  var valid_570059 = path.getOrDefault("slot")
  valid_570059 = validateParameter(valid_570059, JString, required = true,
                                 default = nil)
  if valid_570059 != nil:
    section.add "slot", valid_570059
  var valid_570060 = path.getOrDefault("subscriptionId")
  valid_570060 = validateParameter(valid_570060, JString, required = true,
                                 default = nil)
  if valid_570060 != nil:
    section.add "subscriptionId", valid_570060
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570061 = query.getOrDefault("api-version")
  valid_570061 = validateParameter(valid_570061, JString, required = true,
                                 default = nil)
  if valid_570061 != nil:
    section.add "api-version", valid_570061
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570063: Call_WebAppsApplySlotConfigurationSlot_570054;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies the configuration settings from the target slot onto the current slot.
  ## 
  let valid = call_570063.validator(path, query, header, formData, body)
  let scheme = call_570063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570063.url(scheme.get, call_570063.host, call_570063.base,
                         call_570063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570063, url, valid)

proc call*(call_570064: Call_WebAppsApplySlotConfigurationSlot_570054;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsApplySlotConfigurationSlot
  ## Applies the configuration settings from the target slot onto the current slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_570065 = newJObject()
  var query_570066 = newJObject()
  var body_570067 = newJObject()
  add(path_570065, "resourceGroupName", newJString(resourceGroupName))
  add(query_570066, "api-version", newJString(apiVersion))
  add(path_570065, "name", newJString(name))
  add(path_570065, "slot", newJString(slot))
  add(path_570065, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_570067 = slotSwapEntity
  result = call_570064.call(path_570065, query_570066, nil, nil, body_570067)

var webAppsApplySlotConfigurationSlot* = Call_WebAppsApplySlotConfigurationSlot_570054(
    name: "webAppsApplySlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
    validator: validate_WebAppsApplySlotConfigurationSlot_570055, base: "",
    url: url_WebAppsApplySlotConfigurationSlot_570056, schemes: {Scheme.Https})
type
  Call_WebAppsBackupSlot_570068 = ref object of OpenApiRestCall_567666
proc url_WebAppsBackupSlot_570070(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsBackupSlot_570069(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Creates a backup of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570071 = path.getOrDefault("resourceGroupName")
  valid_570071 = validateParameter(valid_570071, JString, required = true,
                                 default = nil)
  if valid_570071 != nil:
    section.add "resourceGroupName", valid_570071
  var valid_570072 = path.getOrDefault("name")
  valid_570072 = validateParameter(valid_570072, JString, required = true,
                                 default = nil)
  if valid_570072 != nil:
    section.add "name", valid_570072
  var valid_570073 = path.getOrDefault("slot")
  valid_570073 = validateParameter(valid_570073, JString, required = true,
                                 default = nil)
  if valid_570073 != nil:
    section.add "slot", valid_570073
  var valid_570074 = path.getOrDefault("subscriptionId")
  valid_570074 = validateParameter(valid_570074, JString, required = true,
                                 default = nil)
  if valid_570074 != nil:
    section.add "subscriptionId", valid_570074
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570075 = query.getOrDefault("api-version")
  valid_570075 = validateParameter(valid_570075, JString, required = true,
                                 default = nil)
  if valid_570075 != nil:
    section.add "api-version", valid_570075
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570077: Call_WebAppsBackupSlot_570068; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a backup of an app.
  ## 
  let valid = call_570077.validator(path, query, header, formData, body)
  let scheme = call_570077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570077.url(scheme.get, call_570077.host, call_570077.base,
                         call_570077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570077, url, valid)

proc call*(call_570078: Call_WebAppsBackupSlot_570068; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          request: JsonNode): Recallable =
  ## webAppsBackupSlot
  ## Creates a backup of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Backup configuration. You can use the JSON response from the POST action as input here.
  var path_570079 = newJObject()
  var query_570080 = newJObject()
  var body_570081 = newJObject()
  add(path_570079, "resourceGroupName", newJString(resourceGroupName))
  add(query_570080, "api-version", newJString(apiVersion))
  add(path_570079, "name", newJString(name))
  add(path_570079, "slot", newJString(slot))
  add(path_570079, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_570081 = request
  result = call_570078.call(path_570079, query_570080, nil, nil, body_570081)

var webAppsBackupSlot* = Call_WebAppsBackupSlot_570068(name: "webAppsBackupSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
    validator: validate_WebAppsBackupSlot_570069, base: "",
    url: url_WebAppsBackupSlot_570070, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupsSlot_570082 = ref object of OpenApiRestCall_567666
proc url_WebAppsListBackupsSlot_570084(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupsSlot_570083(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets existing backups of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570085 = path.getOrDefault("resourceGroupName")
  valid_570085 = validateParameter(valid_570085, JString, required = true,
                                 default = nil)
  if valid_570085 != nil:
    section.add "resourceGroupName", valid_570085
  var valid_570086 = path.getOrDefault("name")
  valid_570086 = validateParameter(valid_570086, JString, required = true,
                                 default = nil)
  if valid_570086 != nil:
    section.add "name", valid_570086
  var valid_570087 = path.getOrDefault("slot")
  valid_570087 = validateParameter(valid_570087, JString, required = true,
                                 default = nil)
  if valid_570087 != nil:
    section.add "slot", valid_570087
  var valid_570088 = path.getOrDefault("subscriptionId")
  valid_570088 = validateParameter(valid_570088, JString, required = true,
                                 default = nil)
  if valid_570088 != nil:
    section.add "subscriptionId", valid_570088
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570089 = query.getOrDefault("api-version")
  valid_570089 = validateParameter(valid_570089, JString, required = true,
                                 default = nil)
  if valid_570089 != nil:
    section.add "api-version", valid_570089
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570090: Call_WebAppsListBackupsSlot_570082; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets existing backups of an app.
  ## 
  let valid = call_570090.validator(path, query, header, formData, body)
  let scheme = call_570090.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570090.url(scheme.get, call_570090.host, call_570090.base,
                         call_570090.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570090, url, valid)

proc call*(call_570091: Call_WebAppsListBackupsSlot_570082;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListBackupsSlot
  ## Gets existing backups of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570092 = newJObject()
  var query_570093 = newJObject()
  add(path_570092, "resourceGroupName", newJString(resourceGroupName))
  add(query_570093, "api-version", newJString(apiVersion))
  add(path_570092, "name", newJString(name))
  add(path_570092, "slot", newJString(slot))
  add(path_570092, "subscriptionId", newJString(subscriptionId))
  result = call_570091.call(path_570092, query_570093, nil, nil, nil)

var webAppsListBackupsSlot* = Call_WebAppsListBackupsSlot_570082(
    name: "webAppsListBackupsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
    validator: validate_WebAppsListBackupsSlot_570083, base: "",
    url: url_WebAppsListBackupsSlot_570084, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupStatusSlot_570094 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetBackupStatusSlot_570096(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupStatusSlot_570095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570097 = path.getOrDefault("resourceGroupName")
  valid_570097 = validateParameter(valid_570097, JString, required = true,
                                 default = nil)
  if valid_570097 != nil:
    section.add "resourceGroupName", valid_570097
  var valid_570098 = path.getOrDefault("name")
  valid_570098 = validateParameter(valid_570098, JString, required = true,
                                 default = nil)
  if valid_570098 != nil:
    section.add "name", valid_570098
  var valid_570099 = path.getOrDefault("slot")
  valid_570099 = validateParameter(valid_570099, JString, required = true,
                                 default = nil)
  if valid_570099 != nil:
    section.add "slot", valid_570099
  var valid_570100 = path.getOrDefault("subscriptionId")
  valid_570100 = validateParameter(valid_570100, JString, required = true,
                                 default = nil)
  if valid_570100 != nil:
    section.add "subscriptionId", valid_570100
  var valid_570101 = path.getOrDefault("backupId")
  valid_570101 = validateParameter(valid_570101, JString, required = true,
                                 default = nil)
  if valid_570101 != nil:
    section.add "backupId", valid_570101
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570102 = query.getOrDefault("api-version")
  valid_570102 = validateParameter(valid_570102, JString, required = true,
                                 default = nil)
  if valid_570102 != nil:
    section.add "api-version", valid_570102
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570103: Call_WebAppsGetBackupStatusSlot_570094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a backup of an app by its ID.
  ## 
  let valid = call_570103.validator(path, query, header, formData, body)
  let scheme = call_570103.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570103.url(scheme.get, call_570103.host, call_570103.base,
                         call_570103.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570103, url, valid)

proc call*(call_570104: Call_WebAppsGetBackupStatusSlot_570094;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsGetBackupStatusSlot
  ## Gets a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_570105 = newJObject()
  var query_570106 = newJObject()
  add(path_570105, "resourceGroupName", newJString(resourceGroupName))
  add(query_570106, "api-version", newJString(apiVersion))
  add(path_570105, "name", newJString(name))
  add(path_570105, "slot", newJString(slot))
  add(path_570105, "subscriptionId", newJString(subscriptionId))
  add(path_570105, "backupId", newJString(backupId))
  result = call_570104.call(path_570105, query_570106, nil, nil, nil)

var webAppsGetBackupStatusSlot* = Call_WebAppsGetBackupStatusSlot_570094(
    name: "webAppsGetBackupStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsGetBackupStatusSlot_570095, base: "",
    url: url_WebAppsGetBackupStatusSlot_570096, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupSlot_570107 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteBackupSlot_570109(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupSlot_570108(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a backup of an app by its ID.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570110 = path.getOrDefault("resourceGroupName")
  valid_570110 = validateParameter(valid_570110, JString, required = true,
                                 default = nil)
  if valid_570110 != nil:
    section.add "resourceGroupName", valid_570110
  var valid_570111 = path.getOrDefault("name")
  valid_570111 = validateParameter(valid_570111, JString, required = true,
                                 default = nil)
  if valid_570111 != nil:
    section.add "name", valid_570111
  var valid_570112 = path.getOrDefault("slot")
  valid_570112 = validateParameter(valid_570112, JString, required = true,
                                 default = nil)
  if valid_570112 != nil:
    section.add "slot", valid_570112
  var valid_570113 = path.getOrDefault("subscriptionId")
  valid_570113 = validateParameter(valid_570113, JString, required = true,
                                 default = nil)
  if valid_570113 != nil:
    section.add "subscriptionId", valid_570113
  var valid_570114 = path.getOrDefault("backupId")
  valid_570114 = validateParameter(valid_570114, JString, required = true,
                                 default = nil)
  if valid_570114 != nil:
    section.add "backupId", valid_570114
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570115 = query.getOrDefault("api-version")
  valid_570115 = validateParameter(valid_570115, JString, required = true,
                                 default = nil)
  if valid_570115 != nil:
    section.add "api-version", valid_570115
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570116: Call_WebAppsDeleteBackupSlot_570107; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a backup of an app by its ID.
  ## 
  let valid = call_570116.validator(path, query, header, formData, body)
  let scheme = call_570116.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570116.url(scheme.get, call_570116.host, call_570116.base,
                         call_570116.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570116, url, valid)

proc call*(call_570117: Call_WebAppsDeleteBackupSlot_570107;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; backupId: string): Recallable =
  ## webAppsDeleteBackupSlot
  ## Deletes a backup of an app by its ID.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_570118 = newJObject()
  var query_570119 = newJObject()
  add(path_570118, "resourceGroupName", newJString(resourceGroupName))
  add(query_570119, "api-version", newJString(apiVersion))
  add(path_570118, "name", newJString(name))
  add(path_570118, "slot", newJString(slot))
  add(path_570118, "subscriptionId", newJString(subscriptionId))
  add(path_570118, "backupId", newJString(backupId))
  result = call_570117.call(path_570118, query_570119, nil, nil, nil)

var webAppsDeleteBackupSlot* = Call_WebAppsDeleteBackupSlot_570107(
    name: "webAppsDeleteBackupSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    validator: validate_WebAppsDeleteBackupSlot_570108, base: "",
    url: url_WebAppsDeleteBackupSlot_570109, schemes: {Scheme.Https})
type
  Call_WebAppsListBackupStatusSecretsSlot_570120 = ref object of OpenApiRestCall_567666
proc url_WebAppsListBackupStatusSecretsSlot_570122(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListBackupStatusSecretsSlot_570121(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570123 = path.getOrDefault("resourceGroupName")
  valid_570123 = validateParameter(valid_570123, JString, required = true,
                                 default = nil)
  if valid_570123 != nil:
    section.add "resourceGroupName", valid_570123
  var valid_570124 = path.getOrDefault("name")
  valid_570124 = validateParameter(valid_570124, JString, required = true,
                                 default = nil)
  if valid_570124 != nil:
    section.add "name", valid_570124
  var valid_570125 = path.getOrDefault("slot")
  valid_570125 = validateParameter(valid_570125, JString, required = true,
                                 default = nil)
  if valid_570125 != nil:
    section.add "slot", valid_570125
  var valid_570126 = path.getOrDefault("subscriptionId")
  valid_570126 = validateParameter(valid_570126, JString, required = true,
                                 default = nil)
  if valid_570126 != nil:
    section.add "subscriptionId", valid_570126
  var valid_570127 = path.getOrDefault("backupId")
  valid_570127 = validateParameter(valid_570127, JString, required = true,
                                 default = nil)
  if valid_570127 != nil:
    section.add "backupId", valid_570127
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570128 = query.getOrDefault("api-version")
  valid_570128 = validateParameter(valid_570128, JString, required = true,
                                 default = nil)
  if valid_570128 != nil:
    section.add "api-version", valid_570128
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on backup request.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570130: Call_WebAppsListBackupStatusSecretsSlot_570120;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ## 
  let valid = call_570130.validator(path, query, header, formData, body)
  let scheme = call_570130.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570130.url(scheme.get, call_570130.host, call_570130.base,
                         call_570130.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570130, url, valid)

proc call*(call_570131: Call_WebAppsListBackupStatusSecretsSlot_570120;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode; backupId: string): Recallable =
  ## webAppsListBackupStatusSecretsSlot
  ## Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on backup request.
  ##   backupId: string (required)
  ##           : ID of backup.
  var path_570132 = newJObject()
  var query_570133 = newJObject()
  var body_570134 = newJObject()
  add(path_570132, "resourceGroupName", newJString(resourceGroupName))
  add(query_570133, "api-version", newJString(apiVersion))
  add(path_570132, "name", newJString(name))
  add(path_570132, "slot", newJString(slot))
  add(path_570132, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_570134 = request
  add(path_570132, "backupId", newJString(backupId))
  result = call_570131.call(path_570132, query_570133, nil, nil, body_570134)

var webAppsListBackupStatusSecretsSlot* = Call_WebAppsListBackupStatusSecretsSlot_570120(
    name: "webAppsListBackupStatusSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
    validator: validate_WebAppsListBackupStatusSecretsSlot_570121, base: "",
    url: url_WebAppsListBackupStatusSecretsSlot_570122, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSlot_570135 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestoreSlot_570137(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "backupId" in path, "`backupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/backups/"),
               (kind: VariableSegment, value: "backupId"),
               (kind: ConstantSegment, value: "/restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSlot_570136(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   backupId: JString (required)
  ##           : ID of the backup.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570138 = path.getOrDefault("resourceGroupName")
  valid_570138 = validateParameter(valid_570138, JString, required = true,
                                 default = nil)
  if valid_570138 != nil:
    section.add "resourceGroupName", valid_570138
  var valid_570139 = path.getOrDefault("name")
  valid_570139 = validateParameter(valid_570139, JString, required = true,
                                 default = nil)
  if valid_570139 != nil:
    section.add "name", valid_570139
  var valid_570140 = path.getOrDefault("slot")
  valid_570140 = validateParameter(valid_570140, JString, required = true,
                                 default = nil)
  if valid_570140 != nil:
    section.add "slot", valid_570140
  var valid_570141 = path.getOrDefault("subscriptionId")
  valid_570141 = validateParameter(valid_570141, JString, required = true,
                                 default = nil)
  if valid_570141 != nil:
    section.add "subscriptionId", valid_570141
  var valid_570142 = path.getOrDefault("backupId")
  valid_570142 = validateParameter(valid_570142, JString, required = true,
                                 default = nil)
  if valid_570142 != nil:
    section.add "backupId", valid_570142
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570143 = query.getOrDefault("api-version")
  valid_570143 = validateParameter(valid_570143, JString, required = true,
                                 default = nil)
  if valid_570143 != nil:
    section.add "api-version", valid_570143
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570145: Call_WebAppsRestoreSlot_570135; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ## 
  let valid = call_570145.validator(path, query, header, formData, body)
  let scheme = call_570145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570145.url(scheme.get, call_570145.host, call_570145.base,
                         call_570145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570145, url, valid)

proc call*(call_570146: Call_WebAppsRestoreSlot_570135; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          request: JsonNode; backupId: string): Recallable =
  ## webAppsRestoreSlot
  ## Restores a specific backup to another app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  ##   backupId: string (required)
  ##           : ID of the backup.
  var path_570147 = newJObject()
  var query_570148 = newJObject()
  var body_570149 = newJObject()
  add(path_570147, "resourceGroupName", newJString(resourceGroupName))
  add(query_570148, "api-version", newJString(apiVersion))
  add(path_570147, "name", newJString(name))
  add(path_570147, "slot", newJString(slot))
  add(path_570147, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_570149 = request
  add(path_570147, "backupId", newJString(backupId))
  result = call_570146.call(path_570147, query_570148, nil, nil, body_570149)

var webAppsRestoreSlot* = Call_WebAppsRestoreSlot_570135(
    name: "webAppsRestoreSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
    validator: validate_WebAppsRestoreSlot_570136, base: "",
    url: url_WebAppsRestoreSlot_570137, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationsSlot_570150 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConfigurationsSlot_570152(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationsSlot_570151(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the configurations of an app
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570153 = path.getOrDefault("resourceGroupName")
  valid_570153 = validateParameter(valid_570153, JString, required = true,
                                 default = nil)
  if valid_570153 != nil:
    section.add "resourceGroupName", valid_570153
  var valid_570154 = path.getOrDefault("name")
  valid_570154 = validateParameter(valid_570154, JString, required = true,
                                 default = nil)
  if valid_570154 != nil:
    section.add "name", valid_570154
  var valid_570155 = path.getOrDefault("slot")
  valid_570155 = validateParameter(valid_570155, JString, required = true,
                                 default = nil)
  if valid_570155 != nil:
    section.add "slot", valid_570155
  var valid_570156 = path.getOrDefault("subscriptionId")
  valid_570156 = validateParameter(valid_570156, JString, required = true,
                                 default = nil)
  if valid_570156 != nil:
    section.add "subscriptionId", valid_570156
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570157 = query.getOrDefault("api-version")
  valid_570157 = validateParameter(valid_570157, JString, required = true,
                                 default = nil)
  if valid_570157 != nil:
    section.add "api-version", valid_570157
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570158: Call_WebAppsListConfigurationsSlot_570150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the configurations of an app
  ## 
  let valid = call_570158.validator(path, query, header, formData, body)
  let scheme = call_570158.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570158.url(scheme.get, call_570158.host, call_570158.base,
                         call_570158.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570158, url, valid)

proc call*(call_570159: Call_WebAppsListConfigurationsSlot_570150;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationsSlot
  ## List the configurations of an app
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570160 = newJObject()
  var query_570161 = newJObject()
  add(path_570160, "resourceGroupName", newJString(resourceGroupName))
  add(query_570161, "api-version", newJString(apiVersion))
  add(path_570160, "name", newJString(name))
  add(path_570160, "slot", newJString(slot))
  add(path_570160, "subscriptionId", newJString(subscriptionId))
  result = call_570159.call(path_570160, query_570161, nil, nil, nil)

var webAppsListConfigurationsSlot* = Call_WebAppsListConfigurationsSlot_570150(
    name: "webAppsListConfigurationsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config",
    validator: validate_WebAppsListConfigurationsSlot_570151, base: "",
    url: url_WebAppsListConfigurationsSlot_570152, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateApplicationSettingsSlot_570162 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateApplicationSettingsSlot_570164(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateApplicationSettingsSlot_570163(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570165 = path.getOrDefault("resourceGroupName")
  valid_570165 = validateParameter(valid_570165, JString, required = true,
                                 default = nil)
  if valid_570165 != nil:
    section.add "resourceGroupName", valid_570165
  var valid_570166 = path.getOrDefault("name")
  valid_570166 = validateParameter(valid_570166, JString, required = true,
                                 default = nil)
  if valid_570166 != nil:
    section.add "name", valid_570166
  var valid_570167 = path.getOrDefault("slot")
  valid_570167 = validateParameter(valid_570167, JString, required = true,
                                 default = nil)
  if valid_570167 != nil:
    section.add "slot", valid_570167
  var valid_570168 = path.getOrDefault("subscriptionId")
  valid_570168 = validateParameter(valid_570168, JString, required = true,
                                 default = nil)
  if valid_570168 != nil:
    section.add "subscriptionId", valid_570168
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570169 = query.getOrDefault("api-version")
  valid_570169 = validateParameter(valid_570169, JString, required = true,
                                 default = nil)
  if valid_570169 != nil:
    section.add "api-version", valid_570169
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570171: Call_WebAppsUpdateApplicationSettingsSlot_570162;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the application settings of an app.
  ## 
  let valid = call_570171.validator(path, query, header, formData, body)
  let scheme = call_570171.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570171.url(scheme.get, call_570171.host, call_570171.base,
                         call_570171.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570171, url, valid)

proc call*(call_570172: Call_WebAppsUpdateApplicationSettingsSlot_570162;
          resourceGroupName: string; apiVersion: string; name: string;
          appSettings: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateApplicationSettingsSlot
  ## Replaces the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   appSettings: JObject (required)
  ##              : Application settings of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570173 = newJObject()
  var query_570174 = newJObject()
  var body_570175 = newJObject()
  add(path_570173, "resourceGroupName", newJString(resourceGroupName))
  add(query_570174, "api-version", newJString(apiVersion))
  add(path_570173, "name", newJString(name))
  if appSettings != nil:
    body_570175 = appSettings
  add(path_570173, "slot", newJString(slot))
  add(path_570173, "subscriptionId", newJString(subscriptionId))
  result = call_570172.call(path_570173, query_570174, nil, nil, body_570175)

var webAppsUpdateApplicationSettingsSlot* = Call_WebAppsUpdateApplicationSettingsSlot_570162(
    name: "webAppsUpdateApplicationSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
    validator: validate_WebAppsUpdateApplicationSettingsSlot_570163, base: "",
    url: url_WebAppsUpdateApplicationSettingsSlot_570164, schemes: {Scheme.Https})
type
  Call_WebAppsListApplicationSettingsSlot_570176 = ref object of OpenApiRestCall_567666
proc url_WebAppsListApplicationSettingsSlot_570178(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/appsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListApplicationSettingsSlot_570177(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the application settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570179 = path.getOrDefault("resourceGroupName")
  valid_570179 = validateParameter(valid_570179, JString, required = true,
                                 default = nil)
  if valid_570179 != nil:
    section.add "resourceGroupName", valid_570179
  var valid_570180 = path.getOrDefault("name")
  valid_570180 = validateParameter(valid_570180, JString, required = true,
                                 default = nil)
  if valid_570180 != nil:
    section.add "name", valid_570180
  var valid_570181 = path.getOrDefault("slot")
  valid_570181 = validateParameter(valid_570181, JString, required = true,
                                 default = nil)
  if valid_570181 != nil:
    section.add "slot", valid_570181
  var valid_570182 = path.getOrDefault("subscriptionId")
  valid_570182 = validateParameter(valid_570182, JString, required = true,
                                 default = nil)
  if valid_570182 != nil:
    section.add "subscriptionId", valid_570182
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570183 = query.getOrDefault("api-version")
  valid_570183 = validateParameter(valid_570183, JString, required = true,
                                 default = nil)
  if valid_570183 != nil:
    section.add "api-version", valid_570183
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570184: Call_WebAppsListApplicationSettingsSlot_570176;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the application settings of an app.
  ## 
  let valid = call_570184.validator(path, query, header, formData, body)
  let scheme = call_570184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570184.url(scheme.get, call_570184.host, call_570184.base,
                         call_570184.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570184, url, valid)

proc call*(call_570185: Call_WebAppsListApplicationSettingsSlot_570176;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListApplicationSettingsSlot
  ## Gets the application settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570186 = newJObject()
  var query_570187 = newJObject()
  add(path_570186, "resourceGroupName", newJString(resourceGroupName))
  add(query_570187, "api-version", newJString(apiVersion))
  add(path_570186, "name", newJString(name))
  add(path_570186, "slot", newJString(slot))
  add(path_570186, "subscriptionId", newJString(subscriptionId))
  result = call_570185.call(path_570186, query_570187, nil, nil, nil)

var webAppsListApplicationSettingsSlot* = Call_WebAppsListApplicationSettingsSlot_570176(
    name: "webAppsListApplicationSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
    validator: validate_WebAppsListApplicationSettingsSlot_570177, base: "",
    url: url_WebAppsListApplicationSettingsSlot_570178, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAuthSettingsSlot_570188 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateAuthSettingsSlot_570190(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAuthSettingsSlot_570189(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570191 = path.getOrDefault("resourceGroupName")
  valid_570191 = validateParameter(valid_570191, JString, required = true,
                                 default = nil)
  if valid_570191 != nil:
    section.add "resourceGroupName", valid_570191
  var valid_570192 = path.getOrDefault("name")
  valid_570192 = validateParameter(valid_570192, JString, required = true,
                                 default = nil)
  if valid_570192 != nil:
    section.add "name", valid_570192
  var valid_570193 = path.getOrDefault("slot")
  valid_570193 = validateParameter(valid_570193, JString, required = true,
                                 default = nil)
  if valid_570193 != nil:
    section.add "slot", valid_570193
  var valid_570194 = path.getOrDefault("subscriptionId")
  valid_570194 = validateParameter(valid_570194, JString, required = true,
                                 default = nil)
  if valid_570194 != nil:
    section.add "subscriptionId", valid_570194
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570195 = query.getOrDefault("api-version")
  valid_570195 = validateParameter(valid_570195, JString, required = true,
                                 default = nil)
  if valid_570195 != nil:
    section.add "api-version", valid_570195
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570197: Call_WebAppsUpdateAuthSettingsSlot_570188; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the Authentication / Authorization settings associated with web app.
  ## 
  let valid = call_570197.validator(path, query, header, formData, body)
  let scheme = call_570197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570197.url(scheme.get, call_570197.host, call_570197.base,
                         call_570197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570197, url, valid)

proc call*(call_570198: Call_WebAppsUpdateAuthSettingsSlot_570188;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteAuthSettings: JsonNode): Recallable =
  ## webAppsUpdateAuthSettingsSlot
  ## Updates the Authentication / Authorization settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteAuthSettings: JObject (required)
  ##                   : Auth settings associated with web app.
  var path_570199 = newJObject()
  var query_570200 = newJObject()
  var body_570201 = newJObject()
  add(path_570199, "resourceGroupName", newJString(resourceGroupName))
  add(query_570200, "api-version", newJString(apiVersion))
  add(path_570199, "name", newJString(name))
  add(path_570199, "slot", newJString(slot))
  add(path_570199, "subscriptionId", newJString(subscriptionId))
  if siteAuthSettings != nil:
    body_570201 = siteAuthSettings
  result = call_570198.call(path_570199, query_570200, nil, nil, body_570201)

var webAppsUpdateAuthSettingsSlot* = Call_WebAppsUpdateAuthSettingsSlot_570188(
    name: "webAppsUpdateAuthSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
    validator: validate_WebAppsUpdateAuthSettingsSlot_570189, base: "",
    url: url_WebAppsUpdateAuthSettingsSlot_570190, schemes: {Scheme.Https})
type
  Call_WebAppsGetAuthSettingsSlot_570202 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetAuthSettingsSlot_570204(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/authsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetAuthSettingsSlot_570203(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570205 = path.getOrDefault("resourceGroupName")
  valid_570205 = validateParameter(valid_570205, JString, required = true,
                                 default = nil)
  if valid_570205 != nil:
    section.add "resourceGroupName", valid_570205
  var valid_570206 = path.getOrDefault("name")
  valid_570206 = validateParameter(valid_570206, JString, required = true,
                                 default = nil)
  if valid_570206 != nil:
    section.add "name", valid_570206
  var valid_570207 = path.getOrDefault("slot")
  valid_570207 = validateParameter(valid_570207, JString, required = true,
                                 default = nil)
  if valid_570207 != nil:
    section.add "slot", valid_570207
  var valid_570208 = path.getOrDefault("subscriptionId")
  valid_570208 = validateParameter(valid_570208, JString, required = true,
                                 default = nil)
  if valid_570208 != nil:
    section.add "subscriptionId", valid_570208
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570209 = query.getOrDefault("api-version")
  valid_570209 = validateParameter(valid_570209, JString, required = true,
                                 default = nil)
  if valid_570209 != nil:
    section.add "api-version", valid_570209
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570210: Call_WebAppsGetAuthSettingsSlot_570202; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the Authentication/Authorization settings of an app.
  ## 
  let valid = call_570210.validator(path, query, header, formData, body)
  let scheme = call_570210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570210.url(scheme.get, call_570210.host, call_570210.base,
                         call_570210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570210, url, valid)

proc call*(call_570211: Call_WebAppsGetAuthSettingsSlot_570202;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetAuthSettingsSlot
  ## Gets the Authentication/Authorization settings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570212 = newJObject()
  var query_570213 = newJObject()
  add(path_570212, "resourceGroupName", newJString(resourceGroupName))
  add(query_570213, "api-version", newJString(apiVersion))
  add(path_570212, "name", newJString(name))
  add(path_570212, "slot", newJString(slot))
  add(path_570212, "subscriptionId", newJString(subscriptionId))
  result = call_570211.call(path_570212, query_570213, nil, nil, nil)

var webAppsGetAuthSettingsSlot* = Call_WebAppsGetAuthSettingsSlot_570202(
    name: "webAppsGetAuthSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
    validator: validate_WebAppsGetAuthSettingsSlot_570203, base: "",
    url: url_WebAppsGetAuthSettingsSlot_570204, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateAzureStorageAccountsSlot_570214 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateAzureStorageAccountsSlot_570216(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/azurestorageaccounts")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateAzureStorageAccountsSlot_570215(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570217 = path.getOrDefault("resourceGroupName")
  valid_570217 = validateParameter(valid_570217, JString, required = true,
                                 default = nil)
  if valid_570217 != nil:
    section.add "resourceGroupName", valid_570217
  var valid_570218 = path.getOrDefault("name")
  valid_570218 = validateParameter(valid_570218, JString, required = true,
                                 default = nil)
  if valid_570218 != nil:
    section.add "name", valid_570218
  var valid_570219 = path.getOrDefault("slot")
  valid_570219 = validateParameter(valid_570219, JString, required = true,
                                 default = nil)
  if valid_570219 != nil:
    section.add "slot", valid_570219
  var valid_570220 = path.getOrDefault("subscriptionId")
  valid_570220 = validateParameter(valid_570220, JString, required = true,
                                 default = nil)
  if valid_570220 != nil:
    section.add "subscriptionId", valid_570220
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570221 = query.getOrDefault("api-version")
  valid_570221 = validateParameter(valid_570221, JString, required = true,
                                 default = nil)
  if valid_570221 != nil:
    section.add "api-version", valid_570221
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570223: Call_WebAppsUpdateAzureStorageAccountsSlot_570214;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Azure storage account configurations of an app.
  ## 
  let valid = call_570223.validator(path, query, header, formData, body)
  let scheme = call_570223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570223.url(scheme.get, call_570223.host, call_570223.base,
                         call_570223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570223, url, valid)

proc call*(call_570224: Call_WebAppsUpdateAzureStorageAccountsSlot_570214;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          azureStorageAccounts: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateAzureStorageAccountsSlot
  ## Updates the Azure storage account configurations of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   azureStorageAccounts: JObject (required)
  ##                       : Azure storage accounts of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570225 = newJObject()
  var query_570226 = newJObject()
  var body_570227 = newJObject()
  add(path_570225, "resourceGroupName", newJString(resourceGroupName))
  add(query_570226, "api-version", newJString(apiVersion))
  add(path_570225, "name", newJString(name))
  add(path_570225, "slot", newJString(slot))
  if azureStorageAccounts != nil:
    body_570227 = azureStorageAccounts
  add(path_570225, "subscriptionId", newJString(subscriptionId))
  result = call_570224.call(path_570225, query_570226, nil, nil, body_570227)

var webAppsUpdateAzureStorageAccountsSlot* = Call_WebAppsUpdateAzureStorageAccountsSlot_570214(
    name: "webAppsUpdateAzureStorageAccountsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts",
    validator: validate_WebAppsUpdateAzureStorageAccountsSlot_570215, base: "",
    url: url_WebAppsUpdateAzureStorageAccountsSlot_570216, schemes: {Scheme.Https})
type
  Call_WebAppsListAzureStorageAccountsSlot_570228 = ref object of OpenApiRestCall_567666
proc url_WebAppsListAzureStorageAccountsSlot_570230(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/azurestorageaccounts/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListAzureStorageAccountsSlot_570229(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Azure storage account configurations of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570231 = path.getOrDefault("resourceGroupName")
  valid_570231 = validateParameter(valid_570231, JString, required = true,
                                 default = nil)
  if valid_570231 != nil:
    section.add "resourceGroupName", valid_570231
  var valid_570232 = path.getOrDefault("name")
  valid_570232 = validateParameter(valid_570232, JString, required = true,
                                 default = nil)
  if valid_570232 != nil:
    section.add "name", valid_570232
  var valid_570233 = path.getOrDefault("slot")
  valid_570233 = validateParameter(valid_570233, JString, required = true,
                                 default = nil)
  if valid_570233 != nil:
    section.add "slot", valid_570233
  var valid_570234 = path.getOrDefault("subscriptionId")
  valid_570234 = validateParameter(valid_570234, JString, required = true,
                                 default = nil)
  if valid_570234 != nil:
    section.add "subscriptionId", valid_570234
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570235 = query.getOrDefault("api-version")
  valid_570235 = validateParameter(valid_570235, JString, required = true,
                                 default = nil)
  if valid_570235 != nil:
    section.add "api-version", valid_570235
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570236: Call_WebAppsListAzureStorageAccountsSlot_570228;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Azure storage account configurations of an app.
  ## 
  let valid = call_570236.validator(path, query, header, formData, body)
  let scheme = call_570236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570236.url(scheme.get, call_570236.host, call_570236.base,
                         call_570236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570236, url, valid)

proc call*(call_570237: Call_WebAppsListAzureStorageAccountsSlot_570228;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListAzureStorageAccountsSlot
  ## Gets the Azure storage account configurations of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570238 = newJObject()
  var query_570239 = newJObject()
  add(path_570238, "resourceGroupName", newJString(resourceGroupName))
  add(query_570239, "api-version", newJString(apiVersion))
  add(path_570238, "name", newJString(name))
  add(path_570238, "slot", newJString(slot))
  add(path_570238, "subscriptionId", newJString(subscriptionId))
  result = call_570237.call(path_570238, query_570239, nil, nil, nil)

var webAppsListAzureStorageAccountsSlot* = Call_WebAppsListAzureStorageAccountsSlot_570228(
    name: "webAppsListAzureStorageAccountsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list",
    validator: validate_WebAppsListAzureStorageAccountsSlot_570229, base: "",
    url: url_WebAppsListAzureStorageAccountsSlot_570230, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateBackupConfigurationSlot_570240 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateBackupConfigurationSlot_570242(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateBackupConfigurationSlot_570241(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570243 = path.getOrDefault("resourceGroupName")
  valid_570243 = validateParameter(valid_570243, JString, required = true,
                                 default = nil)
  if valid_570243 != nil:
    section.add "resourceGroupName", valid_570243
  var valid_570244 = path.getOrDefault("name")
  valid_570244 = validateParameter(valid_570244, JString, required = true,
                                 default = nil)
  if valid_570244 != nil:
    section.add "name", valid_570244
  var valid_570245 = path.getOrDefault("slot")
  valid_570245 = validateParameter(valid_570245, JString, required = true,
                                 default = nil)
  if valid_570245 != nil:
    section.add "slot", valid_570245
  var valid_570246 = path.getOrDefault("subscriptionId")
  valid_570246 = validateParameter(valid_570246, JString, required = true,
                                 default = nil)
  if valid_570246 != nil:
    section.add "subscriptionId", valid_570246
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570247 = query.getOrDefault("api-version")
  valid_570247 = validateParameter(valid_570247, JString, required = true,
                                 default = nil)
  if valid_570247 != nil:
    section.add "api-version", valid_570247
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570249: Call_WebAppsUpdateBackupConfigurationSlot_570240;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the backup configuration of an app.
  ## 
  let valid = call_570249.validator(path, query, header, formData, body)
  let scheme = call_570249.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570249.url(scheme.get, call_570249.host, call_570249.base,
                         call_570249.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570249, url, valid)

proc call*(call_570250: Call_WebAppsUpdateBackupConfigurationSlot_570240;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsUpdateBackupConfigurationSlot
  ## Updates the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Edited backup configuration.
  var path_570251 = newJObject()
  var query_570252 = newJObject()
  var body_570253 = newJObject()
  add(path_570251, "resourceGroupName", newJString(resourceGroupName))
  add(query_570252, "api-version", newJString(apiVersion))
  add(path_570251, "name", newJString(name))
  add(path_570251, "slot", newJString(slot))
  add(path_570251, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_570253 = request
  result = call_570250.call(path_570251, query_570252, nil, nil, body_570253)

var webAppsUpdateBackupConfigurationSlot* = Call_WebAppsUpdateBackupConfigurationSlot_570240(
    name: "webAppsUpdateBackupConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsUpdateBackupConfigurationSlot_570241, base: "",
    url: url_WebAppsUpdateBackupConfigurationSlot_570242, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteBackupConfigurationSlot_570254 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteBackupConfigurationSlot_570256(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteBackupConfigurationSlot_570255(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570257 = path.getOrDefault("resourceGroupName")
  valid_570257 = validateParameter(valid_570257, JString, required = true,
                                 default = nil)
  if valid_570257 != nil:
    section.add "resourceGroupName", valid_570257
  var valid_570258 = path.getOrDefault("name")
  valid_570258 = validateParameter(valid_570258, JString, required = true,
                                 default = nil)
  if valid_570258 != nil:
    section.add "name", valid_570258
  var valid_570259 = path.getOrDefault("slot")
  valid_570259 = validateParameter(valid_570259, JString, required = true,
                                 default = nil)
  if valid_570259 != nil:
    section.add "slot", valid_570259
  var valid_570260 = path.getOrDefault("subscriptionId")
  valid_570260 = validateParameter(valid_570260, JString, required = true,
                                 default = nil)
  if valid_570260 != nil:
    section.add "subscriptionId", valid_570260
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570261 = query.getOrDefault("api-version")
  valid_570261 = validateParameter(valid_570261, JString, required = true,
                                 default = nil)
  if valid_570261 != nil:
    section.add "api-version", valid_570261
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570262: Call_WebAppsDeleteBackupConfigurationSlot_570254;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the backup configuration of an app.
  ## 
  let valid = call_570262.validator(path, query, header, formData, body)
  let scheme = call_570262.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570262.url(scheme.get, call_570262.host, call_570262.base,
                         call_570262.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570262, url, valid)

proc call*(call_570263: Call_WebAppsDeleteBackupConfigurationSlot_570254;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteBackupConfigurationSlot
  ## Deletes the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570264 = newJObject()
  var query_570265 = newJObject()
  add(path_570264, "resourceGroupName", newJString(resourceGroupName))
  add(query_570265, "api-version", newJString(apiVersion))
  add(path_570264, "name", newJString(name))
  add(path_570264, "slot", newJString(slot))
  add(path_570264, "subscriptionId", newJString(subscriptionId))
  result = call_570263.call(path_570264, query_570265, nil, nil, nil)

var webAppsDeleteBackupConfigurationSlot* = Call_WebAppsDeleteBackupConfigurationSlot_570254(
    name: "webAppsDeleteBackupConfigurationSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    validator: validate_WebAppsDeleteBackupConfigurationSlot_570255, base: "",
    url: url_WebAppsDeleteBackupConfigurationSlot_570256, schemes: {Scheme.Https})
type
  Call_WebAppsGetBackupConfigurationSlot_570266 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetBackupConfigurationSlot_570268(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/backup/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetBackupConfigurationSlot_570267(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the backup configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570269 = path.getOrDefault("resourceGroupName")
  valid_570269 = validateParameter(valid_570269, JString, required = true,
                                 default = nil)
  if valid_570269 != nil:
    section.add "resourceGroupName", valid_570269
  var valid_570270 = path.getOrDefault("name")
  valid_570270 = validateParameter(valid_570270, JString, required = true,
                                 default = nil)
  if valid_570270 != nil:
    section.add "name", valid_570270
  var valid_570271 = path.getOrDefault("slot")
  valid_570271 = validateParameter(valid_570271, JString, required = true,
                                 default = nil)
  if valid_570271 != nil:
    section.add "slot", valid_570271
  var valid_570272 = path.getOrDefault("subscriptionId")
  valid_570272 = validateParameter(valid_570272, JString, required = true,
                                 default = nil)
  if valid_570272 != nil:
    section.add "subscriptionId", valid_570272
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570273 = query.getOrDefault("api-version")
  valid_570273 = validateParameter(valid_570273, JString, required = true,
                                 default = nil)
  if valid_570273 != nil:
    section.add "api-version", valid_570273
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570274: Call_WebAppsGetBackupConfigurationSlot_570266;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the backup configuration of an app.
  ## 
  let valid = call_570274.validator(path, query, header, formData, body)
  let scheme = call_570274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570274.url(scheme.get, call_570274.host, call_570274.base,
                         call_570274.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570274, url, valid)

proc call*(call_570275: Call_WebAppsGetBackupConfigurationSlot_570266;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetBackupConfigurationSlot
  ## Gets the backup configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570276 = newJObject()
  var query_570277 = newJObject()
  add(path_570276, "resourceGroupName", newJString(resourceGroupName))
  add(query_570277, "api-version", newJString(apiVersion))
  add(path_570276, "name", newJString(name))
  add(path_570276, "slot", newJString(slot))
  add(path_570276, "subscriptionId", newJString(subscriptionId))
  result = call_570275.call(path_570276, query_570277, nil, nil, nil)

var webAppsGetBackupConfigurationSlot* = Call_WebAppsGetBackupConfigurationSlot_570266(
    name: "webAppsGetBackupConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
    validator: validate_WebAppsGetBackupConfigurationSlot_570267, base: "",
    url: url_WebAppsGetBackupConfigurationSlot_570268, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConnectionStringsSlot_570278 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateConnectionStringsSlot_570280(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConnectionStringsSlot_570279(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570281 = path.getOrDefault("resourceGroupName")
  valid_570281 = validateParameter(valid_570281, JString, required = true,
                                 default = nil)
  if valid_570281 != nil:
    section.add "resourceGroupName", valid_570281
  var valid_570282 = path.getOrDefault("name")
  valid_570282 = validateParameter(valid_570282, JString, required = true,
                                 default = nil)
  if valid_570282 != nil:
    section.add "name", valid_570282
  var valid_570283 = path.getOrDefault("slot")
  valid_570283 = validateParameter(valid_570283, JString, required = true,
                                 default = nil)
  if valid_570283 != nil:
    section.add "slot", valid_570283
  var valid_570284 = path.getOrDefault("subscriptionId")
  valid_570284 = validateParameter(valid_570284, JString, required = true,
                                 default = nil)
  if valid_570284 != nil:
    section.add "subscriptionId", valid_570284
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570285 = query.getOrDefault("api-version")
  valid_570285 = validateParameter(valid_570285, JString, required = true,
                                 default = nil)
  if valid_570285 != nil:
    section.add "api-version", valid_570285
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570287: Call_WebAppsUpdateConnectionStringsSlot_570278;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Replaces the connection strings of an app.
  ## 
  let valid = call_570287.validator(path, query, header, formData, body)
  let scheme = call_570287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570287.url(scheme.get, call_570287.host, call_570287.base,
                         call_570287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570287, url, valid)

proc call*(call_570288: Call_WebAppsUpdateConnectionStringsSlot_570278;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          connectionStrings: JsonNode; subscriptionId: string): Recallable =
  ## webAppsUpdateConnectionStringsSlot
  ## Replaces the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
  ##   connectionStrings: JObject (required)
  ##                    : Connection strings of the app or deployment slot. See example.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570289 = newJObject()
  var query_570290 = newJObject()
  var body_570291 = newJObject()
  add(path_570289, "resourceGroupName", newJString(resourceGroupName))
  add(query_570290, "api-version", newJString(apiVersion))
  add(path_570289, "name", newJString(name))
  add(path_570289, "slot", newJString(slot))
  if connectionStrings != nil:
    body_570291 = connectionStrings
  add(path_570289, "subscriptionId", newJString(subscriptionId))
  result = call_570288.call(path_570289, query_570290, nil, nil, body_570291)

var webAppsUpdateConnectionStringsSlot* = Call_WebAppsUpdateConnectionStringsSlot_570278(
    name: "webAppsUpdateConnectionStringsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
    validator: validate_WebAppsUpdateConnectionStringsSlot_570279, base: "",
    url: url_WebAppsUpdateConnectionStringsSlot_570280, schemes: {Scheme.Https})
type
  Call_WebAppsListConnectionStringsSlot_570292 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConnectionStringsSlot_570294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/connectionstrings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConnectionStringsSlot_570293(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the connection strings of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570295 = path.getOrDefault("resourceGroupName")
  valid_570295 = validateParameter(valid_570295, JString, required = true,
                                 default = nil)
  if valid_570295 != nil:
    section.add "resourceGroupName", valid_570295
  var valid_570296 = path.getOrDefault("name")
  valid_570296 = validateParameter(valid_570296, JString, required = true,
                                 default = nil)
  if valid_570296 != nil:
    section.add "name", valid_570296
  var valid_570297 = path.getOrDefault("slot")
  valid_570297 = validateParameter(valid_570297, JString, required = true,
                                 default = nil)
  if valid_570297 != nil:
    section.add "slot", valid_570297
  var valid_570298 = path.getOrDefault("subscriptionId")
  valid_570298 = validateParameter(valid_570298, JString, required = true,
                                 default = nil)
  if valid_570298 != nil:
    section.add "subscriptionId", valid_570298
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570299 = query.getOrDefault("api-version")
  valid_570299 = validateParameter(valid_570299, JString, required = true,
                                 default = nil)
  if valid_570299 != nil:
    section.add "api-version", valid_570299
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570300: Call_WebAppsListConnectionStringsSlot_570292;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the connection strings of an app.
  ## 
  let valid = call_570300.validator(path, query, header, formData, body)
  let scheme = call_570300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570300.url(scheme.get, call_570300.host, call_570300.base,
                         call_570300.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570300, url, valid)

proc call*(call_570301: Call_WebAppsListConnectionStringsSlot_570292;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConnectionStringsSlot
  ## Gets the connection strings of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570302 = newJObject()
  var query_570303 = newJObject()
  add(path_570302, "resourceGroupName", newJString(resourceGroupName))
  add(query_570303, "api-version", newJString(apiVersion))
  add(path_570302, "name", newJString(name))
  add(path_570302, "slot", newJString(slot))
  add(path_570302, "subscriptionId", newJString(subscriptionId))
  result = call_570301.call(path_570302, query_570303, nil, nil, nil)

var webAppsListConnectionStringsSlot* = Call_WebAppsListConnectionStringsSlot_570292(
    name: "webAppsListConnectionStringsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
    validator: validate_WebAppsListConnectionStringsSlot_570293, base: "",
    url: url_WebAppsListConnectionStringsSlot_570294, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDiagnosticLogsConfigSlot_570316 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateDiagnosticLogsConfigSlot_570318(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDiagnosticLogsConfigSlot_570317(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570319 = path.getOrDefault("resourceGroupName")
  valid_570319 = validateParameter(valid_570319, JString, required = true,
                                 default = nil)
  if valid_570319 != nil:
    section.add "resourceGroupName", valid_570319
  var valid_570320 = path.getOrDefault("name")
  valid_570320 = validateParameter(valid_570320, JString, required = true,
                                 default = nil)
  if valid_570320 != nil:
    section.add "name", valid_570320
  var valid_570321 = path.getOrDefault("slot")
  valid_570321 = validateParameter(valid_570321, JString, required = true,
                                 default = nil)
  if valid_570321 != nil:
    section.add "slot", valid_570321
  var valid_570322 = path.getOrDefault("subscriptionId")
  valid_570322 = validateParameter(valid_570322, JString, required = true,
                                 default = nil)
  if valid_570322 != nil:
    section.add "subscriptionId", valid_570322
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570323 = query.getOrDefault("api-version")
  valid_570323 = validateParameter(valid_570323, JString, required = true,
                                 default = nil)
  if valid_570323 != nil:
    section.add "api-version", valid_570323
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570325: Call_WebAppsUpdateDiagnosticLogsConfigSlot_570316;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the logging configuration of an app.
  ## 
  let valid = call_570325.validator(path, query, header, formData, body)
  let scheme = call_570325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570325.url(scheme.get, call_570325.host, call_570325.base,
                         call_570325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570325, url, valid)

proc call*(call_570326: Call_WebAppsUpdateDiagnosticLogsConfigSlot_570316;
          resourceGroupName: string; siteLogsConfig: JsonNode; apiVersion: string;
          name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateDiagnosticLogsConfigSlot
  ## Updates the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   siteLogsConfig: JObject (required)
  ##                 : A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570327 = newJObject()
  var query_570328 = newJObject()
  var body_570329 = newJObject()
  add(path_570327, "resourceGroupName", newJString(resourceGroupName))
  if siteLogsConfig != nil:
    body_570329 = siteLogsConfig
  add(query_570328, "api-version", newJString(apiVersion))
  add(path_570327, "name", newJString(name))
  add(path_570327, "slot", newJString(slot))
  add(path_570327, "subscriptionId", newJString(subscriptionId))
  result = call_570326.call(path_570327, query_570328, nil, nil, body_570329)

var webAppsUpdateDiagnosticLogsConfigSlot* = Call_WebAppsUpdateDiagnosticLogsConfigSlot_570316(
    name: "webAppsUpdateDiagnosticLogsConfigSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsUpdateDiagnosticLogsConfigSlot_570317, base: "",
    url: url_WebAppsUpdateDiagnosticLogsConfigSlot_570318, schemes: {Scheme.Https})
type
  Call_WebAppsGetDiagnosticLogsConfigurationSlot_570304 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDiagnosticLogsConfigurationSlot_570306(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/logs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDiagnosticLogsConfigurationSlot_570305(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the logging configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570307 = path.getOrDefault("resourceGroupName")
  valid_570307 = validateParameter(valid_570307, JString, required = true,
                                 default = nil)
  if valid_570307 != nil:
    section.add "resourceGroupName", valid_570307
  var valid_570308 = path.getOrDefault("name")
  valid_570308 = validateParameter(valid_570308, JString, required = true,
                                 default = nil)
  if valid_570308 != nil:
    section.add "name", valid_570308
  var valid_570309 = path.getOrDefault("slot")
  valid_570309 = validateParameter(valid_570309, JString, required = true,
                                 default = nil)
  if valid_570309 != nil:
    section.add "slot", valid_570309
  var valid_570310 = path.getOrDefault("subscriptionId")
  valid_570310 = validateParameter(valid_570310, JString, required = true,
                                 default = nil)
  if valid_570310 != nil:
    section.add "subscriptionId", valid_570310
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570311 = query.getOrDefault("api-version")
  valid_570311 = validateParameter(valid_570311, JString, required = true,
                                 default = nil)
  if valid_570311 != nil:
    section.add "api-version", valid_570311
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570312: Call_WebAppsGetDiagnosticLogsConfigurationSlot_570304;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the logging configuration of an app.
  ## 
  let valid = call_570312.validator(path, query, header, formData, body)
  let scheme = call_570312.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570312.url(scheme.get, call_570312.host, call_570312.base,
                         call_570312.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570312, url, valid)

proc call*(call_570313: Call_WebAppsGetDiagnosticLogsConfigurationSlot_570304;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDiagnosticLogsConfigurationSlot
  ## Gets the logging configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570314 = newJObject()
  var query_570315 = newJObject()
  add(path_570314, "resourceGroupName", newJString(resourceGroupName))
  add(query_570315, "api-version", newJString(apiVersion))
  add(path_570314, "name", newJString(name))
  add(path_570314, "slot", newJString(slot))
  add(path_570314, "subscriptionId", newJString(subscriptionId))
  result = call_570313.call(path_570314, query_570315, nil, nil, nil)

var webAppsGetDiagnosticLogsConfigurationSlot* = Call_WebAppsGetDiagnosticLogsConfigurationSlot_570304(
    name: "webAppsGetDiagnosticLogsConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    validator: validate_WebAppsGetDiagnosticLogsConfigurationSlot_570305,
    base: "", url: url_WebAppsGetDiagnosticLogsConfigurationSlot_570306,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateMetadataSlot_570330 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateMetadataSlot_570332(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateMetadataSlot_570331(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Replaces the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570333 = path.getOrDefault("resourceGroupName")
  valid_570333 = validateParameter(valid_570333, JString, required = true,
                                 default = nil)
  if valid_570333 != nil:
    section.add "resourceGroupName", valid_570333
  var valid_570334 = path.getOrDefault("name")
  valid_570334 = validateParameter(valid_570334, JString, required = true,
                                 default = nil)
  if valid_570334 != nil:
    section.add "name", valid_570334
  var valid_570335 = path.getOrDefault("slot")
  valid_570335 = validateParameter(valid_570335, JString, required = true,
                                 default = nil)
  if valid_570335 != nil:
    section.add "slot", valid_570335
  var valid_570336 = path.getOrDefault("subscriptionId")
  valid_570336 = validateParameter(valid_570336, JString, required = true,
                                 default = nil)
  if valid_570336 != nil:
    section.add "subscriptionId", valid_570336
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570337 = query.getOrDefault("api-version")
  valid_570337 = validateParameter(valid_570337, JString, required = true,
                                 default = nil)
  if valid_570337 != nil:
    section.add "api-version", valid_570337
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570339: Call_WebAppsUpdateMetadataSlot_570330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Replaces the metadata of an app.
  ## 
  let valid = call_570339.validator(path, query, header, formData, body)
  let scheme = call_570339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570339.url(scheme.get, call_570339.host, call_570339.base,
                         call_570339.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570339, url, valid)

proc call*(call_570340: Call_WebAppsUpdateMetadataSlot_570330;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; metadata: JsonNode): Recallable =
  ## webAppsUpdateMetadataSlot
  ## Replaces the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   metadata: JObject (required)
  ##           : Edited metadata of the app or deployment slot. See example.
  var path_570341 = newJObject()
  var query_570342 = newJObject()
  var body_570343 = newJObject()
  add(path_570341, "resourceGroupName", newJString(resourceGroupName))
  add(query_570342, "api-version", newJString(apiVersion))
  add(path_570341, "name", newJString(name))
  add(path_570341, "slot", newJString(slot))
  add(path_570341, "subscriptionId", newJString(subscriptionId))
  if metadata != nil:
    body_570343 = metadata
  result = call_570340.call(path_570341, query_570342, nil, nil, body_570343)

var webAppsUpdateMetadataSlot* = Call_WebAppsUpdateMetadataSlot_570330(
    name: "webAppsUpdateMetadataSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
    validator: validate_WebAppsUpdateMetadataSlot_570331, base: "",
    url: url_WebAppsUpdateMetadataSlot_570332, schemes: {Scheme.Https})
type
  Call_WebAppsListMetadataSlot_570344 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetadataSlot_570346(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/metadata/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetadataSlot_570345(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the metadata of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570347 = path.getOrDefault("resourceGroupName")
  valid_570347 = validateParameter(valid_570347, JString, required = true,
                                 default = nil)
  if valid_570347 != nil:
    section.add "resourceGroupName", valid_570347
  var valid_570348 = path.getOrDefault("name")
  valid_570348 = validateParameter(valid_570348, JString, required = true,
                                 default = nil)
  if valid_570348 != nil:
    section.add "name", valid_570348
  var valid_570349 = path.getOrDefault("slot")
  valid_570349 = validateParameter(valid_570349, JString, required = true,
                                 default = nil)
  if valid_570349 != nil:
    section.add "slot", valid_570349
  var valid_570350 = path.getOrDefault("subscriptionId")
  valid_570350 = validateParameter(valid_570350, JString, required = true,
                                 default = nil)
  if valid_570350 != nil:
    section.add "subscriptionId", valid_570350
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570351 = query.getOrDefault("api-version")
  valid_570351 = validateParameter(valid_570351, JString, required = true,
                                 default = nil)
  if valid_570351 != nil:
    section.add "api-version", valid_570351
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570352: Call_WebAppsListMetadataSlot_570344; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the metadata of an app.
  ## 
  let valid = call_570352.validator(path, query, header, formData, body)
  let scheme = call_570352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570352.url(scheme.get, call_570352.host, call_570352.base,
                         call_570352.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570352, url, valid)

proc call*(call_570353: Call_WebAppsListMetadataSlot_570344;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetadataSlot
  ## Gets the metadata of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570354 = newJObject()
  var query_570355 = newJObject()
  add(path_570354, "resourceGroupName", newJString(resourceGroupName))
  add(query_570355, "api-version", newJString(apiVersion))
  add(path_570354, "name", newJString(name))
  add(path_570354, "slot", newJString(slot))
  add(path_570354, "subscriptionId", newJString(subscriptionId))
  result = call_570353.call(path_570354, query_570355, nil, nil, nil)

var webAppsListMetadataSlot* = Call_WebAppsListMetadataSlot_570344(
    name: "webAppsListMetadataSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
    validator: validate_WebAppsListMetadataSlot_570345, base: "",
    url: url_WebAppsListMetadataSlot_570346, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingCredentialsSlot_570356 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublishingCredentialsSlot_570358(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/config/publishingcredentials/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingCredentialsSlot_570357(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570359 = path.getOrDefault("resourceGroupName")
  valid_570359 = validateParameter(valid_570359, JString, required = true,
                                 default = nil)
  if valid_570359 != nil:
    section.add "resourceGroupName", valid_570359
  var valid_570360 = path.getOrDefault("name")
  valid_570360 = validateParameter(valid_570360, JString, required = true,
                                 default = nil)
  if valid_570360 != nil:
    section.add "name", valid_570360
  var valid_570361 = path.getOrDefault("slot")
  valid_570361 = validateParameter(valid_570361, JString, required = true,
                                 default = nil)
  if valid_570361 != nil:
    section.add "slot", valid_570361
  var valid_570362 = path.getOrDefault("subscriptionId")
  valid_570362 = validateParameter(valid_570362, JString, required = true,
                                 default = nil)
  if valid_570362 != nil:
    section.add "subscriptionId", valid_570362
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570363 = query.getOrDefault("api-version")
  valid_570363 = validateParameter(valid_570363, JString, required = true,
                                 default = nil)
  if valid_570363 != nil:
    section.add "api-version", valid_570363
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570364: Call_WebAppsListPublishingCredentialsSlot_570356;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Git/FTP publishing credentials of an app.
  ## 
  let valid = call_570364.validator(path, query, header, formData, body)
  let scheme = call_570364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570364.url(scheme.get, call_570364.host, call_570364.base,
                         call_570364.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570364, url, valid)

proc call*(call_570365: Call_WebAppsListPublishingCredentialsSlot_570356;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublishingCredentialsSlot
  ## Gets the Git/FTP publishing credentials of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570366 = newJObject()
  var query_570367 = newJObject()
  add(path_570366, "resourceGroupName", newJString(resourceGroupName))
  add(query_570367, "api-version", newJString(apiVersion))
  add(path_570366, "name", newJString(name))
  add(path_570366, "slot", newJString(slot))
  add(path_570366, "subscriptionId", newJString(subscriptionId))
  result = call_570365.call(path_570366, query_570367, nil, nil, nil)

var webAppsListPublishingCredentialsSlot* = Call_WebAppsListPublishingCredentialsSlot_570356(
    name: "webAppsListPublishingCredentialsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
    validator: validate_WebAppsListPublishingCredentialsSlot_570357, base: "",
    url: url_WebAppsListPublishingCredentialsSlot_570358, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSitePushSettingsSlot_570368 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSitePushSettingsSlot_570370(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSitePushSettingsSlot_570369(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570371 = path.getOrDefault("resourceGroupName")
  valid_570371 = validateParameter(valid_570371, JString, required = true,
                                 default = nil)
  if valid_570371 != nil:
    section.add "resourceGroupName", valid_570371
  var valid_570372 = path.getOrDefault("name")
  valid_570372 = validateParameter(valid_570372, JString, required = true,
                                 default = nil)
  if valid_570372 != nil:
    section.add "name", valid_570372
  var valid_570373 = path.getOrDefault("slot")
  valid_570373 = validateParameter(valid_570373, JString, required = true,
                                 default = nil)
  if valid_570373 != nil:
    section.add "slot", valid_570373
  var valid_570374 = path.getOrDefault("subscriptionId")
  valid_570374 = validateParameter(valid_570374, JString, required = true,
                                 default = nil)
  if valid_570374 != nil:
    section.add "subscriptionId", valid_570374
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570375 = query.getOrDefault("api-version")
  valid_570375 = validateParameter(valid_570375, JString, required = true,
                                 default = nil)
  if valid_570375 != nil:
    section.add "api-version", valid_570375
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570377: Call_WebAppsUpdateSitePushSettingsSlot_570368;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the Push settings associated with web app.
  ## 
  let valid = call_570377.validator(path, query, header, formData, body)
  let scheme = call_570377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570377.url(scheme.get, call_570377.host, call_570377.base,
                         call_570377.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570377, url, valid)

proc call*(call_570378: Call_WebAppsUpdateSitePushSettingsSlot_570368;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; pushSettings: JsonNode): Recallable =
  ## webAppsUpdateSitePushSettingsSlot
  ## Updates the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   pushSettings: JObject (required)
  ##               : Push settings associated with web app.
  var path_570379 = newJObject()
  var query_570380 = newJObject()
  var body_570381 = newJObject()
  add(path_570379, "resourceGroupName", newJString(resourceGroupName))
  add(query_570380, "api-version", newJString(apiVersion))
  add(path_570379, "name", newJString(name))
  add(path_570379, "slot", newJString(slot))
  add(path_570379, "subscriptionId", newJString(subscriptionId))
  if pushSettings != nil:
    body_570381 = pushSettings
  result = call_570378.call(path_570379, query_570380, nil, nil, body_570381)

var webAppsUpdateSitePushSettingsSlot* = Call_WebAppsUpdateSitePushSettingsSlot_570368(
    name: "webAppsUpdateSitePushSettingsSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings",
    validator: validate_WebAppsUpdateSitePushSettingsSlot_570369, base: "",
    url: url_WebAppsUpdateSitePushSettingsSlot_570370, schemes: {Scheme.Https})
type
  Call_WebAppsListSitePushSettingsSlot_570382 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSitePushSettingsSlot_570384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/pushsettings/list")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSitePushSettingsSlot_570383(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the Push settings associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570385 = path.getOrDefault("resourceGroupName")
  valid_570385 = validateParameter(valid_570385, JString, required = true,
                                 default = nil)
  if valid_570385 != nil:
    section.add "resourceGroupName", valid_570385
  var valid_570386 = path.getOrDefault("name")
  valid_570386 = validateParameter(valid_570386, JString, required = true,
                                 default = nil)
  if valid_570386 != nil:
    section.add "name", valid_570386
  var valid_570387 = path.getOrDefault("slot")
  valid_570387 = validateParameter(valid_570387, JString, required = true,
                                 default = nil)
  if valid_570387 != nil:
    section.add "slot", valid_570387
  var valid_570388 = path.getOrDefault("subscriptionId")
  valid_570388 = validateParameter(valid_570388, JString, required = true,
                                 default = nil)
  if valid_570388 != nil:
    section.add "subscriptionId", valid_570388
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570389 = query.getOrDefault("api-version")
  valid_570389 = validateParameter(valid_570389, JString, required = true,
                                 default = nil)
  if valid_570389 != nil:
    section.add "api-version", valid_570389
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570390: Call_WebAppsListSitePushSettingsSlot_570382;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the Push settings associated with web app.
  ## 
  let valid = call_570390.validator(path, query, header, formData, body)
  let scheme = call_570390.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570390.url(scheme.get, call_570390.host, call_570390.base,
                         call_570390.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570390, url, valid)

proc call*(call_570391: Call_WebAppsListSitePushSettingsSlot_570382;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSitePushSettingsSlot
  ## Gets the Push settings associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570392 = newJObject()
  var query_570393 = newJObject()
  add(path_570392, "resourceGroupName", newJString(resourceGroupName))
  add(query_570393, "api-version", newJString(apiVersion))
  add(path_570392, "name", newJString(name))
  add(path_570392, "slot", newJString(slot))
  add(path_570392, "subscriptionId", newJString(subscriptionId))
  result = call_570391.call(path_570392, query_570393, nil, nil, nil)

var webAppsListSitePushSettingsSlot* = Call_WebAppsListSitePushSettingsSlot_570382(
    name: "webAppsListSitePushSettingsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list",
    validator: validate_WebAppsListSitePushSettingsSlot_570383, base: "",
    url: url_WebAppsListSitePushSettingsSlot_570384, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateConfigurationSlot_570406 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateConfigurationSlot_570408(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateConfigurationSlot_570407(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570409 = path.getOrDefault("resourceGroupName")
  valid_570409 = validateParameter(valid_570409, JString, required = true,
                                 default = nil)
  if valid_570409 != nil:
    section.add "resourceGroupName", valid_570409
  var valid_570410 = path.getOrDefault("name")
  valid_570410 = validateParameter(valid_570410, JString, required = true,
                                 default = nil)
  if valid_570410 != nil:
    section.add "name", valid_570410
  var valid_570411 = path.getOrDefault("slot")
  valid_570411 = validateParameter(valid_570411, JString, required = true,
                                 default = nil)
  if valid_570411 != nil:
    section.add "slot", valid_570411
  var valid_570412 = path.getOrDefault("subscriptionId")
  valid_570412 = validateParameter(valid_570412, JString, required = true,
                                 default = nil)
  if valid_570412 != nil:
    section.add "subscriptionId", valid_570412
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570413 = query.getOrDefault("api-version")
  valid_570413 = validateParameter(valid_570413, JString, required = true,
                                 default = nil)
  if valid_570413 != nil:
    section.add "api-version", valid_570413
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570415: Call_WebAppsCreateOrUpdateConfigurationSlot_570406;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_570415.validator(path, query, header, formData, body)
  let scheme = call_570415.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570415.url(scheme.get, call_570415.host, call_570415.base,
                         call_570415.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570415, url, valid)

proc call*(call_570416: Call_WebAppsCreateOrUpdateConfigurationSlot_570406;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570417 = newJObject()
  var query_570418 = newJObject()
  var body_570419 = newJObject()
  add(path_570417, "resourceGroupName", newJString(resourceGroupName))
  add(query_570418, "api-version", newJString(apiVersion))
  add(path_570417, "name", newJString(name))
  if siteConfig != nil:
    body_570419 = siteConfig
  add(path_570417, "slot", newJString(slot))
  add(path_570417, "subscriptionId", newJString(subscriptionId))
  result = call_570416.call(path_570417, query_570418, nil, nil, body_570419)

var webAppsCreateOrUpdateConfigurationSlot* = Call_WebAppsCreateOrUpdateConfigurationSlot_570406(
    name: "webAppsCreateOrUpdateConfigurationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsCreateOrUpdateConfigurationSlot_570407, base: "",
    url: url_WebAppsCreateOrUpdateConfigurationSlot_570408,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSlot_570394 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetConfigurationSlot_570396(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSlot_570395(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570397 = path.getOrDefault("resourceGroupName")
  valid_570397 = validateParameter(valid_570397, JString, required = true,
                                 default = nil)
  if valid_570397 != nil:
    section.add "resourceGroupName", valid_570397
  var valid_570398 = path.getOrDefault("name")
  valid_570398 = validateParameter(valid_570398, JString, required = true,
                                 default = nil)
  if valid_570398 != nil:
    section.add "name", valid_570398
  var valid_570399 = path.getOrDefault("slot")
  valid_570399 = validateParameter(valid_570399, JString, required = true,
                                 default = nil)
  if valid_570399 != nil:
    section.add "slot", valid_570399
  var valid_570400 = path.getOrDefault("subscriptionId")
  valid_570400 = validateParameter(valid_570400, JString, required = true,
                                 default = nil)
  if valid_570400 != nil:
    section.add "subscriptionId", valid_570400
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570401 = query.getOrDefault("api-version")
  valid_570401 = validateParameter(valid_570401, JString, required = true,
                                 default = nil)
  if valid_570401 != nil:
    section.add "api-version", valid_570401
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570402: Call_WebAppsGetConfigurationSlot_570394; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ## 
  let valid = call_570402.validator(path, query, header, formData, body)
  let scheme = call_570402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570402.url(scheme.get, call_570402.host, call_570402.base,
                         call_570402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570402, url, valid)

proc call*(call_570403: Call_WebAppsGetConfigurationSlot_570394;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSlot
  ## Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570404 = newJObject()
  var query_570405 = newJObject()
  add(path_570404, "resourceGroupName", newJString(resourceGroupName))
  add(query_570405, "api-version", newJString(apiVersion))
  add(path_570404, "name", newJString(name))
  add(path_570404, "slot", newJString(slot))
  add(path_570404, "subscriptionId", newJString(subscriptionId))
  result = call_570403.call(path_570404, query_570405, nil, nil, nil)

var webAppsGetConfigurationSlot* = Call_WebAppsGetConfigurationSlot_570394(
    name: "webAppsGetConfigurationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsGetConfigurationSlot_570395, base: "",
    url: url_WebAppsGetConfigurationSlot_570396, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateConfigurationSlot_570420 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateConfigurationSlot_570422(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateConfigurationSlot_570421(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570423 = path.getOrDefault("resourceGroupName")
  valid_570423 = validateParameter(valid_570423, JString, required = true,
                                 default = nil)
  if valid_570423 != nil:
    section.add "resourceGroupName", valid_570423
  var valid_570424 = path.getOrDefault("name")
  valid_570424 = validateParameter(valid_570424, JString, required = true,
                                 default = nil)
  if valid_570424 != nil:
    section.add "name", valid_570424
  var valid_570425 = path.getOrDefault("slot")
  valid_570425 = validateParameter(valid_570425, JString, required = true,
                                 default = nil)
  if valid_570425 != nil:
    section.add "slot", valid_570425
  var valid_570426 = path.getOrDefault("subscriptionId")
  valid_570426 = validateParameter(valid_570426, JString, required = true,
                                 default = nil)
  if valid_570426 != nil:
    section.add "subscriptionId", valid_570426
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570427 = query.getOrDefault("api-version")
  valid_570427 = validateParameter(valid_570427, JString, required = true,
                                 default = nil)
  if valid_570427 != nil:
    section.add "api-version", valid_570427
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570429: Call_WebAppsUpdateConfigurationSlot_570420; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the configuration of an app.
  ## 
  let valid = call_570429.validator(path, query, header, formData, body)
  let scheme = call_570429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570429.url(scheme.get, call_570429.host, call_570429.base,
                         call_570429.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570429, url, valid)

proc call*(call_570430: Call_WebAppsUpdateConfigurationSlot_570420;
          resourceGroupName: string; apiVersion: string; name: string;
          siteConfig: JsonNode; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateConfigurationSlot
  ## Updates the configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   siteConfig: JObject (required)
  ##             : JSON representation of a SiteConfig object. See example.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570431 = newJObject()
  var query_570432 = newJObject()
  var body_570433 = newJObject()
  add(path_570431, "resourceGroupName", newJString(resourceGroupName))
  add(query_570432, "api-version", newJString(apiVersion))
  add(path_570431, "name", newJString(name))
  if siteConfig != nil:
    body_570433 = siteConfig
  add(path_570431, "slot", newJString(slot))
  add(path_570431, "subscriptionId", newJString(subscriptionId))
  result = call_570430.call(path_570431, query_570432, nil, nil, body_570433)

var webAppsUpdateConfigurationSlot* = Call_WebAppsUpdateConfigurationSlot_570420(
    name: "webAppsUpdateConfigurationSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    validator: validate_WebAppsUpdateConfigurationSlot_570421, base: "",
    url: url_WebAppsUpdateConfigurationSlot_570422, schemes: {Scheme.Https})
type
  Call_WebAppsListConfigurationSnapshotInfoSlot_570434 = ref object of OpenApiRestCall_567666
proc url_WebAppsListConfigurationSnapshotInfoSlot_570436(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListConfigurationSnapshotInfoSlot_570435(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570437 = path.getOrDefault("resourceGroupName")
  valid_570437 = validateParameter(valid_570437, JString, required = true,
                                 default = nil)
  if valid_570437 != nil:
    section.add "resourceGroupName", valid_570437
  var valid_570438 = path.getOrDefault("name")
  valid_570438 = validateParameter(valid_570438, JString, required = true,
                                 default = nil)
  if valid_570438 != nil:
    section.add "name", valid_570438
  var valid_570439 = path.getOrDefault("slot")
  valid_570439 = validateParameter(valid_570439, JString, required = true,
                                 default = nil)
  if valid_570439 != nil:
    section.add "slot", valid_570439
  var valid_570440 = path.getOrDefault("subscriptionId")
  valid_570440 = validateParameter(valid_570440, JString, required = true,
                                 default = nil)
  if valid_570440 != nil:
    section.add "subscriptionId", valid_570440
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570441 = query.getOrDefault("api-version")
  valid_570441 = validateParameter(valid_570441, JString, required = true,
                                 default = nil)
  if valid_570441 != nil:
    section.add "api-version", valid_570441
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570442: Call_WebAppsListConfigurationSnapshotInfoSlot_570434;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ## 
  let valid = call_570442.validator(path, query, header, formData, body)
  let scheme = call_570442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570442.url(scheme.get, call_570442.host, call_570442.base,
                         call_570442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570442, url, valid)

proc call*(call_570443: Call_WebAppsListConfigurationSnapshotInfoSlot_570434;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListConfigurationSnapshotInfoSlot
  ## Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570444 = newJObject()
  var query_570445 = newJObject()
  add(path_570444, "resourceGroupName", newJString(resourceGroupName))
  add(query_570445, "api-version", newJString(apiVersion))
  add(path_570444, "name", newJString(name))
  add(path_570444, "slot", newJString(slot))
  add(path_570444, "subscriptionId", newJString(subscriptionId))
  result = call_570443.call(path_570444, query_570445, nil, nil, nil)

var webAppsListConfigurationSnapshotInfoSlot* = Call_WebAppsListConfigurationSnapshotInfoSlot_570434(
    name: "webAppsListConfigurationSnapshotInfoSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots",
    validator: validate_WebAppsListConfigurationSnapshotInfoSlot_570435, base: "",
    url: url_WebAppsListConfigurationSnapshotInfoSlot_570436,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetConfigurationSnapshotSlot_570446 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetConfigurationSnapshotSlot_570448(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetConfigurationSnapshotSlot_570447(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570449 = path.getOrDefault("resourceGroupName")
  valid_570449 = validateParameter(valid_570449, JString, required = true,
                                 default = nil)
  if valid_570449 != nil:
    section.add "resourceGroupName", valid_570449
  var valid_570450 = path.getOrDefault("name")
  valid_570450 = validateParameter(valid_570450, JString, required = true,
                                 default = nil)
  if valid_570450 != nil:
    section.add "name", valid_570450
  var valid_570451 = path.getOrDefault("snapshotId")
  valid_570451 = validateParameter(valid_570451, JString, required = true,
                                 default = nil)
  if valid_570451 != nil:
    section.add "snapshotId", valid_570451
  var valid_570452 = path.getOrDefault("slot")
  valid_570452 = validateParameter(valid_570452, JString, required = true,
                                 default = nil)
  if valid_570452 != nil:
    section.add "slot", valid_570452
  var valid_570453 = path.getOrDefault("subscriptionId")
  valid_570453 = validateParameter(valid_570453, JString, required = true,
                                 default = nil)
  if valid_570453 != nil:
    section.add "subscriptionId", valid_570453
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570454 = query.getOrDefault("api-version")
  valid_570454 = validateParameter(valid_570454, JString, required = true,
                                 default = nil)
  if valid_570454 != nil:
    section.add "api-version", valid_570454
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570455: Call_WebAppsGetConfigurationSnapshotSlot_570446;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ## 
  let valid = call_570455.validator(path, query, header, formData, body)
  let scheme = call_570455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570455.url(scheme.get, call_570455.host, call_570455.base,
                         call_570455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570455, url, valid)

proc call*(call_570456: Call_WebAppsGetConfigurationSnapshotSlot_570446;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetConfigurationSnapshotSlot
  ## Gets a snapshot of the configuration of an app at a previous point in time.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570457 = newJObject()
  var query_570458 = newJObject()
  add(path_570457, "resourceGroupName", newJString(resourceGroupName))
  add(query_570458, "api-version", newJString(apiVersion))
  add(path_570457, "name", newJString(name))
  add(path_570457, "snapshotId", newJString(snapshotId))
  add(path_570457, "slot", newJString(slot))
  add(path_570457, "subscriptionId", newJString(subscriptionId))
  result = call_570456.call(path_570457, query_570458, nil, nil, nil)

var webAppsGetConfigurationSnapshotSlot* = Call_WebAppsGetConfigurationSnapshotSlot_570446(
    name: "webAppsGetConfigurationSnapshotSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}",
    validator: validate_WebAppsGetConfigurationSnapshotSlot_570447, base: "",
    url: url_WebAppsGetConfigurationSnapshotSlot_570448, schemes: {Scheme.Https})
type
  Call_WebAppsRecoverSiteConfigurationSnapshotSlot_570459 = ref object of OpenApiRestCall_567666
proc url_WebAppsRecoverSiteConfigurationSnapshotSlot_570461(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "snapshotId" in path, "`snapshotId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/config/web/snapshots/"),
               (kind: VariableSegment, value: "snapshotId"),
               (kind: ConstantSegment, value: "/recover")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRecoverSiteConfigurationSnapshotSlot_570460(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   snapshotId: JString (required)
  ##             : The ID of the snapshot to read.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570462 = path.getOrDefault("resourceGroupName")
  valid_570462 = validateParameter(valid_570462, JString, required = true,
                                 default = nil)
  if valid_570462 != nil:
    section.add "resourceGroupName", valid_570462
  var valid_570463 = path.getOrDefault("name")
  valid_570463 = validateParameter(valid_570463, JString, required = true,
                                 default = nil)
  if valid_570463 != nil:
    section.add "name", valid_570463
  var valid_570464 = path.getOrDefault("snapshotId")
  valid_570464 = validateParameter(valid_570464, JString, required = true,
                                 default = nil)
  if valid_570464 != nil:
    section.add "snapshotId", valid_570464
  var valid_570465 = path.getOrDefault("slot")
  valid_570465 = validateParameter(valid_570465, JString, required = true,
                                 default = nil)
  if valid_570465 != nil:
    section.add "slot", valid_570465
  var valid_570466 = path.getOrDefault("subscriptionId")
  valid_570466 = validateParameter(valid_570466, JString, required = true,
                                 default = nil)
  if valid_570466 != nil:
    section.add "subscriptionId", valid_570466
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570467 = query.getOrDefault("api-version")
  valid_570467 = validateParameter(valid_570467, JString, required = true,
                                 default = nil)
  if valid_570467 != nil:
    section.add "api-version", valid_570467
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570468: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_570459;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Reverts the configuration of an app to a previous snapshot.
  ## 
  let valid = call_570468.validator(path, query, header, formData, body)
  let scheme = call_570468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570468.url(scheme.get, call_570468.host, call_570468.base,
                         call_570468.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570468, url, valid)

proc call*(call_570469: Call_WebAppsRecoverSiteConfigurationSnapshotSlot_570459;
          resourceGroupName: string; apiVersion: string; name: string;
          snapshotId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsRecoverSiteConfigurationSnapshotSlot
  ## Reverts the configuration of an app to a previous snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   snapshotId: string (required)
  ##             : The ID of the snapshot to read.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570470 = newJObject()
  var query_570471 = newJObject()
  add(path_570470, "resourceGroupName", newJString(resourceGroupName))
  add(query_570471, "api-version", newJString(apiVersion))
  add(path_570470, "name", newJString(name))
  add(path_570470, "snapshotId", newJString(snapshotId))
  add(path_570470, "slot", newJString(slot))
  add(path_570470, "subscriptionId", newJString(subscriptionId))
  result = call_570469.call(path_570470, query_570471, nil, nil, nil)

var webAppsRecoverSiteConfigurationSnapshotSlot* = Call_WebAppsRecoverSiteConfigurationSnapshotSlot_570459(
    name: "webAppsRecoverSiteConfigurationSnapshotSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover",
    validator: validate_WebAppsRecoverSiteConfigurationSnapshotSlot_570460,
    base: "", url: url_WebAppsRecoverSiteConfigurationSnapshotSlot_570461,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetWebSiteContainerLogsSlot_570472 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetWebSiteContainerLogsSlot_570474(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebSiteContainerLogsSlot_570473(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the last lines of docker logs for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570475 = path.getOrDefault("resourceGroupName")
  valid_570475 = validateParameter(valid_570475, JString, required = true,
                                 default = nil)
  if valid_570475 != nil:
    section.add "resourceGroupName", valid_570475
  var valid_570476 = path.getOrDefault("name")
  valid_570476 = validateParameter(valid_570476, JString, required = true,
                                 default = nil)
  if valid_570476 != nil:
    section.add "name", valid_570476
  var valid_570477 = path.getOrDefault("slot")
  valid_570477 = validateParameter(valid_570477, JString, required = true,
                                 default = nil)
  if valid_570477 != nil:
    section.add "slot", valid_570477
  var valid_570478 = path.getOrDefault("subscriptionId")
  valid_570478 = validateParameter(valid_570478, JString, required = true,
                                 default = nil)
  if valid_570478 != nil:
    section.add "subscriptionId", valid_570478
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570479 = query.getOrDefault("api-version")
  valid_570479 = validateParameter(valid_570479, JString, required = true,
                                 default = nil)
  if valid_570479 != nil:
    section.add "api-version", valid_570479
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570480: Call_WebAppsGetWebSiteContainerLogsSlot_570472;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the last lines of docker logs for the given site
  ## 
  let valid = call_570480.validator(path, query, header, formData, body)
  let scheme = call_570480.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570480.url(scheme.get, call_570480.host, call_570480.base,
                         call_570480.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570480, url, valid)

proc call*(call_570481: Call_WebAppsGetWebSiteContainerLogsSlot_570472;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetWebSiteContainerLogsSlot
  ## Gets the last lines of docker logs for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570482 = newJObject()
  var query_570483 = newJObject()
  add(path_570482, "resourceGroupName", newJString(resourceGroupName))
  add(query_570483, "api-version", newJString(apiVersion))
  add(path_570482, "name", newJString(name))
  add(path_570482, "slot", newJString(slot))
  add(path_570482, "subscriptionId", newJString(subscriptionId))
  result = call_570481.call(path_570482, query_570483, nil, nil, nil)

var webAppsGetWebSiteContainerLogsSlot* = Call_WebAppsGetWebSiteContainerLogsSlot_570472(
    name: "webAppsGetWebSiteContainerLogsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs",
    validator: validate_WebAppsGetWebSiteContainerLogsSlot_570473, base: "",
    url: url_WebAppsGetWebSiteContainerLogsSlot_570474, schemes: {Scheme.Https})
type
  Call_WebAppsGetContainerLogsZipSlot_570484 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetContainerLogsZipSlot_570486(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/containerlogs/zip/download")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContainerLogsZipSlot_570485(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570487 = path.getOrDefault("resourceGroupName")
  valid_570487 = validateParameter(valid_570487, JString, required = true,
                                 default = nil)
  if valid_570487 != nil:
    section.add "resourceGroupName", valid_570487
  var valid_570488 = path.getOrDefault("name")
  valid_570488 = validateParameter(valid_570488, JString, required = true,
                                 default = nil)
  if valid_570488 != nil:
    section.add "name", valid_570488
  var valid_570489 = path.getOrDefault("slot")
  valid_570489 = validateParameter(valid_570489, JString, required = true,
                                 default = nil)
  if valid_570489 != nil:
    section.add "slot", valid_570489
  var valid_570490 = path.getOrDefault("subscriptionId")
  valid_570490 = validateParameter(valid_570490, JString, required = true,
                                 default = nil)
  if valid_570490 != nil:
    section.add "subscriptionId", valid_570490
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570491 = query.getOrDefault("api-version")
  valid_570491 = validateParameter(valid_570491, JString, required = true,
                                 default = nil)
  if valid_570491 != nil:
    section.add "api-version", valid_570491
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570492: Call_WebAppsGetContainerLogsZipSlot_570484; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the ZIP archived docker log files for the given site
  ## 
  let valid = call_570492.validator(path, query, header, formData, body)
  let scheme = call_570492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570492.url(scheme.get, call_570492.host, call_570492.base,
                         call_570492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570492, url, valid)

proc call*(call_570493: Call_WebAppsGetContainerLogsZipSlot_570484;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetContainerLogsZipSlot
  ## Gets the ZIP archived docker log files for the given site
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570494 = newJObject()
  var query_570495 = newJObject()
  add(path_570494, "resourceGroupName", newJString(resourceGroupName))
  add(query_570495, "api-version", newJString(apiVersion))
  add(path_570494, "name", newJString(name))
  add(path_570494, "slot", newJString(slot))
  add(path_570494, "subscriptionId", newJString(subscriptionId))
  result = call_570493.call(path_570494, query_570495, nil, nil, nil)

var webAppsGetContainerLogsZipSlot* = Call_WebAppsGetContainerLogsZipSlot_570484(
    name: "webAppsGetContainerLogsZipSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download",
    validator: validate_WebAppsGetContainerLogsZipSlot_570485, base: "",
    url: url_WebAppsGetContainerLogsZipSlot_570486, schemes: {Scheme.Https})
type
  Call_WebAppsListContinuousWebJobsSlot_570496 = ref object of OpenApiRestCall_567666
proc url_WebAppsListContinuousWebJobsSlot_570498(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListContinuousWebJobsSlot_570497(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570499 = path.getOrDefault("resourceGroupName")
  valid_570499 = validateParameter(valid_570499, JString, required = true,
                                 default = nil)
  if valid_570499 != nil:
    section.add "resourceGroupName", valid_570499
  var valid_570500 = path.getOrDefault("name")
  valid_570500 = validateParameter(valid_570500, JString, required = true,
                                 default = nil)
  if valid_570500 != nil:
    section.add "name", valid_570500
  var valid_570501 = path.getOrDefault("slot")
  valid_570501 = validateParameter(valid_570501, JString, required = true,
                                 default = nil)
  if valid_570501 != nil:
    section.add "slot", valid_570501
  var valid_570502 = path.getOrDefault("subscriptionId")
  valid_570502 = validateParameter(valid_570502, JString, required = true,
                                 default = nil)
  if valid_570502 != nil:
    section.add "subscriptionId", valid_570502
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570503 = query.getOrDefault("api-version")
  valid_570503 = validateParameter(valid_570503, JString, required = true,
                                 default = nil)
  if valid_570503 != nil:
    section.add "api-version", valid_570503
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570504: Call_WebAppsListContinuousWebJobsSlot_570496;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List continuous web jobs for an app, or a deployment slot.
  ## 
  let valid = call_570504.validator(path, query, header, formData, body)
  let scheme = call_570504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570504.url(scheme.get, call_570504.host, call_570504.base,
                         call_570504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570504, url, valid)

proc call*(call_570505: Call_WebAppsListContinuousWebJobsSlot_570496;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListContinuousWebJobsSlot
  ## List continuous web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570506 = newJObject()
  var query_570507 = newJObject()
  add(path_570506, "resourceGroupName", newJString(resourceGroupName))
  add(query_570507, "api-version", newJString(apiVersion))
  add(path_570506, "name", newJString(name))
  add(path_570506, "slot", newJString(slot))
  add(path_570506, "subscriptionId", newJString(subscriptionId))
  result = call_570505.call(path_570506, query_570507, nil, nil, nil)

var webAppsListContinuousWebJobsSlot* = Call_WebAppsListContinuousWebJobsSlot_570496(
    name: "webAppsListContinuousWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs",
    validator: validate_WebAppsListContinuousWebJobsSlot_570497, base: "",
    url: url_WebAppsListContinuousWebJobsSlot_570498, schemes: {Scheme.Https})
type
  Call_WebAppsGetContinuousWebJobSlot_570508 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetContinuousWebJobSlot_570510(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetContinuousWebJobSlot_570509(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570511 = path.getOrDefault("resourceGroupName")
  valid_570511 = validateParameter(valid_570511, JString, required = true,
                                 default = nil)
  if valid_570511 != nil:
    section.add "resourceGroupName", valid_570511
  var valid_570512 = path.getOrDefault("name")
  valid_570512 = validateParameter(valid_570512, JString, required = true,
                                 default = nil)
  if valid_570512 != nil:
    section.add "name", valid_570512
  var valid_570513 = path.getOrDefault("slot")
  valid_570513 = validateParameter(valid_570513, JString, required = true,
                                 default = nil)
  if valid_570513 != nil:
    section.add "slot", valid_570513
  var valid_570514 = path.getOrDefault("subscriptionId")
  valid_570514 = validateParameter(valid_570514, JString, required = true,
                                 default = nil)
  if valid_570514 != nil:
    section.add "subscriptionId", valid_570514
  var valid_570515 = path.getOrDefault("webJobName")
  valid_570515 = validateParameter(valid_570515, JString, required = true,
                                 default = nil)
  if valid_570515 != nil:
    section.add "webJobName", valid_570515
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570516 = query.getOrDefault("api-version")
  valid_570516 = validateParameter(valid_570516, JString, required = true,
                                 default = nil)
  if valid_570516 != nil:
    section.add "api-version", valid_570516
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570517: Call_WebAppsGetContinuousWebJobSlot_570508; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_570517.validator(path, query, header, formData, body)
  let scheme = call_570517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570517.url(scheme.get, call_570517.host, call_570517.base,
                         call_570517.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570517, url, valid)

proc call*(call_570518: Call_WebAppsGetContinuousWebJobSlot_570508;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetContinuousWebJobSlot
  ## Gets a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_570519 = newJObject()
  var query_570520 = newJObject()
  add(path_570519, "resourceGroupName", newJString(resourceGroupName))
  add(query_570520, "api-version", newJString(apiVersion))
  add(path_570519, "name", newJString(name))
  add(path_570519, "slot", newJString(slot))
  add(path_570519, "subscriptionId", newJString(subscriptionId))
  add(path_570519, "webJobName", newJString(webJobName))
  result = call_570518.call(path_570519, query_570520, nil, nil, nil)

var webAppsGetContinuousWebJobSlot* = Call_WebAppsGetContinuousWebJobSlot_570508(
    name: "webAppsGetContinuousWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsGetContinuousWebJobSlot_570509, base: "",
    url: url_WebAppsGetContinuousWebJobSlot_570510, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteContinuousWebJobSlot_570521 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteContinuousWebJobSlot_570523(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteContinuousWebJobSlot_570522(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570524 = path.getOrDefault("resourceGroupName")
  valid_570524 = validateParameter(valid_570524, JString, required = true,
                                 default = nil)
  if valid_570524 != nil:
    section.add "resourceGroupName", valid_570524
  var valid_570525 = path.getOrDefault("name")
  valid_570525 = validateParameter(valid_570525, JString, required = true,
                                 default = nil)
  if valid_570525 != nil:
    section.add "name", valid_570525
  var valid_570526 = path.getOrDefault("slot")
  valid_570526 = validateParameter(valid_570526, JString, required = true,
                                 default = nil)
  if valid_570526 != nil:
    section.add "slot", valid_570526
  var valid_570527 = path.getOrDefault("subscriptionId")
  valid_570527 = validateParameter(valid_570527, JString, required = true,
                                 default = nil)
  if valid_570527 != nil:
    section.add "subscriptionId", valid_570527
  var valid_570528 = path.getOrDefault("webJobName")
  valid_570528 = validateParameter(valid_570528, JString, required = true,
                                 default = nil)
  if valid_570528 != nil:
    section.add "webJobName", valid_570528
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570529 = query.getOrDefault("api-version")
  valid_570529 = validateParameter(valid_570529, JString, required = true,
                                 default = nil)
  if valid_570529 != nil:
    section.add "api-version", valid_570529
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570530: Call_WebAppsDeleteContinuousWebJobSlot_570521;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_570530.validator(path, query, header, formData, body)
  let scheme = call_570530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570530.url(scheme.get, call_570530.host, call_570530.base,
                         call_570530.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570530, url, valid)

proc call*(call_570531: Call_WebAppsDeleteContinuousWebJobSlot_570521;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteContinuousWebJobSlot
  ## Delete a continuous web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_570532 = newJObject()
  var query_570533 = newJObject()
  add(path_570532, "resourceGroupName", newJString(resourceGroupName))
  add(query_570533, "api-version", newJString(apiVersion))
  add(path_570532, "name", newJString(name))
  add(path_570532, "slot", newJString(slot))
  add(path_570532, "subscriptionId", newJString(subscriptionId))
  add(path_570532, "webJobName", newJString(webJobName))
  result = call_570531.call(path_570532, query_570533, nil, nil, nil)

var webAppsDeleteContinuousWebJobSlot* = Call_WebAppsDeleteContinuousWebJobSlot_570521(
    name: "webAppsDeleteContinuousWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    validator: validate_WebAppsDeleteContinuousWebJobSlot_570522, base: "",
    url: url_WebAppsDeleteContinuousWebJobSlot_570523, schemes: {Scheme.Https})
type
  Call_WebAppsStartContinuousWebJobSlot_570534 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartContinuousWebJobSlot_570536(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartContinuousWebJobSlot_570535(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570537 = path.getOrDefault("resourceGroupName")
  valid_570537 = validateParameter(valid_570537, JString, required = true,
                                 default = nil)
  if valid_570537 != nil:
    section.add "resourceGroupName", valid_570537
  var valid_570538 = path.getOrDefault("name")
  valid_570538 = validateParameter(valid_570538, JString, required = true,
                                 default = nil)
  if valid_570538 != nil:
    section.add "name", valid_570538
  var valid_570539 = path.getOrDefault("slot")
  valid_570539 = validateParameter(valid_570539, JString, required = true,
                                 default = nil)
  if valid_570539 != nil:
    section.add "slot", valid_570539
  var valid_570540 = path.getOrDefault("subscriptionId")
  valid_570540 = validateParameter(valid_570540, JString, required = true,
                                 default = nil)
  if valid_570540 != nil:
    section.add "subscriptionId", valid_570540
  var valid_570541 = path.getOrDefault("webJobName")
  valid_570541 = validateParameter(valid_570541, JString, required = true,
                                 default = nil)
  if valid_570541 != nil:
    section.add "webJobName", valid_570541
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570542 = query.getOrDefault("api-version")
  valid_570542 = validateParameter(valid_570542, JString, required = true,
                                 default = nil)
  if valid_570542 != nil:
    section.add "api-version", valid_570542
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570543: Call_WebAppsStartContinuousWebJobSlot_570534;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_570543.validator(path, query, header, formData, body)
  let scheme = call_570543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570543.url(scheme.get, call_570543.host, call_570543.base,
                         call_570543.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570543, url, valid)

proc call*(call_570544: Call_WebAppsStartContinuousWebJobSlot_570534;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStartContinuousWebJobSlot
  ## Start a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_570545 = newJObject()
  var query_570546 = newJObject()
  add(path_570545, "resourceGroupName", newJString(resourceGroupName))
  add(query_570546, "api-version", newJString(apiVersion))
  add(path_570545, "name", newJString(name))
  add(path_570545, "slot", newJString(slot))
  add(path_570545, "subscriptionId", newJString(subscriptionId))
  add(path_570545, "webJobName", newJString(webJobName))
  result = call_570544.call(path_570545, query_570546, nil, nil, nil)

var webAppsStartContinuousWebJobSlot* = Call_WebAppsStartContinuousWebJobSlot_570534(
    name: "webAppsStartContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start",
    validator: validate_WebAppsStartContinuousWebJobSlot_570535, base: "",
    url: url_WebAppsStartContinuousWebJobSlot_570536, schemes: {Scheme.Https})
type
  Call_WebAppsStopContinuousWebJobSlot_570547 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopContinuousWebJobSlot_570549(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/continuouswebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopContinuousWebJobSlot_570548(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570550 = path.getOrDefault("resourceGroupName")
  valid_570550 = validateParameter(valid_570550, JString, required = true,
                                 default = nil)
  if valid_570550 != nil:
    section.add "resourceGroupName", valid_570550
  var valid_570551 = path.getOrDefault("name")
  valid_570551 = validateParameter(valid_570551, JString, required = true,
                                 default = nil)
  if valid_570551 != nil:
    section.add "name", valid_570551
  var valid_570552 = path.getOrDefault("slot")
  valid_570552 = validateParameter(valid_570552, JString, required = true,
                                 default = nil)
  if valid_570552 != nil:
    section.add "slot", valid_570552
  var valid_570553 = path.getOrDefault("subscriptionId")
  valid_570553 = validateParameter(valid_570553, JString, required = true,
                                 default = nil)
  if valid_570553 != nil:
    section.add "subscriptionId", valid_570553
  var valid_570554 = path.getOrDefault("webJobName")
  valid_570554 = validateParameter(valid_570554, JString, required = true,
                                 default = nil)
  if valid_570554 != nil:
    section.add "webJobName", valid_570554
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570555 = query.getOrDefault("api-version")
  valid_570555 = validateParameter(valid_570555, JString, required = true,
                                 default = nil)
  if valid_570555 != nil:
    section.add "api-version", valid_570555
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570556: Call_WebAppsStopContinuousWebJobSlot_570547;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop a continuous web job for an app, or a deployment slot.
  ## 
  let valid = call_570556.validator(path, query, header, formData, body)
  let scheme = call_570556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570556.url(scheme.get, call_570556.host, call_570556.base,
                         call_570556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570556, url, valid)

proc call*(call_570557: Call_WebAppsStopContinuousWebJobSlot_570547;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsStopContinuousWebJobSlot
  ## Stop a continuous web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_570558 = newJObject()
  var query_570559 = newJObject()
  add(path_570558, "resourceGroupName", newJString(resourceGroupName))
  add(query_570559, "api-version", newJString(apiVersion))
  add(path_570558, "name", newJString(name))
  add(path_570558, "slot", newJString(slot))
  add(path_570558, "subscriptionId", newJString(subscriptionId))
  add(path_570558, "webJobName", newJString(webJobName))
  result = call_570557.call(path_570558, query_570559, nil, nil, nil)

var webAppsStopContinuousWebJobSlot* = Call_WebAppsStopContinuousWebJobSlot_570547(
    name: "webAppsStopContinuousWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop",
    validator: validate_WebAppsStopContinuousWebJobSlot_570548, base: "",
    url: url_WebAppsStopContinuousWebJobSlot_570549, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentsSlot_570560 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDeploymentsSlot_570562(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentsSlot_570561(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployments for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570563 = path.getOrDefault("resourceGroupName")
  valid_570563 = validateParameter(valid_570563, JString, required = true,
                                 default = nil)
  if valid_570563 != nil:
    section.add "resourceGroupName", valid_570563
  var valid_570564 = path.getOrDefault("name")
  valid_570564 = validateParameter(valid_570564, JString, required = true,
                                 default = nil)
  if valid_570564 != nil:
    section.add "name", valid_570564
  var valid_570565 = path.getOrDefault("slot")
  valid_570565 = validateParameter(valid_570565, JString, required = true,
                                 default = nil)
  if valid_570565 != nil:
    section.add "slot", valid_570565
  var valid_570566 = path.getOrDefault("subscriptionId")
  valid_570566 = validateParameter(valid_570566, JString, required = true,
                                 default = nil)
  if valid_570566 != nil:
    section.add "subscriptionId", valid_570566
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570567 = query.getOrDefault("api-version")
  valid_570567 = validateParameter(valid_570567, JString, required = true,
                                 default = nil)
  if valid_570567 != nil:
    section.add "api-version", valid_570567
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570568: Call_WebAppsListDeploymentsSlot_570560; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployments for an app, or a deployment slot.
  ## 
  let valid = call_570568.validator(path, query, header, formData, body)
  let scheme = call_570568.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570568.url(scheme.get, call_570568.host, call_570568.base,
                         call_570568.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570568, url, valid)

proc call*(call_570569: Call_WebAppsListDeploymentsSlot_570560;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListDeploymentsSlot
  ## List deployments for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570570 = newJObject()
  var query_570571 = newJObject()
  add(path_570570, "resourceGroupName", newJString(resourceGroupName))
  add(query_570571, "api-version", newJString(apiVersion))
  add(path_570570, "name", newJString(name))
  add(path_570570, "slot", newJString(slot))
  add(path_570570, "subscriptionId", newJString(subscriptionId))
  result = call_570569.call(path_570570, query_570571, nil, nil, nil)

var webAppsListDeploymentsSlot* = Call_WebAppsListDeploymentsSlot_570560(
    name: "webAppsListDeploymentsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
    validator: validate_WebAppsListDeploymentsSlot_570561, base: "",
    url: url_WebAppsListDeploymentsSlot_570562, schemes: {Scheme.Https})
type
  Call_WebAppsCreateDeploymentSlot_570585 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateDeploymentSlot_570587(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateDeploymentSlot_570586(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : ID of an existing deployment.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570588 = path.getOrDefault("resourceGroupName")
  valid_570588 = validateParameter(valid_570588, JString, required = true,
                                 default = nil)
  if valid_570588 != nil:
    section.add "resourceGroupName", valid_570588
  var valid_570589 = path.getOrDefault("name")
  valid_570589 = validateParameter(valid_570589, JString, required = true,
                                 default = nil)
  if valid_570589 != nil:
    section.add "name", valid_570589
  var valid_570590 = path.getOrDefault("slot")
  valid_570590 = validateParameter(valid_570590, JString, required = true,
                                 default = nil)
  if valid_570590 != nil:
    section.add "slot", valid_570590
  var valid_570591 = path.getOrDefault("subscriptionId")
  valid_570591 = validateParameter(valid_570591, JString, required = true,
                                 default = nil)
  if valid_570591 != nil:
    section.add "subscriptionId", valid_570591
  var valid_570592 = path.getOrDefault("id")
  valid_570592 = validateParameter(valid_570592, JString, required = true,
                                 default = nil)
  if valid_570592 != nil:
    section.add "id", valid_570592
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570593 = query.getOrDefault("api-version")
  valid_570593 = validateParameter(valid_570593, JString, required = true,
                                 default = nil)
  if valid_570593 != nil:
    section.add "api-version", valid_570593
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   deployment: JObject (required)
  ##             : Deployment details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570595: Call_WebAppsCreateDeploymentSlot_570585; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Create a deployment for an app, or a deployment slot.
  ## 
  let valid = call_570595.validator(path, query, header, formData, body)
  let scheme = call_570595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570595.url(scheme.get, call_570595.host, call_570595.base,
                         call_570595.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570595, url, valid)

proc call*(call_570596: Call_WebAppsCreateDeploymentSlot_570585;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string; deployment: JsonNode): Recallable =
  ## webAppsCreateDeploymentSlot
  ## Create a deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : ID of an existing deployment.
  ##   deployment: JObject (required)
  ##             : Deployment details.
  var path_570597 = newJObject()
  var query_570598 = newJObject()
  var body_570599 = newJObject()
  add(path_570597, "resourceGroupName", newJString(resourceGroupName))
  add(query_570598, "api-version", newJString(apiVersion))
  add(path_570597, "name", newJString(name))
  add(path_570597, "slot", newJString(slot))
  add(path_570597, "subscriptionId", newJString(subscriptionId))
  add(path_570597, "id", newJString(id))
  if deployment != nil:
    body_570599 = deployment
  result = call_570596.call(path_570597, query_570598, nil, nil, body_570599)

var webAppsCreateDeploymentSlot* = Call_WebAppsCreateDeploymentSlot_570585(
    name: "webAppsCreateDeploymentSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsCreateDeploymentSlot_570586, base: "",
    url: url_WebAppsCreateDeploymentSlot_570587, schemes: {Scheme.Https})
type
  Call_WebAppsGetDeploymentSlot_570572 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDeploymentSlot_570574(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDeploymentSlot_570573(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570575 = path.getOrDefault("resourceGroupName")
  valid_570575 = validateParameter(valid_570575, JString, required = true,
                                 default = nil)
  if valid_570575 != nil:
    section.add "resourceGroupName", valid_570575
  var valid_570576 = path.getOrDefault("name")
  valid_570576 = validateParameter(valid_570576, JString, required = true,
                                 default = nil)
  if valid_570576 != nil:
    section.add "name", valid_570576
  var valid_570577 = path.getOrDefault("slot")
  valid_570577 = validateParameter(valid_570577, JString, required = true,
                                 default = nil)
  if valid_570577 != nil:
    section.add "slot", valid_570577
  var valid_570578 = path.getOrDefault("subscriptionId")
  valid_570578 = validateParameter(valid_570578, JString, required = true,
                                 default = nil)
  if valid_570578 != nil:
    section.add "subscriptionId", valid_570578
  var valid_570579 = path.getOrDefault("id")
  valid_570579 = validateParameter(valid_570579, JString, required = true,
                                 default = nil)
  if valid_570579 != nil:
    section.add "id", valid_570579
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570580 = query.getOrDefault("api-version")
  valid_570580 = validateParameter(valid_570580, JString, required = true,
                                 default = nil)
  if valid_570580 != nil:
    section.add "api-version", valid_570580
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570581: Call_WebAppsGetDeploymentSlot_570572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_570581.validator(path, query, header, formData, body)
  let scheme = call_570581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570581.url(scheme.get, call_570581.host, call_570581.base,
                         call_570581.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570581, url, valid)

proc call*(call_570582: Call_WebAppsGetDeploymentSlot_570572;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsGetDeploymentSlot
  ## Get a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_570583 = newJObject()
  var query_570584 = newJObject()
  add(path_570583, "resourceGroupName", newJString(resourceGroupName))
  add(query_570584, "api-version", newJString(apiVersion))
  add(path_570583, "name", newJString(name))
  add(path_570583, "slot", newJString(slot))
  add(path_570583, "subscriptionId", newJString(subscriptionId))
  add(path_570583, "id", newJString(id))
  result = call_570582.call(path_570583, query_570584, nil, nil, nil)

var webAppsGetDeploymentSlot* = Call_WebAppsGetDeploymentSlot_570572(
    name: "webAppsGetDeploymentSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsGetDeploymentSlot_570573, base: "",
    url: url_WebAppsGetDeploymentSlot_570574, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDeploymentSlot_570600 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteDeploymentSlot_570602(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDeploymentSlot_570601(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : Deployment ID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570603 = path.getOrDefault("resourceGroupName")
  valid_570603 = validateParameter(valid_570603, JString, required = true,
                                 default = nil)
  if valid_570603 != nil:
    section.add "resourceGroupName", valid_570603
  var valid_570604 = path.getOrDefault("name")
  valid_570604 = validateParameter(valid_570604, JString, required = true,
                                 default = nil)
  if valid_570604 != nil:
    section.add "name", valid_570604
  var valid_570605 = path.getOrDefault("slot")
  valid_570605 = validateParameter(valid_570605, JString, required = true,
                                 default = nil)
  if valid_570605 != nil:
    section.add "slot", valid_570605
  var valid_570606 = path.getOrDefault("subscriptionId")
  valid_570606 = validateParameter(valid_570606, JString, required = true,
                                 default = nil)
  if valid_570606 != nil:
    section.add "subscriptionId", valid_570606
  var valid_570607 = path.getOrDefault("id")
  valid_570607 = validateParameter(valid_570607, JString, required = true,
                                 default = nil)
  if valid_570607 != nil:
    section.add "id", valid_570607
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570608 = query.getOrDefault("api-version")
  valid_570608 = validateParameter(valid_570608, JString, required = true,
                                 default = nil)
  if valid_570608 != nil:
    section.add "api-version", valid_570608
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570609: Call_WebAppsDeleteDeploymentSlot_570600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ## 
  let valid = call_570609.validator(path, query, header, formData, body)
  let scheme = call_570609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570609.url(scheme.get, call_570609.host, call_570609.base,
                         call_570609.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570609, url, valid)

proc call*(call_570610: Call_WebAppsDeleteDeploymentSlot_570600;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsDeleteDeploymentSlot
  ## Delete a deployment by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : Deployment ID.
  var path_570611 = newJObject()
  var query_570612 = newJObject()
  add(path_570611, "resourceGroupName", newJString(resourceGroupName))
  add(query_570612, "api-version", newJString(apiVersion))
  add(path_570611, "name", newJString(name))
  add(path_570611, "slot", newJString(slot))
  add(path_570611, "subscriptionId", newJString(subscriptionId))
  add(path_570611, "id", newJString(id))
  result = call_570610.call(path_570611, query_570612, nil, nil, nil)

var webAppsDeleteDeploymentSlot* = Call_WebAppsDeleteDeploymentSlot_570600(
    name: "webAppsDeleteDeploymentSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    validator: validate_WebAppsDeleteDeploymentSlot_570601, base: "",
    url: url_WebAppsDeleteDeploymentSlot_570602, schemes: {Scheme.Https})
type
  Call_WebAppsListDeploymentLogSlot_570613 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDeploymentLogSlot_570615(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/deployments/"),
               (kind: VariableSegment, value: "id"),
               (kind: ConstantSegment, value: "/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDeploymentLogSlot_570614(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570616 = path.getOrDefault("resourceGroupName")
  valid_570616 = validateParameter(valid_570616, JString, required = true,
                                 default = nil)
  if valid_570616 != nil:
    section.add "resourceGroupName", valid_570616
  var valid_570617 = path.getOrDefault("name")
  valid_570617 = validateParameter(valid_570617, JString, required = true,
                                 default = nil)
  if valid_570617 != nil:
    section.add "name", valid_570617
  var valid_570618 = path.getOrDefault("slot")
  valid_570618 = validateParameter(valid_570618, JString, required = true,
                                 default = nil)
  if valid_570618 != nil:
    section.add "slot", valid_570618
  var valid_570619 = path.getOrDefault("subscriptionId")
  valid_570619 = validateParameter(valid_570619, JString, required = true,
                                 default = nil)
  if valid_570619 != nil:
    section.add "subscriptionId", valid_570619
  var valid_570620 = path.getOrDefault("id")
  valid_570620 = validateParameter(valid_570620, JString, required = true,
                                 default = nil)
  if valid_570620 != nil:
    section.add "id", valid_570620
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570621 = query.getOrDefault("api-version")
  valid_570621 = validateParameter(valid_570621, JString, required = true,
                                 default = nil)
  if valid_570621 != nil:
    section.add "api-version", valid_570621
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570622: Call_WebAppsListDeploymentLogSlot_570613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ## 
  let valid = call_570622.validator(path, query, header, formData, body)
  let scheme = call_570622.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570622.url(scheme.get, call_570622.host, call_570622.base,
                         call_570622.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570622, url, valid)

proc call*(call_570623: Call_WebAppsListDeploymentLogSlot_570613;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string): Recallable =
  ## webAppsListDeploymentLogSlot
  ## List deployment log for specific deployment for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
  var path_570624 = newJObject()
  var query_570625 = newJObject()
  add(path_570624, "resourceGroupName", newJString(resourceGroupName))
  add(query_570625, "api-version", newJString(apiVersion))
  add(path_570624, "name", newJString(name))
  add(path_570624, "slot", newJString(slot))
  add(path_570624, "subscriptionId", newJString(subscriptionId))
  add(path_570624, "id", newJString(id))
  result = call_570623.call(path_570624, query_570625, nil, nil, nil)

var webAppsListDeploymentLogSlot* = Call_WebAppsListDeploymentLogSlot_570613(
    name: "webAppsListDeploymentLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log",
    validator: validate_WebAppsListDeploymentLogSlot_570614, base: "",
    url: url_WebAppsListDeploymentLogSlot_570615, schemes: {Scheme.Https})
type
  Call_WebAppsDiscoverBackupSlot_570626 = ref object of OpenApiRestCall_567666
proc url_WebAppsDiscoverBackupSlot_570628(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/discoverbackup")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDiscoverBackupSlot_570627(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570629 = path.getOrDefault("resourceGroupName")
  valid_570629 = validateParameter(valid_570629, JString, required = true,
                                 default = nil)
  if valid_570629 != nil:
    section.add "resourceGroupName", valid_570629
  var valid_570630 = path.getOrDefault("name")
  valid_570630 = validateParameter(valid_570630, JString, required = true,
                                 default = nil)
  if valid_570630 != nil:
    section.add "name", valid_570630
  var valid_570631 = path.getOrDefault("slot")
  valid_570631 = validateParameter(valid_570631, JString, required = true,
                                 default = nil)
  if valid_570631 != nil:
    section.add "slot", valid_570631
  var valid_570632 = path.getOrDefault("subscriptionId")
  valid_570632 = validateParameter(valid_570632, JString, required = true,
                                 default = nil)
  if valid_570632 != nil:
    section.add "subscriptionId", valid_570632
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570633 = query.getOrDefault("api-version")
  valid_570633 = validateParameter(valid_570633, JString, required = true,
                                 default = nil)
  if valid_570633 != nil:
    section.add "api-version", valid_570633
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570635: Call_WebAppsDiscoverBackupSlot_570626; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ## 
  let valid = call_570635.validator(path, query, header, formData, body)
  let scheme = call_570635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570635.url(scheme.get, call_570635.host, call_570635.base,
                         call_570635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570635, url, valid)

proc call*(call_570636: Call_WebAppsDiscoverBackupSlot_570626;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsDiscoverBackupSlot
  ## Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
  var path_570637 = newJObject()
  var query_570638 = newJObject()
  var body_570639 = newJObject()
  add(path_570637, "resourceGroupName", newJString(resourceGroupName))
  add(query_570638, "api-version", newJString(apiVersion))
  add(path_570637, "name", newJString(name))
  add(path_570637, "slot", newJString(slot))
  add(path_570637, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_570639 = request
  result = call_570636.call(path_570637, query_570638, nil, nil, body_570639)

var webAppsDiscoverBackupSlot* = Call_WebAppsDiscoverBackupSlot_570626(
    name: "webAppsDiscoverBackupSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup",
    validator: validate_WebAppsDiscoverBackupSlot_570627, base: "",
    url: url_WebAppsDiscoverBackupSlot_570628, schemes: {Scheme.Https})
type
  Call_WebAppsListDomainOwnershipIdentifiersSlot_570640 = ref object of OpenApiRestCall_567666
proc url_WebAppsListDomainOwnershipIdentifiersSlot_570642(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListDomainOwnershipIdentifiersSlot_570641(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570643 = path.getOrDefault("resourceGroupName")
  valid_570643 = validateParameter(valid_570643, JString, required = true,
                                 default = nil)
  if valid_570643 != nil:
    section.add "resourceGroupName", valid_570643
  var valid_570644 = path.getOrDefault("name")
  valid_570644 = validateParameter(valid_570644, JString, required = true,
                                 default = nil)
  if valid_570644 != nil:
    section.add "name", valid_570644
  var valid_570645 = path.getOrDefault("slot")
  valid_570645 = validateParameter(valid_570645, JString, required = true,
                                 default = nil)
  if valid_570645 != nil:
    section.add "slot", valid_570645
  var valid_570646 = path.getOrDefault("subscriptionId")
  valid_570646 = validateParameter(valid_570646, JString, required = true,
                                 default = nil)
  if valid_570646 != nil:
    section.add "subscriptionId", valid_570646
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570647 = query.getOrDefault("api-version")
  valid_570647 = validateParameter(valid_570647, JString, required = true,
                                 default = nil)
  if valid_570647 != nil:
    section.add "api-version", valid_570647
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570648: Call_WebAppsListDomainOwnershipIdentifiersSlot_570640;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists ownership identifiers for domain associated with web app.
  ## 
  let valid = call_570648.validator(path, query, header, formData, body)
  let scheme = call_570648.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570648.url(scheme.get, call_570648.host, call_570648.base,
                         call_570648.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570648, url, valid)

proc call*(call_570649: Call_WebAppsListDomainOwnershipIdentifiersSlot_570640;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListDomainOwnershipIdentifiersSlot
  ## Lists ownership identifiers for domain associated with web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570650 = newJObject()
  var query_570651 = newJObject()
  add(path_570650, "resourceGroupName", newJString(resourceGroupName))
  add(query_570651, "api-version", newJString(apiVersion))
  add(path_570650, "name", newJString(name))
  add(path_570650, "slot", newJString(slot))
  add(path_570650, "subscriptionId", newJString(subscriptionId))
  result = call_570649.call(path_570650, query_570651, nil, nil, nil)

var webAppsListDomainOwnershipIdentifiersSlot* = Call_WebAppsListDomainOwnershipIdentifiersSlot_570640(
    name: "webAppsListDomainOwnershipIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers",
    validator: validate_WebAppsListDomainOwnershipIdentifiersSlot_570641,
    base: "", url: url_WebAppsListDomainOwnershipIdentifiersSlot_570642,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570665 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570667(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570666(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570668 = path.getOrDefault("resourceGroupName")
  valid_570668 = validateParameter(valid_570668, JString, required = true,
                                 default = nil)
  if valid_570668 != nil:
    section.add "resourceGroupName", valid_570668
  var valid_570669 = path.getOrDefault("name")
  valid_570669 = validateParameter(valid_570669, JString, required = true,
                                 default = nil)
  if valid_570669 != nil:
    section.add "name", valid_570669
  var valid_570670 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_570670 = validateParameter(valid_570670, JString, required = true,
                                 default = nil)
  if valid_570670 != nil:
    section.add "domainOwnershipIdentifierName", valid_570670
  var valid_570671 = path.getOrDefault("slot")
  valid_570671 = validateParameter(valid_570671, JString, required = true,
                                 default = nil)
  if valid_570671 != nil:
    section.add "slot", valid_570671
  var valid_570672 = path.getOrDefault("subscriptionId")
  valid_570672 = validateParameter(valid_570672, JString, required = true,
                                 default = nil)
  if valid_570672 != nil:
    section.add "subscriptionId", valid_570672
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570673 = query.getOrDefault("api-version")
  valid_570673 = validateParameter(valid_570673, JString, required = true,
                                 default = nil)
  if valid_570673 != nil:
    section.add "api-version", valid_570673
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570675: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570665;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_570675.validator(path, query, header, formData, body)
  let scheme = call_570675.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570675.url(scheme.get, call_570675.host, call_570675.base,
                         call_570675.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570675, url, valid)

proc call*(call_570676: Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570665;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570677 = newJObject()
  var query_570678 = newJObject()
  var body_570679 = newJObject()
  add(path_570677, "resourceGroupName", newJString(resourceGroupName))
  add(query_570678, "api-version", newJString(apiVersion))
  add(path_570677, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_570679 = domainOwnershipIdentifier
  add(path_570677, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_570677, "slot", newJString(slot))
  add(path_570677, "subscriptionId", newJString(subscriptionId))
  result = call_570676.call(path_570677, query_570678, nil, nil, body_570679)

var webAppsCreateOrUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570665(
    name: "webAppsCreateOrUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570666,
    base: "", url: url_WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot_570667,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetDomainOwnershipIdentifierSlot_570652 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetDomainOwnershipIdentifierSlot_570654(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetDomainOwnershipIdentifierSlot_570653(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get domain ownership identifier for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570655 = path.getOrDefault("resourceGroupName")
  valid_570655 = validateParameter(valid_570655, JString, required = true,
                                 default = nil)
  if valid_570655 != nil:
    section.add "resourceGroupName", valid_570655
  var valid_570656 = path.getOrDefault("name")
  valid_570656 = validateParameter(valid_570656, JString, required = true,
                                 default = nil)
  if valid_570656 != nil:
    section.add "name", valid_570656
  var valid_570657 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_570657 = validateParameter(valid_570657, JString, required = true,
                                 default = nil)
  if valid_570657 != nil:
    section.add "domainOwnershipIdentifierName", valid_570657
  var valid_570658 = path.getOrDefault("slot")
  valid_570658 = validateParameter(valid_570658, JString, required = true,
                                 default = nil)
  if valid_570658 != nil:
    section.add "slot", valid_570658
  var valid_570659 = path.getOrDefault("subscriptionId")
  valid_570659 = validateParameter(valid_570659, JString, required = true,
                                 default = nil)
  if valid_570659 != nil:
    section.add "subscriptionId", valid_570659
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570660 = query.getOrDefault("api-version")
  valid_570660 = validateParameter(valid_570660, JString, required = true,
                                 default = nil)
  if valid_570660 != nil:
    section.add "api-version", valid_570660
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570661: Call_WebAppsGetDomainOwnershipIdentifierSlot_570652;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get domain ownership identifier for web app.
  ## 
  let valid = call_570661.validator(path, query, header, formData, body)
  let scheme = call_570661.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570661.url(scheme.get, call_570661.host, call_570661.base,
                         call_570661.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570661, url, valid)

proc call*(call_570662: Call_WebAppsGetDomainOwnershipIdentifierSlot_570652;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetDomainOwnershipIdentifierSlot
  ## Get domain ownership identifier for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570663 = newJObject()
  var query_570664 = newJObject()
  add(path_570663, "resourceGroupName", newJString(resourceGroupName))
  add(query_570664, "api-version", newJString(apiVersion))
  add(path_570663, "name", newJString(name))
  add(path_570663, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_570663, "slot", newJString(slot))
  add(path_570663, "subscriptionId", newJString(subscriptionId))
  result = call_570662.call(path_570663, query_570664, nil, nil, nil)

var webAppsGetDomainOwnershipIdentifierSlot* = Call_WebAppsGetDomainOwnershipIdentifierSlot_570652(
    name: "webAppsGetDomainOwnershipIdentifierSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsGetDomainOwnershipIdentifierSlot_570653, base: "",
    url: url_WebAppsGetDomainOwnershipIdentifierSlot_570654,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateDomainOwnershipIdentifierSlot_570693 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateDomainOwnershipIdentifierSlot_570695(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateDomainOwnershipIdentifierSlot_570694(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570696 = path.getOrDefault("resourceGroupName")
  valid_570696 = validateParameter(valid_570696, JString, required = true,
                                 default = nil)
  if valid_570696 != nil:
    section.add "resourceGroupName", valid_570696
  var valid_570697 = path.getOrDefault("name")
  valid_570697 = validateParameter(valid_570697, JString, required = true,
                                 default = nil)
  if valid_570697 != nil:
    section.add "name", valid_570697
  var valid_570698 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_570698 = validateParameter(valid_570698, JString, required = true,
                                 default = nil)
  if valid_570698 != nil:
    section.add "domainOwnershipIdentifierName", valid_570698
  var valid_570699 = path.getOrDefault("slot")
  valid_570699 = validateParameter(valid_570699, JString, required = true,
                                 default = nil)
  if valid_570699 != nil:
    section.add "slot", valid_570699
  var valid_570700 = path.getOrDefault("subscriptionId")
  valid_570700 = validateParameter(valid_570700, JString, required = true,
                                 default = nil)
  if valid_570700 != nil:
    section.add "subscriptionId", valid_570700
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570701 = query.getOrDefault("api-version")
  valid_570701 = validateParameter(valid_570701, JString, required = true,
                                 default = nil)
  if valid_570701 != nil:
    section.add "api-version", valid_570701
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570703: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_570693;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ## 
  let valid = call_570703.validator(path, query, header, formData, body)
  let scheme = call_570703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570703.url(scheme.get, call_570703.host, call_570703.base,
                         call_570703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570703, url, valid)

proc call*(call_570704: Call_WebAppsUpdateDomainOwnershipIdentifierSlot_570693;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifier: JsonNode;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateDomainOwnershipIdentifierSlot
  ## Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifier: JObject (required)
  ##                            : A JSON representation of the domain ownership properties.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570705 = newJObject()
  var query_570706 = newJObject()
  var body_570707 = newJObject()
  add(path_570705, "resourceGroupName", newJString(resourceGroupName))
  add(query_570706, "api-version", newJString(apiVersion))
  add(path_570705, "name", newJString(name))
  if domainOwnershipIdentifier != nil:
    body_570707 = domainOwnershipIdentifier
  add(path_570705, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_570705, "slot", newJString(slot))
  add(path_570705, "subscriptionId", newJString(subscriptionId))
  result = call_570704.call(path_570705, query_570706, nil, nil, body_570707)

var webAppsUpdateDomainOwnershipIdentifierSlot* = Call_WebAppsUpdateDomainOwnershipIdentifierSlot_570693(
    name: "webAppsUpdateDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsUpdateDomainOwnershipIdentifierSlot_570694,
    base: "", url: url_WebAppsUpdateDomainOwnershipIdentifierSlot_570695,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteDomainOwnershipIdentifierSlot_570680 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteDomainOwnershipIdentifierSlot_570682(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "domainOwnershipIdentifierName" in path,
        "`domainOwnershipIdentifierName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/domainOwnershipIdentifiers/"),
               (kind: VariableSegment, value: "domainOwnershipIdentifierName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteDomainOwnershipIdentifierSlot_570681(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: JString (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570683 = path.getOrDefault("resourceGroupName")
  valid_570683 = validateParameter(valid_570683, JString, required = true,
                                 default = nil)
  if valid_570683 != nil:
    section.add "resourceGroupName", valid_570683
  var valid_570684 = path.getOrDefault("name")
  valid_570684 = validateParameter(valid_570684, JString, required = true,
                                 default = nil)
  if valid_570684 != nil:
    section.add "name", valid_570684
  var valid_570685 = path.getOrDefault("domainOwnershipIdentifierName")
  valid_570685 = validateParameter(valid_570685, JString, required = true,
                                 default = nil)
  if valid_570685 != nil:
    section.add "domainOwnershipIdentifierName", valid_570685
  var valid_570686 = path.getOrDefault("slot")
  valid_570686 = validateParameter(valid_570686, JString, required = true,
                                 default = nil)
  if valid_570686 != nil:
    section.add "slot", valid_570686
  var valid_570687 = path.getOrDefault("subscriptionId")
  valid_570687 = validateParameter(valid_570687, JString, required = true,
                                 default = nil)
  if valid_570687 != nil:
    section.add "subscriptionId", valid_570687
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570688 = query.getOrDefault("api-version")
  valid_570688 = validateParameter(valid_570688, JString, required = true,
                                 default = nil)
  if valid_570688 != nil:
    section.add "api-version", valid_570688
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570689: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_570680;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a domain ownership identifier for a web app.
  ## 
  let valid = call_570689.validator(path, query, header, formData, body)
  let scheme = call_570689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570689.url(scheme.get, call_570689.host, call_570689.base,
                         call_570689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570689, url, valid)

proc call*(call_570690: Call_WebAppsDeleteDomainOwnershipIdentifierSlot_570680;
          resourceGroupName: string; apiVersion: string; name: string;
          domainOwnershipIdentifierName: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteDomainOwnershipIdentifierSlot
  ## Deletes a domain ownership identifier for a web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   domainOwnershipIdentifierName: string (required)
  ##                                : Name of domain ownership identifier.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570691 = newJObject()
  var query_570692 = newJObject()
  add(path_570691, "resourceGroupName", newJString(resourceGroupName))
  add(query_570692, "api-version", newJString(apiVersion))
  add(path_570691, "name", newJString(name))
  add(path_570691, "domainOwnershipIdentifierName",
      newJString(domainOwnershipIdentifierName))
  add(path_570691, "slot", newJString(slot))
  add(path_570691, "subscriptionId", newJString(subscriptionId))
  result = call_570690.call(path_570691, query_570692, nil, nil, nil)

var webAppsDeleteDomainOwnershipIdentifierSlot* = Call_WebAppsDeleteDomainOwnershipIdentifierSlot_570680(
    name: "webAppsDeleteDomainOwnershipIdentifierSlot",
    meth: HttpMethod.HttpDelete, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    validator: validate_WebAppsDeleteDomainOwnershipIdentifierSlot_570681,
    base: "", url: url_WebAppsDeleteDomainOwnershipIdentifierSlot_570682,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateMSDeployOperationSlot_570720 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateMSDeployOperationSlot_570722(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateMSDeployOperationSlot_570721(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570723 = path.getOrDefault("resourceGroupName")
  valid_570723 = validateParameter(valid_570723, JString, required = true,
                                 default = nil)
  if valid_570723 != nil:
    section.add "resourceGroupName", valid_570723
  var valid_570724 = path.getOrDefault("name")
  valid_570724 = validateParameter(valid_570724, JString, required = true,
                                 default = nil)
  if valid_570724 != nil:
    section.add "name", valid_570724
  var valid_570725 = path.getOrDefault("slot")
  valid_570725 = validateParameter(valid_570725, JString, required = true,
                                 default = nil)
  if valid_570725 != nil:
    section.add "slot", valid_570725
  var valid_570726 = path.getOrDefault("subscriptionId")
  valid_570726 = validateParameter(valid_570726, JString, required = true,
                                 default = nil)
  if valid_570726 != nil:
    section.add "subscriptionId", valid_570726
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570727 = query.getOrDefault("api-version")
  valid_570727 = validateParameter(valid_570727, JString, required = true,
                                 default = nil)
  if valid_570727 != nil:
    section.add "api-version", valid_570727
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570729: Call_WebAppsCreateMSDeployOperationSlot_570720;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_570729.validator(path, query, header, formData, body)
  let scheme = call_570729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570729.url(scheme.get, call_570729.host, call_570729.base,
                         call_570729.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570729, url, valid)

proc call*(call_570730: Call_WebAppsCreateMSDeployOperationSlot_570720;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_570731 = newJObject()
  var query_570732 = newJObject()
  var body_570733 = newJObject()
  add(path_570731, "resourceGroupName", newJString(resourceGroupName))
  add(query_570732, "api-version", newJString(apiVersion))
  add(path_570731, "name", newJString(name))
  add(path_570731, "slot", newJString(slot))
  add(path_570731, "subscriptionId", newJString(subscriptionId))
  if MSDeploy != nil:
    body_570733 = MSDeploy
  result = call_570730.call(path_570731, query_570732, nil, nil, body_570733)

var webAppsCreateMSDeployOperationSlot* = Call_WebAppsCreateMSDeployOperationSlot_570720(
    name: "webAppsCreateMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsCreateMSDeployOperationSlot_570721, base: "",
    url: url_WebAppsCreateMSDeployOperationSlot_570722, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployStatusSlot_570708 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMSDeployStatusSlot_570710(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployStatusSlot_570709(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570711 = path.getOrDefault("resourceGroupName")
  valid_570711 = validateParameter(valid_570711, JString, required = true,
                                 default = nil)
  if valid_570711 != nil:
    section.add "resourceGroupName", valid_570711
  var valid_570712 = path.getOrDefault("name")
  valid_570712 = validateParameter(valid_570712, JString, required = true,
                                 default = nil)
  if valid_570712 != nil:
    section.add "name", valid_570712
  var valid_570713 = path.getOrDefault("slot")
  valid_570713 = validateParameter(valid_570713, JString, required = true,
                                 default = nil)
  if valid_570713 != nil:
    section.add "slot", valid_570713
  var valid_570714 = path.getOrDefault("subscriptionId")
  valid_570714 = validateParameter(valid_570714, JString, required = true,
                                 default = nil)
  if valid_570714 != nil:
    section.add "subscriptionId", valid_570714
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570715 = query.getOrDefault("api-version")
  valid_570715 = validateParameter(valid_570715, JString, required = true,
                                 default = nil)
  if valid_570715 != nil:
    section.add "api-version", valid_570715
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570716: Call_WebAppsGetMSDeployStatusSlot_570708; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_570716.validator(path, query, header, formData, body)
  let scheme = call_570716.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570716.url(scheme.get, call_570716.host, call_570716.base,
                         call_570716.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570716, url, valid)

proc call*(call_570717: Call_WebAppsGetMSDeployStatusSlot_570708;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570718 = newJObject()
  var query_570719 = newJObject()
  add(path_570718, "resourceGroupName", newJString(resourceGroupName))
  add(query_570719, "api-version", newJString(apiVersion))
  add(path_570718, "name", newJString(name))
  add(path_570718, "slot", newJString(slot))
  add(path_570718, "subscriptionId", newJString(subscriptionId))
  result = call_570717.call(path_570718, query_570719, nil, nil, nil)

var webAppsGetMSDeployStatusSlot* = Call_WebAppsGetMSDeployStatusSlot_570708(
    name: "webAppsGetMSDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    validator: validate_WebAppsGetMSDeployStatusSlot_570709, base: "",
    url: url_WebAppsGetMSDeployStatusSlot_570710, schemes: {Scheme.Https})
type
  Call_WebAppsGetMSDeployLogSlot_570734 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMSDeployLogSlot_570736(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMSDeployLogSlot_570735(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570737 = path.getOrDefault("resourceGroupName")
  valid_570737 = validateParameter(valid_570737, JString, required = true,
                                 default = nil)
  if valid_570737 != nil:
    section.add "resourceGroupName", valid_570737
  var valid_570738 = path.getOrDefault("name")
  valid_570738 = validateParameter(valid_570738, JString, required = true,
                                 default = nil)
  if valid_570738 != nil:
    section.add "name", valid_570738
  var valid_570739 = path.getOrDefault("slot")
  valid_570739 = validateParameter(valid_570739, JString, required = true,
                                 default = nil)
  if valid_570739 != nil:
    section.add "slot", valid_570739
  var valid_570740 = path.getOrDefault("subscriptionId")
  valid_570740 = validateParameter(valid_570740, JString, required = true,
                                 default = nil)
  if valid_570740 != nil:
    section.add "subscriptionId", valid_570740
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570741 = query.getOrDefault("api-version")
  valid_570741 = validateParameter(valid_570741, JString, required = true,
                                 default = nil)
  if valid_570741 != nil:
    section.add "api-version", valid_570741
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570742: Call_WebAppsGetMSDeployLogSlot_570734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_570742.validator(path, query, header, formData, body)
  let scheme = call_570742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570742.url(scheme.get, call_570742.host, call_570742.base,
                         call_570742.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570742, url, valid)

proc call*(call_570743: Call_WebAppsGetMSDeployLogSlot_570734;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570744 = newJObject()
  var query_570745 = newJObject()
  add(path_570744, "resourceGroupName", newJString(resourceGroupName))
  add(query_570745, "api-version", newJString(apiVersion))
  add(path_570744, "name", newJString(name))
  add(path_570744, "slot", newJString(slot))
  add(path_570744, "subscriptionId", newJString(subscriptionId))
  result = call_570743.call(path_570744, query_570745, nil, nil, nil)

var webAppsGetMSDeployLogSlot* = Call_WebAppsGetMSDeployLogSlot_570734(
    name: "webAppsGetMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetMSDeployLogSlot_570735, base: "",
    url: url_WebAppsGetMSDeployLogSlot_570736, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceFunctionsSlot_570746 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceFunctionsSlot_570748(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceFunctionsSlot_570747(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the functions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570749 = path.getOrDefault("resourceGroupName")
  valid_570749 = validateParameter(valid_570749, JString, required = true,
                                 default = nil)
  if valid_570749 != nil:
    section.add "resourceGroupName", valid_570749
  var valid_570750 = path.getOrDefault("name")
  valid_570750 = validateParameter(valid_570750, JString, required = true,
                                 default = nil)
  if valid_570750 != nil:
    section.add "name", valid_570750
  var valid_570751 = path.getOrDefault("slot")
  valid_570751 = validateParameter(valid_570751, JString, required = true,
                                 default = nil)
  if valid_570751 != nil:
    section.add "slot", valid_570751
  var valid_570752 = path.getOrDefault("subscriptionId")
  valid_570752 = validateParameter(valid_570752, JString, required = true,
                                 default = nil)
  if valid_570752 != nil:
    section.add "subscriptionId", valid_570752
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570753 = query.getOrDefault("api-version")
  valid_570753 = validateParameter(valid_570753, JString, required = true,
                                 default = nil)
  if valid_570753 != nil:
    section.add "api-version", valid_570753
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570754: Call_WebAppsListInstanceFunctionsSlot_570746;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the functions for a web site, or a deployment slot.
  ## 
  let valid = call_570754.validator(path, query, header, formData, body)
  let scheme = call_570754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570754.url(scheme.get, call_570754.host, call_570754.base,
                         call_570754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570754, url, valid)

proc call*(call_570755: Call_WebAppsListInstanceFunctionsSlot_570746;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceFunctionsSlot
  ## List the functions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570756 = newJObject()
  var query_570757 = newJObject()
  add(path_570756, "resourceGroupName", newJString(resourceGroupName))
  add(query_570757, "api-version", newJString(apiVersion))
  add(path_570756, "name", newJString(name))
  add(path_570756, "slot", newJString(slot))
  add(path_570756, "subscriptionId", newJString(subscriptionId))
  result = call_570755.call(path_570756, query_570757, nil, nil, nil)

var webAppsListInstanceFunctionsSlot* = Call_WebAppsListInstanceFunctionsSlot_570746(
    name: "webAppsListInstanceFunctionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions",
    validator: validate_WebAppsListInstanceFunctionsSlot_570747, base: "",
    url: url_WebAppsListInstanceFunctionsSlot_570748, schemes: {Scheme.Https})
type
  Call_WebAppsGetFunctionsAdminTokenSlot_570758 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetFunctionsAdminTokenSlot_570760(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/admin/token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetFunctionsAdminTokenSlot_570759(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570761 = path.getOrDefault("resourceGroupName")
  valid_570761 = validateParameter(valid_570761, JString, required = true,
                                 default = nil)
  if valid_570761 != nil:
    section.add "resourceGroupName", valid_570761
  var valid_570762 = path.getOrDefault("name")
  valid_570762 = validateParameter(valid_570762, JString, required = true,
                                 default = nil)
  if valid_570762 != nil:
    section.add "name", valid_570762
  var valid_570763 = path.getOrDefault("slot")
  valid_570763 = validateParameter(valid_570763, JString, required = true,
                                 default = nil)
  if valid_570763 != nil:
    section.add "slot", valid_570763
  var valid_570764 = path.getOrDefault("subscriptionId")
  valid_570764 = validateParameter(valid_570764, JString, required = true,
                                 default = nil)
  if valid_570764 != nil:
    section.add "subscriptionId", valid_570764
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570765 = query.getOrDefault("api-version")
  valid_570765 = validateParameter(valid_570765, JString, required = true,
                                 default = nil)
  if valid_570765 != nil:
    section.add "api-version", valid_570765
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570766: Call_WebAppsGetFunctionsAdminTokenSlot_570758;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Fetch a short lived token that can be exchanged for a master key.
  ## 
  let valid = call_570766.validator(path, query, header, formData, body)
  let scheme = call_570766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570766.url(scheme.get, call_570766.host, call_570766.base,
                         call_570766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570766, url, valid)

proc call*(call_570767: Call_WebAppsGetFunctionsAdminTokenSlot_570758;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetFunctionsAdminTokenSlot
  ## Fetch a short lived token that can be exchanged for a master key.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570768 = newJObject()
  var query_570769 = newJObject()
  add(path_570768, "resourceGroupName", newJString(resourceGroupName))
  add(query_570769, "api-version", newJString(apiVersion))
  add(path_570768, "name", newJString(name))
  add(path_570768, "slot", newJString(slot))
  add(path_570768, "subscriptionId", newJString(subscriptionId))
  result = call_570767.call(path_570768, query_570769, nil, nil, nil)

var webAppsGetFunctionsAdminTokenSlot* = Call_WebAppsGetFunctionsAdminTokenSlot_570758(
    name: "webAppsGetFunctionsAdminTokenSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token",
    validator: validate_WebAppsGetFunctionsAdminTokenSlot_570759, base: "",
    url: url_WebAppsGetFunctionsAdminTokenSlot_570760, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceFunctionSlot_570783 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateInstanceFunctionSlot_570785(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceFunctionSlot_570784(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570786 = path.getOrDefault("resourceGroupName")
  valid_570786 = validateParameter(valid_570786, JString, required = true,
                                 default = nil)
  if valid_570786 != nil:
    section.add "resourceGroupName", valid_570786
  var valid_570787 = path.getOrDefault("name")
  valid_570787 = validateParameter(valid_570787, JString, required = true,
                                 default = nil)
  if valid_570787 != nil:
    section.add "name", valid_570787
  var valid_570788 = path.getOrDefault("slot")
  valid_570788 = validateParameter(valid_570788, JString, required = true,
                                 default = nil)
  if valid_570788 != nil:
    section.add "slot", valid_570788
  var valid_570789 = path.getOrDefault("subscriptionId")
  valid_570789 = validateParameter(valid_570789, JString, required = true,
                                 default = nil)
  if valid_570789 != nil:
    section.add "subscriptionId", valid_570789
  var valid_570790 = path.getOrDefault("functionName")
  valid_570790 = validateParameter(valid_570790, JString, required = true,
                                 default = nil)
  if valid_570790 != nil:
    section.add "functionName", valid_570790
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570791 = query.getOrDefault("api-version")
  valid_570791 = validateParameter(valid_570791, JString, required = true,
                                 default = nil)
  if valid_570791 != nil:
    section.add "api-version", valid_570791
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   function_envelope: JObject (required)
  ##                    : Function details.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570793: Call_WebAppsCreateInstanceFunctionSlot_570783;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Create function for web site, or a deployment slot.
  ## 
  let valid = call_570793.validator(path, query, header, formData, body)
  let scheme = call_570793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570793.url(scheme.get, call_570793.host, call_570793.base,
                         call_570793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570793, url, valid)

proc call*(call_570794: Call_WebAppsCreateInstanceFunctionSlot_570783;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionEnvelope: JsonNode; functionName: string): Recallable =
  ## webAppsCreateInstanceFunctionSlot
  ## Create function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionEnvelope: JObject (required)
  ##                   : Function details.
  ##   functionName: string (required)
  ##               : Function name.
  var path_570795 = newJObject()
  var query_570796 = newJObject()
  var body_570797 = newJObject()
  add(path_570795, "resourceGroupName", newJString(resourceGroupName))
  add(query_570796, "api-version", newJString(apiVersion))
  add(path_570795, "name", newJString(name))
  add(path_570795, "slot", newJString(slot))
  add(path_570795, "subscriptionId", newJString(subscriptionId))
  if functionEnvelope != nil:
    body_570797 = functionEnvelope
  add(path_570795, "functionName", newJString(functionName))
  result = call_570794.call(path_570795, query_570796, nil, nil, body_570797)

var webAppsCreateInstanceFunctionSlot* = Call_WebAppsCreateInstanceFunctionSlot_570783(
    name: "webAppsCreateInstanceFunctionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsCreateInstanceFunctionSlot_570784, base: "",
    url: url_WebAppsCreateInstanceFunctionSlot_570785, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceFunctionSlot_570770 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceFunctionSlot_570772(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceFunctionSlot_570771(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570773 = path.getOrDefault("resourceGroupName")
  valid_570773 = validateParameter(valid_570773, JString, required = true,
                                 default = nil)
  if valid_570773 != nil:
    section.add "resourceGroupName", valid_570773
  var valid_570774 = path.getOrDefault("name")
  valid_570774 = validateParameter(valid_570774, JString, required = true,
                                 default = nil)
  if valid_570774 != nil:
    section.add "name", valid_570774
  var valid_570775 = path.getOrDefault("slot")
  valid_570775 = validateParameter(valid_570775, JString, required = true,
                                 default = nil)
  if valid_570775 != nil:
    section.add "slot", valid_570775
  var valid_570776 = path.getOrDefault("subscriptionId")
  valid_570776 = validateParameter(valid_570776, JString, required = true,
                                 default = nil)
  if valid_570776 != nil:
    section.add "subscriptionId", valid_570776
  var valid_570777 = path.getOrDefault("functionName")
  valid_570777 = validateParameter(valid_570777, JString, required = true,
                                 default = nil)
  if valid_570777 != nil:
    section.add "functionName", valid_570777
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570778 = query.getOrDefault("api-version")
  valid_570778 = validateParameter(valid_570778, JString, required = true,
                                 default = nil)
  if valid_570778 != nil:
    section.add "api-version", valid_570778
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570779: Call_WebAppsGetInstanceFunctionSlot_570770; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function information by its ID for web site, or a deployment slot.
  ## 
  let valid = call_570779.validator(path, query, header, formData, body)
  let scheme = call_570779.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570779.url(scheme.get, call_570779.host, call_570779.base,
                         call_570779.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570779, url, valid)

proc call*(call_570780: Call_WebAppsGetInstanceFunctionSlot_570770;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsGetInstanceFunctionSlot
  ## Get function information by its ID for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_570781 = newJObject()
  var query_570782 = newJObject()
  add(path_570781, "resourceGroupName", newJString(resourceGroupName))
  add(query_570782, "api-version", newJString(apiVersion))
  add(path_570781, "name", newJString(name))
  add(path_570781, "slot", newJString(slot))
  add(path_570781, "subscriptionId", newJString(subscriptionId))
  add(path_570781, "functionName", newJString(functionName))
  result = call_570780.call(path_570781, query_570782, nil, nil, nil)

var webAppsGetInstanceFunctionSlot* = Call_WebAppsGetInstanceFunctionSlot_570770(
    name: "webAppsGetInstanceFunctionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsGetInstanceFunctionSlot_570771, base: "",
    url: url_WebAppsGetInstanceFunctionSlot_570772, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceFunctionSlot_570798 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteInstanceFunctionSlot_570800(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceFunctionSlot_570799(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a function for web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570801 = path.getOrDefault("resourceGroupName")
  valid_570801 = validateParameter(valid_570801, JString, required = true,
                                 default = nil)
  if valid_570801 != nil:
    section.add "resourceGroupName", valid_570801
  var valid_570802 = path.getOrDefault("name")
  valid_570802 = validateParameter(valid_570802, JString, required = true,
                                 default = nil)
  if valid_570802 != nil:
    section.add "name", valid_570802
  var valid_570803 = path.getOrDefault("slot")
  valid_570803 = validateParameter(valid_570803, JString, required = true,
                                 default = nil)
  if valid_570803 != nil:
    section.add "slot", valid_570803
  var valid_570804 = path.getOrDefault("subscriptionId")
  valid_570804 = validateParameter(valid_570804, JString, required = true,
                                 default = nil)
  if valid_570804 != nil:
    section.add "subscriptionId", valid_570804
  var valid_570805 = path.getOrDefault("functionName")
  valid_570805 = validateParameter(valid_570805, JString, required = true,
                                 default = nil)
  if valid_570805 != nil:
    section.add "functionName", valid_570805
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570806 = query.getOrDefault("api-version")
  valid_570806 = validateParameter(valid_570806, JString, required = true,
                                 default = nil)
  if valid_570806 != nil:
    section.add "api-version", valid_570806
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570807: Call_WebAppsDeleteInstanceFunctionSlot_570798;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a function for web site, or a deployment slot.
  ## 
  let valid = call_570807.validator(path, query, header, formData, body)
  let scheme = call_570807.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570807.url(scheme.get, call_570807.host, call_570807.base,
                         call_570807.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570807, url, valid)

proc call*(call_570808: Call_WebAppsDeleteInstanceFunctionSlot_570798;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsDeleteInstanceFunctionSlot
  ## Delete a function for web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_570809 = newJObject()
  var query_570810 = newJObject()
  add(path_570809, "resourceGroupName", newJString(resourceGroupName))
  add(query_570810, "api-version", newJString(apiVersion))
  add(path_570809, "name", newJString(name))
  add(path_570809, "slot", newJString(slot))
  add(path_570809, "subscriptionId", newJString(subscriptionId))
  add(path_570809, "functionName", newJString(functionName))
  result = call_570808.call(path_570809, query_570810, nil, nil, nil)

var webAppsDeleteInstanceFunctionSlot* = Call_WebAppsDeleteInstanceFunctionSlot_570798(
    name: "webAppsDeleteInstanceFunctionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    validator: validate_WebAppsDeleteInstanceFunctionSlot_570799, base: "",
    url: url_WebAppsDeleteInstanceFunctionSlot_570800, schemes: {Scheme.Https})
type
  Call_WebAppsListFunctionSecretsSlot_570811 = ref object of OpenApiRestCall_567666
proc url_WebAppsListFunctionSecretsSlot_570813(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "functionName" in path, "`functionName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/functions/"),
               (kind: VariableSegment, value: "functionName"),
               (kind: ConstantSegment, value: "/listsecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListFunctionSecretsSlot_570812(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: JString (required)
  ##               : Function name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570814 = path.getOrDefault("resourceGroupName")
  valid_570814 = validateParameter(valid_570814, JString, required = true,
                                 default = nil)
  if valid_570814 != nil:
    section.add "resourceGroupName", valid_570814
  var valid_570815 = path.getOrDefault("name")
  valid_570815 = validateParameter(valid_570815, JString, required = true,
                                 default = nil)
  if valid_570815 != nil:
    section.add "name", valid_570815
  var valid_570816 = path.getOrDefault("slot")
  valid_570816 = validateParameter(valid_570816, JString, required = true,
                                 default = nil)
  if valid_570816 != nil:
    section.add "slot", valid_570816
  var valid_570817 = path.getOrDefault("subscriptionId")
  valid_570817 = validateParameter(valid_570817, JString, required = true,
                                 default = nil)
  if valid_570817 != nil:
    section.add "subscriptionId", valid_570817
  var valid_570818 = path.getOrDefault("functionName")
  valid_570818 = validateParameter(valid_570818, JString, required = true,
                                 default = nil)
  if valid_570818 != nil:
    section.add "functionName", valid_570818
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570819 = query.getOrDefault("api-version")
  valid_570819 = validateParameter(valid_570819, JString, required = true,
                                 default = nil)
  if valid_570819 != nil:
    section.add "api-version", valid_570819
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570820: Call_WebAppsListFunctionSecretsSlot_570811; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get function secrets for a function in a web site, or a deployment slot.
  ## 
  let valid = call_570820.validator(path, query, header, formData, body)
  let scheme = call_570820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570820.url(scheme.get, call_570820.host, call_570820.base,
                         call_570820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570820, url, valid)

proc call*(call_570821: Call_WebAppsListFunctionSecretsSlot_570811;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; functionName: string): Recallable =
  ## webAppsListFunctionSecretsSlot
  ## Get function secrets for a function in a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   functionName: string (required)
  ##               : Function name.
  var path_570822 = newJObject()
  var query_570823 = newJObject()
  add(path_570822, "resourceGroupName", newJString(resourceGroupName))
  add(query_570823, "api-version", newJString(apiVersion))
  add(path_570822, "name", newJString(name))
  add(path_570822, "slot", newJString(slot))
  add(path_570822, "subscriptionId", newJString(subscriptionId))
  add(path_570822, "functionName", newJString(functionName))
  result = call_570821.call(path_570822, query_570823, nil, nil, nil)

var webAppsListFunctionSecretsSlot* = Call_WebAppsListFunctionSecretsSlot_570811(
    name: "webAppsListFunctionSecretsSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets",
    validator: validate_WebAppsListFunctionSecretsSlot_570812, base: "",
    url: url_WebAppsListFunctionSecretsSlot_570813, schemes: {Scheme.Https})
type
  Call_WebAppsListHostNameBindingsSlot_570824 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHostNameBindingsSlot_570826(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHostNameBindingsSlot_570825(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570827 = path.getOrDefault("resourceGroupName")
  valid_570827 = validateParameter(valid_570827, JString, required = true,
                                 default = nil)
  if valid_570827 != nil:
    section.add "resourceGroupName", valid_570827
  var valid_570828 = path.getOrDefault("name")
  valid_570828 = validateParameter(valid_570828, JString, required = true,
                                 default = nil)
  if valid_570828 != nil:
    section.add "name", valid_570828
  var valid_570829 = path.getOrDefault("slot")
  valid_570829 = validateParameter(valid_570829, JString, required = true,
                                 default = nil)
  if valid_570829 != nil:
    section.add "slot", valid_570829
  var valid_570830 = path.getOrDefault("subscriptionId")
  valid_570830 = validateParameter(valid_570830, JString, required = true,
                                 default = nil)
  if valid_570830 != nil:
    section.add "subscriptionId", valid_570830
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570831 = query.getOrDefault("api-version")
  valid_570831 = validateParameter(valid_570831, JString, required = true,
                                 default = nil)
  if valid_570831 != nil:
    section.add "api-version", valid_570831
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570832: Call_WebAppsListHostNameBindingsSlot_570824;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get hostname bindings for an app or a deployment slot.
  ## 
  let valid = call_570832.validator(path, query, header, formData, body)
  let scheme = call_570832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570832.url(scheme.get, call_570832.host, call_570832.base,
                         call_570832.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570832, url, valid)

proc call*(call_570833: Call_WebAppsListHostNameBindingsSlot_570824;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListHostNameBindingsSlot
  ## Get hostname bindings for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570834 = newJObject()
  var query_570835 = newJObject()
  add(path_570834, "resourceGroupName", newJString(resourceGroupName))
  add(query_570835, "api-version", newJString(apiVersion))
  add(path_570834, "name", newJString(name))
  add(path_570834, "slot", newJString(slot))
  add(path_570834, "subscriptionId", newJString(subscriptionId))
  result = call_570833.call(path_570834, query_570835, nil, nil, nil)

var webAppsListHostNameBindingsSlot* = Call_WebAppsListHostNameBindingsSlot_570824(
    name: "webAppsListHostNameBindingsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
    validator: validate_WebAppsListHostNameBindingsSlot_570825, base: "",
    url: url_WebAppsListHostNameBindingsSlot_570826, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHostNameBindingSlot_570849 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateHostNameBindingSlot_570851(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHostNameBindingSlot_570850(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570852 = path.getOrDefault("resourceGroupName")
  valid_570852 = validateParameter(valid_570852, JString, required = true,
                                 default = nil)
  if valid_570852 != nil:
    section.add "resourceGroupName", valid_570852
  var valid_570853 = path.getOrDefault("name")
  valid_570853 = validateParameter(valid_570853, JString, required = true,
                                 default = nil)
  if valid_570853 != nil:
    section.add "name", valid_570853
  var valid_570854 = path.getOrDefault("slot")
  valid_570854 = validateParameter(valid_570854, JString, required = true,
                                 default = nil)
  if valid_570854 != nil:
    section.add "slot", valid_570854
  var valid_570855 = path.getOrDefault("subscriptionId")
  valid_570855 = validateParameter(valid_570855, JString, required = true,
                                 default = nil)
  if valid_570855 != nil:
    section.add "subscriptionId", valid_570855
  var valid_570856 = path.getOrDefault("hostName")
  valid_570856 = validateParameter(valid_570856, JString, required = true,
                                 default = nil)
  if valid_570856 != nil:
    section.add "hostName", valid_570856
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570857 = query.getOrDefault("api-version")
  valid_570857 = validateParameter(valid_570857, JString, required = true,
                                 default = nil)
  if valid_570857 != nil:
    section.add "api-version", valid_570857
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570859: Call_WebAppsCreateOrUpdateHostNameBindingSlot_570849;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_570859.validator(path, query, header, formData, body)
  let scheme = call_570859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570859.url(scheme.get, call_570859.host, call_570859.base,
                         call_570859.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570859, url, valid)

proc call*(call_570860: Call_WebAppsCreateOrUpdateHostNameBindingSlot_570849;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string; hostNameBinding: JsonNode): Recallable =
  ## webAppsCreateOrUpdateHostNameBindingSlot
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  ##   hostNameBinding: JObject (required)
  ##                  : Binding details. This is the JSON representation of a HostNameBinding object.
  var path_570861 = newJObject()
  var query_570862 = newJObject()
  var body_570863 = newJObject()
  add(path_570861, "resourceGroupName", newJString(resourceGroupName))
  add(query_570862, "api-version", newJString(apiVersion))
  add(path_570861, "name", newJString(name))
  add(path_570861, "slot", newJString(slot))
  add(path_570861, "subscriptionId", newJString(subscriptionId))
  add(path_570861, "hostName", newJString(hostName))
  if hostNameBinding != nil:
    body_570863 = hostNameBinding
  result = call_570860.call(path_570861, query_570862, nil, nil, body_570863)

var webAppsCreateOrUpdateHostNameBindingSlot* = Call_WebAppsCreateOrUpdateHostNameBindingSlot_570849(
    name: "webAppsCreateOrUpdateHostNameBindingSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsCreateOrUpdateHostNameBindingSlot_570850, base: "",
    url: url_WebAppsCreateOrUpdateHostNameBindingSlot_570851,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHostNameBindingSlot_570836 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetHostNameBindingSlot_570838(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHostNameBindingSlot_570837(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570839 = path.getOrDefault("resourceGroupName")
  valid_570839 = validateParameter(valid_570839, JString, required = true,
                                 default = nil)
  if valid_570839 != nil:
    section.add "resourceGroupName", valid_570839
  var valid_570840 = path.getOrDefault("name")
  valid_570840 = validateParameter(valid_570840, JString, required = true,
                                 default = nil)
  if valid_570840 != nil:
    section.add "name", valid_570840
  var valid_570841 = path.getOrDefault("slot")
  valid_570841 = validateParameter(valid_570841, JString, required = true,
                                 default = nil)
  if valid_570841 != nil:
    section.add "slot", valid_570841
  var valid_570842 = path.getOrDefault("subscriptionId")
  valid_570842 = validateParameter(valid_570842, JString, required = true,
                                 default = nil)
  if valid_570842 != nil:
    section.add "subscriptionId", valid_570842
  var valid_570843 = path.getOrDefault("hostName")
  valid_570843 = validateParameter(valid_570843, JString, required = true,
                                 default = nil)
  if valid_570843 != nil:
    section.add "hostName", valid_570843
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570844 = query.getOrDefault("api-version")
  valid_570844 = validateParameter(valid_570844, JString, required = true,
                                 default = nil)
  if valid_570844 != nil:
    section.add "api-version", valid_570844
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570845: Call_WebAppsGetHostNameBindingSlot_570836; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ## 
  let valid = call_570845.validator(path, query, header, formData, body)
  let scheme = call_570845.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570845.url(scheme.get, call_570845.host, call_570845.base,
                         call_570845.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570845, url, valid)

proc call*(call_570846: Call_WebAppsGetHostNameBindingSlot_570836;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsGetHostNameBindingSlot
  ## Get the named hostname binding for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_570847 = newJObject()
  var query_570848 = newJObject()
  add(path_570847, "resourceGroupName", newJString(resourceGroupName))
  add(query_570848, "api-version", newJString(apiVersion))
  add(path_570847, "name", newJString(name))
  add(path_570847, "slot", newJString(slot))
  add(path_570847, "subscriptionId", newJString(subscriptionId))
  add(path_570847, "hostName", newJString(hostName))
  result = call_570846.call(path_570847, query_570848, nil, nil, nil)

var webAppsGetHostNameBindingSlot* = Call_WebAppsGetHostNameBindingSlot_570836(
    name: "webAppsGetHostNameBindingSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsGetHostNameBindingSlot_570837, base: "",
    url: url_WebAppsGetHostNameBindingSlot_570838, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHostNameBindingSlot_570864 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteHostNameBindingSlot_570866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "hostName" in path, "`hostName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hostNameBindings/"),
               (kind: VariableSegment, value: "hostName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHostNameBindingSlot_570865(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: JString (required)
  ##           : Hostname in the hostname binding.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570867 = path.getOrDefault("resourceGroupName")
  valid_570867 = validateParameter(valid_570867, JString, required = true,
                                 default = nil)
  if valid_570867 != nil:
    section.add "resourceGroupName", valid_570867
  var valid_570868 = path.getOrDefault("name")
  valid_570868 = validateParameter(valid_570868, JString, required = true,
                                 default = nil)
  if valid_570868 != nil:
    section.add "name", valid_570868
  var valid_570869 = path.getOrDefault("slot")
  valid_570869 = validateParameter(valid_570869, JString, required = true,
                                 default = nil)
  if valid_570869 != nil:
    section.add "slot", valid_570869
  var valid_570870 = path.getOrDefault("subscriptionId")
  valid_570870 = validateParameter(valid_570870, JString, required = true,
                                 default = nil)
  if valid_570870 != nil:
    section.add "subscriptionId", valid_570870
  var valid_570871 = path.getOrDefault("hostName")
  valid_570871 = validateParameter(valid_570871, JString, required = true,
                                 default = nil)
  if valid_570871 != nil:
    section.add "hostName", valid_570871
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570872 = query.getOrDefault("api-version")
  valid_570872 = validateParameter(valid_570872, JString, required = true,
                                 default = nil)
  if valid_570872 != nil:
    section.add "api-version", valid_570872
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570873: Call_WebAppsDeleteHostNameBindingSlot_570864;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_570873.validator(path, query, header, formData, body)
  let scheme = call_570873.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570873.url(scheme.get, call_570873.host, call_570873.base,
                         call_570873.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570873, url, valid)

proc call*(call_570874: Call_WebAppsDeleteHostNameBindingSlot_570864;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; hostName: string): Recallable =
  ## webAppsDeleteHostNameBindingSlot
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   hostName: string (required)
  ##           : Hostname in the hostname binding.
  var path_570875 = newJObject()
  var query_570876 = newJObject()
  add(path_570875, "resourceGroupName", newJString(resourceGroupName))
  add(query_570876, "api-version", newJString(apiVersion))
  add(path_570875, "name", newJString(name))
  add(path_570875, "slot", newJString(slot))
  add(path_570875, "subscriptionId", newJString(subscriptionId))
  add(path_570875, "hostName", newJString(hostName))
  result = call_570874.call(path_570875, query_570876, nil, nil, nil)

var webAppsDeleteHostNameBindingSlot* = Call_WebAppsDeleteHostNameBindingSlot_570864(
    name: "webAppsDeleteHostNameBindingSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    validator: validate_WebAppsDeleteHostNameBindingSlot_570865, base: "",
    url: url_WebAppsDeleteHostNameBindingSlot_570866, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateHybridConnectionSlot_570891 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateHybridConnectionSlot_570893(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateHybridConnectionSlot_570892(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_570894 = path.getOrDefault("namespaceName")
  valid_570894 = validateParameter(valid_570894, JString, required = true,
                                 default = nil)
  if valid_570894 != nil:
    section.add "namespaceName", valid_570894
  var valid_570895 = path.getOrDefault("resourceGroupName")
  valid_570895 = validateParameter(valid_570895, JString, required = true,
                                 default = nil)
  if valid_570895 != nil:
    section.add "resourceGroupName", valid_570895
  var valid_570896 = path.getOrDefault("name")
  valid_570896 = validateParameter(valid_570896, JString, required = true,
                                 default = nil)
  if valid_570896 != nil:
    section.add "name", valid_570896
  var valid_570897 = path.getOrDefault("slot")
  valid_570897 = validateParameter(valid_570897, JString, required = true,
                                 default = nil)
  if valid_570897 != nil:
    section.add "slot", valid_570897
  var valid_570898 = path.getOrDefault("subscriptionId")
  valid_570898 = validateParameter(valid_570898, JString, required = true,
                                 default = nil)
  if valid_570898 != nil:
    section.add "subscriptionId", valid_570898
  var valid_570899 = path.getOrDefault("relayName")
  valid_570899 = validateParameter(valid_570899, JString, required = true,
                                 default = nil)
  if valid_570899 != nil:
    section.add "relayName", valid_570899
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570900 = query.getOrDefault("api-version")
  valid_570900 = validateParameter(valid_570900, JString, required = true,
                                 default = nil)
  if valid_570900 != nil:
    section.add "api-version", valid_570900
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570902: Call_WebAppsCreateOrUpdateHybridConnectionSlot_570891;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_570902.validator(path, query, header, formData, body)
  let scheme = call_570902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570902.url(scheme.get, call_570902.host, call_570902.base,
                         call_570902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570902, url, valid)

proc call*(call_570903: Call_WebAppsCreateOrUpdateHybridConnectionSlot_570891;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsCreateOrUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_570904 = newJObject()
  var query_570905 = newJObject()
  var body_570906 = newJObject()
  add(path_570904, "namespaceName", newJString(namespaceName))
  add(path_570904, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_570906 = connectionEnvelope
  add(path_570904, "name", newJString(name))
  add(query_570905, "api-version", newJString(apiVersion))
  add(path_570904, "slot", newJString(slot))
  add(path_570904, "subscriptionId", newJString(subscriptionId))
  add(path_570904, "relayName", newJString(relayName))
  result = call_570903.call(path_570904, query_570905, nil, nil, body_570906)

var webAppsCreateOrUpdateHybridConnectionSlot* = Call_WebAppsCreateOrUpdateHybridConnectionSlot_570891(
    name: "webAppsCreateOrUpdateHybridConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsCreateOrUpdateHybridConnectionSlot_570892,
    base: "", url: url_WebAppsCreateOrUpdateHybridConnectionSlot_570893,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetHybridConnectionSlot_570877 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetHybridConnectionSlot_570879(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetHybridConnectionSlot_570878(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_570880 = path.getOrDefault("namespaceName")
  valid_570880 = validateParameter(valid_570880, JString, required = true,
                                 default = nil)
  if valid_570880 != nil:
    section.add "namespaceName", valid_570880
  var valid_570881 = path.getOrDefault("resourceGroupName")
  valid_570881 = validateParameter(valid_570881, JString, required = true,
                                 default = nil)
  if valid_570881 != nil:
    section.add "resourceGroupName", valid_570881
  var valid_570882 = path.getOrDefault("name")
  valid_570882 = validateParameter(valid_570882, JString, required = true,
                                 default = nil)
  if valid_570882 != nil:
    section.add "name", valid_570882
  var valid_570883 = path.getOrDefault("slot")
  valid_570883 = validateParameter(valid_570883, JString, required = true,
                                 default = nil)
  if valid_570883 != nil:
    section.add "slot", valid_570883
  var valid_570884 = path.getOrDefault("subscriptionId")
  valid_570884 = validateParameter(valid_570884, JString, required = true,
                                 default = nil)
  if valid_570884 != nil:
    section.add "subscriptionId", valid_570884
  var valid_570885 = path.getOrDefault("relayName")
  valid_570885 = validateParameter(valid_570885, JString, required = true,
                                 default = nil)
  if valid_570885 != nil:
    section.add "relayName", valid_570885
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570886 = query.getOrDefault("api-version")
  valid_570886 = validateParameter(valid_570886, JString, required = true,
                                 default = nil)
  if valid_570886 != nil:
    section.add "api-version", valid_570886
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570887: Call_WebAppsGetHybridConnectionSlot_570877; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ## 
  let valid = call_570887.validator(path, query, header, formData, body)
  let scheme = call_570887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570887.url(scheme.get, call_570887.host, call_570887.base,
                         call_570887.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570887, url, valid)

proc call*(call_570888: Call_WebAppsGetHybridConnectionSlot_570877;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsGetHybridConnectionSlot
  ## Retrieves a specific Service Bus Hybrid Connection used by this Web App.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_570889 = newJObject()
  var query_570890 = newJObject()
  add(path_570889, "namespaceName", newJString(namespaceName))
  add(path_570889, "resourceGroupName", newJString(resourceGroupName))
  add(query_570890, "api-version", newJString(apiVersion))
  add(path_570889, "name", newJString(name))
  add(path_570889, "slot", newJString(slot))
  add(path_570889, "subscriptionId", newJString(subscriptionId))
  add(path_570889, "relayName", newJString(relayName))
  result = call_570888.call(path_570889, query_570890, nil, nil, nil)

var webAppsGetHybridConnectionSlot* = Call_WebAppsGetHybridConnectionSlot_570877(
    name: "webAppsGetHybridConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsGetHybridConnectionSlot_570878, base: "",
    url: url_WebAppsGetHybridConnectionSlot_570879, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateHybridConnectionSlot_570921 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateHybridConnectionSlot_570923(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateHybridConnectionSlot_570922(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_570924 = path.getOrDefault("namespaceName")
  valid_570924 = validateParameter(valid_570924, JString, required = true,
                                 default = nil)
  if valid_570924 != nil:
    section.add "namespaceName", valid_570924
  var valid_570925 = path.getOrDefault("resourceGroupName")
  valid_570925 = validateParameter(valid_570925, JString, required = true,
                                 default = nil)
  if valid_570925 != nil:
    section.add "resourceGroupName", valid_570925
  var valid_570926 = path.getOrDefault("name")
  valid_570926 = validateParameter(valid_570926, JString, required = true,
                                 default = nil)
  if valid_570926 != nil:
    section.add "name", valid_570926
  var valid_570927 = path.getOrDefault("slot")
  valid_570927 = validateParameter(valid_570927, JString, required = true,
                                 default = nil)
  if valid_570927 != nil:
    section.add "slot", valid_570927
  var valid_570928 = path.getOrDefault("subscriptionId")
  valid_570928 = validateParameter(valid_570928, JString, required = true,
                                 default = nil)
  if valid_570928 != nil:
    section.add "subscriptionId", valid_570928
  var valid_570929 = path.getOrDefault("relayName")
  valid_570929 = validateParameter(valid_570929, JString, required = true,
                                 default = nil)
  if valid_570929 != nil:
    section.add "relayName", valid_570929
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570930 = query.getOrDefault("api-version")
  valid_570930 = validateParameter(valid_570930, JString, required = true,
                                 default = nil)
  if valid_570930 != nil:
    section.add "api-version", valid_570930
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570932: Call_WebAppsUpdateHybridConnectionSlot_570921;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ## 
  let valid = call_570932.validator(path, query, header, formData, body)
  let scheme = call_570932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570932.url(scheme.get, call_570932.host, call_570932.base,
                         call_570932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570932, url, valid)

proc call*(call_570933: Call_WebAppsUpdateHybridConnectionSlot_570921;
          namespaceName: string; resourceGroupName: string;
          connectionEnvelope: JsonNode; name: string; apiVersion: string;
          slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsUpdateHybridConnectionSlot
  ## Creates a new Hybrid Connection using a Service Bus relay.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The details of the hybrid connection.
  ##   name: string (required)
  ##       : The name of the web app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_570934 = newJObject()
  var query_570935 = newJObject()
  var body_570936 = newJObject()
  add(path_570934, "namespaceName", newJString(namespaceName))
  add(path_570934, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_570936 = connectionEnvelope
  add(path_570934, "name", newJString(name))
  add(query_570935, "api-version", newJString(apiVersion))
  add(path_570934, "slot", newJString(slot))
  add(path_570934, "subscriptionId", newJString(subscriptionId))
  add(path_570934, "relayName", newJString(relayName))
  result = call_570933.call(path_570934, query_570935, nil, nil, body_570936)

var webAppsUpdateHybridConnectionSlot* = Call_WebAppsUpdateHybridConnectionSlot_570921(
    name: "webAppsUpdateHybridConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsUpdateHybridConnectionSlot_570922, base: "",
    url: url_WebAppsUpdateHybridConnectionSlot_570923, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteHybridConnectionSlot_570907 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteHybridConnectionSlot_570909(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteHybridConnectionSlot_570908(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a Hybrid Connection from this site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_570910 = path.getOrDefault("namespaceName")
  valid_570910 = validateParameter(valid_570910, JString, required = true,
                                 default = nil)
  if valid_570910 != nil:
    section.add "namespaceName", valid_570910
  var valid_570911 = path.getOrDefault("resourceGroupName")
  valid_570911 = validateParameter(valid_570911, JString, required = true,
                                 default = nil)
  if valid_570911 != nil:
    section.add "resourceGroupName", valid_570911
  var valid_570912 = path.getOrDefault("name")
  valid_570912 = validateParameter(valid_570912, JString, required = true,
                                 default = nil)
  if valid_570912 != nil:
    section.add "name", valid_570912
  var valid_570913 = path.getOrDefault("slot")
  valid_570913 = validateParameter(valid_570913, JString, required = true,
                                 default = nil)
  if valid_570913 != nil:
    section.add "slot", valid_570913
  var valid_570914 = path.getOrDefault("subscriptionId")
  valid_570914 = validateParameter(valid_570914, JString, required = true,
                                 default = nil)
  if valid_570914 != nil:
    section.add "subscriptionId", valid_570914
  var valid_570915 = path.getOrDefault("relayName")
  valid_570915 = validateParameter(valid_570915, JString, required = true,
                                 default = nil)
  if valid_570915 != nil:
    section.add "relayName", valid_570915
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570916 = query.getOrDefault("api-version")
  valid_570916 = validateParameter(valid_570916, JString, required = true,
                                 default = nil)
  if valid_570916 != nil:
    section.add "api-version", valid_570916
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570917: Call_WebAppsDeleteHybridConnectionSlot_570907;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a Hybrid Connection from this site.
  ## 
  let valid = call_570917.validator(path, query, header, formData, body)
  let scheme = call_570917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570917.url(scheme.get, call_570917.host, call_570917.base,
                         call_570917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570917, url, valid)

proc call*(call_570918: Call_WebAppsDeleteHybridConnectionSlot_570907;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsDeleteHybridConnectionSlot
  ## Removes a Hybrid Connection from this site.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_570919 = newJObject()
  var query_570920 = newJObject()
  add(path_570919, "namespaceName", newJString(namespaceName))
  add(path_570919, "resourceGroupName", newJString(resourceGroupName))
  add(query_570920, "api-version", newJString(apiVersion))
  add(path_570919, "name", newJString(name))
  add(path_570919, "slot", newJString(slot))
  add(path_570919, "subscriptionId", newJString(subscriptionId))
  add(path_570919, "relayName", newJString(relayName))
  result = call_570918.call(path_570919, query_570920, nil, nil, nil)

var webAppsDeleteHybridConnectionSlot* = Call_WebAppsDeleteHybridConnectionSlot_570907(
    name: "webAppsDeleteHybridConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    validator: validate_WebAppsDeleteHybridConnectionSlot_570908, base: "",
    url: url_WebAppsDeleteHybridConnectionSlot_570909, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionKeysSlot_570937 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHybridConnectionKeysSlot_570939(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "namespaceName" in path, "`namespaceName` is a required path parameter"
  assert "relayName" in path, "`relayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionNamespaces/"),
               (kind: VariableSegment, value: "namespaceName"),
               (kind: ConstantSegment, value: "/relays/"),
               (kind: VariableSegment, value: "relayName"),
               (kind: ConstantSegment, value: "/listKeys")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionKeysSlot_570938(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   namespaceName: JString (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: JString (required)
  ##            : The relay name for this hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `namespaceName` field"
  var valid_570940 = path.getOrDefault("namespaceName")
  valid_570940 = validateParameter(valid_570940, JString, required = true,
                                 default = nil)
  if valid_570940 != nil:
    section.add "namespaceName", valid_570940
  var valid_570941 = path.getOrDefault("resourceGroupName")
  valid_570941 = validateParameter(valid_570941, JString, required = true,
                                 default = nil)
  if valid_570941 != nil:
    section.add "resourceGroupName", valid_570941
  var valid_570942 = path.getOrDefault("name")
  valid_570942 = validateParameter(valid_570942, JString, required = true,
                                 default = nil)
  if valid_570942 != nil:
    section.add "name", valid_570942
  var valid_570943 = path.getOrDefault("slot")
  valid_570943 = validateParameter(valid_570943, JString, required = true,
                                 default = nil)
  if valid_570943 != nil:
    section.add "slot", valid_570943
  var valid_570944 = path.getOrDefault("subscriptionId")
  valid_570944 = validateParameter(valid_570944, JString, required = true,
                                 default = nil)
  if valid_570944 != nil:
    section.add "subscriptionId", valid_570944
  var valid_570945 = path.getOrDefault("relayName")
  valid_570945 = validateParameter(valid_570945, JString, required = true,
                                 default = nil)
  if valid_570945 != nil:
    section.add "relayName", valid_570945
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570946 = query.getOrDefault("api-version")
  valid_570946 = validateParameter(valid_570946, JString, required = true,
                                 default = nil)
  if valid_570946 != nil:
    section.add "api-version", valid_570946
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570947: Call_WebAppsListHybridConnectionKeysSlot_570937;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the send key name and value for a Hybrid Connection.
  ## 
  let valid = call_570947.validator(path, query, header, formData, body)
  let scheme = call_570947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570947.url(scheme.get, call_570947.host, call_570947.base,
                         call_570947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570947, url, valid)

proc call*(call_570948: Call_WebAppsListHybridConnectionKeysSlot_570937;
          namespaceName: string; resourceGroupName: string; apiVersion: string;
          name: string; slot: string; subscriptionId: string; relayName: string): Recallable =
  ## webAppsListHybridConnectionKeysSlot
  ## Gets the send key name and value for a Hybrid Connection.
  ##   namespaceName: string (required)
  ##                : The namespace for this hybrid connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   relayName: string (required)
  ##            : The relay name for this hybrid connection.
  var path_570949 = newJObject()
  var query_570950 = newJObject()
  add(path_570949, "namespaceName", newJString(namespaceName))
  add(path_570949, "resourceGroupName", newJString(resourceGroupName))
  add(query_570950, "api-version", newJString(apiVersion))
  add(path_570949, "name", newJString(name))
  add(path_570949, "slot", newJString(slot))
  add(path_570949, "subscriptionId", newJString(subscriptionId))
  add(path_570949, "relayName", newJString(relayName))
  result = call_570948.call(path_570949, query_570950, nil, nil, nil)

var webAppsListHybridConnectionKeysSlot* = Call_WebAppsListHybridConnectionKeysSlot_570937(
    name: "webAppsListHybridConnectionKeysSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    validator: validate_WebAppsListHybridConnectionKeysSlot_570938, base: "",
    url: url_WebAppsListHybridConnectionKeysSlot_570939, schemes: {Scheme.Https})
type
  Call_WebAppsListHybridConnectionsSlot_570951 = ref object of OpenApiRestCall_567666
proc url_WebAppsListHybridConnectionsSlot_570953(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridConnectionRelays")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListHybridConnectionsSlot_570952(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570954 = path.getOrDefault("resourceGroupName")
  valid_570954 = validateParameter(valid_570954, JString, required = true,
                                 default = nil)
  if valid_570954 != nil:
    section.add "resourceGroupName", valid_570954
  var valid_570955 = path.getOrDefault("name")
  valid_570955 = validateParameter(valid_570955, JString, required = true,
                                 default = nil)
  if valid_570955 != nil:
    section.add "name", valid_570955
  var valid_570956 = path.getOrDefault("slot")
  valid_570956 = validateParameter(valid_570956, JString, required = true,
                                 default = nil)
  if valid_570956 != nil:
    section.add "slot", valid_570956
  var valid_570957 = path.getOrDefault("subscriptionId")
  valid_570957 = validateParameter(valid_570957, JString, required = true,
                                 default = nil)
  if valid_570957 != nil:
    section.add "subscriptionId", valid_570957
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570958 = query.getOrDefault("api-version")
  valid_570958 = validateParameter(valid_570958, JString, required = true,
                                 default = nil)
  if valid_570958 != nil:
    section.add "api-version", valid_570958
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570959: Call_WebAppsListHybridConnectionsSlot_570951;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ## 
  let valid = call_570959.validator(path, query, header, formData, body)
  let scheme = call_570959.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570959.url(scheme.get, call_570959.host, call_570959.base,
                         call_570959.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570959, url, valid)

proc call*(call_570960: Call_WebAppsListHybridConnectionsSlot_570951;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListHybridConnectionsSlot
  ## Retrieves all Service Bus Hybrid Connections used by this Web App.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570961 = newJObject()
  var query_570962 = newJObject()
  add(path_570961, "resourceGroupName", newJString(resourceGroupName))
  add(query_570962, "api-version", newJString(apiVersion))
  add(path_570961, "name", newJString(name))
  add(path_570961, "slot", newJString(slot))
  add(path_570961, "subscriptionId", newJString(subscriptionId))
  result = call_570960.call(path_570961, query_570962, nil, nil, nil)

var webAppsListHybridConnectionsSlot* = Call_WebAppsListHybridConnectionsSlot_570951(
    name: "webAppsListHybridConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays",
    validator: validate_WebAppsListHybridConnectionsSlot_570952, base: "",
    url: url_WebAppsListHybridConnectionsSlot_570953, schemes: {Scheme.Https})
type
  Call_WebAppsListRelayServiceConnectionsSlot_570963 = ref object of OpenApiRestCall_567666
proc url_WebAppsListRelayServiceConnectionsSlot_570965(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListRelayServiceConnectionsSlot_570964(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570966 = path.getOrDefault("resourceGroupName")
  valid_570966 = validateParameter(valid_570966, JString, required = true,
                                 default = nil)
  if valid_570966 != nil:
    section.add "resourceGroupName", valid_570966
  var valid_570967 = path.getOrDefault("name")
  valid_570967 = validateParameter(valid_570967, JString, required = true,
                                 default = nil)
  if valid_570967 != nil:
    section.add "name", valid_570967
  var valid_570968 = path.getOrDefault("slot")
  valid_570968 = validateParameter(valid_570968, JString, required = true,
                                 default = nil)
  if valid_570968 != nil:
    section.add "slot", valid_570968
  var valid_570969 = path.getOrDefault("subscriptionId")
  valid_570969 = validateParameter(valid_570969, JString, required = true,
                                 default = nil)
  if valid_570969 != nil:
    section.add "subscriptionId", valid_570969
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570970 = query.getOrDefault("api-version")
  valid_570970 = validateParameter(valid_570970, JString, required = true,
                                 default = nil)
  if valid_570970 != nil:
    section.add "api-version", valid_570970
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570971: Call_WebAppsListRelayServiceConnectionsSlot_570963;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ## 
  let valid = call_570971.validator(path, query, header, formData, body)
  let scheme = call_570971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570971.url(scheme.get, call_570971.host, call_570971.base,
                         call_570971.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570971, url, valid)

proc call*(call_570972: Call_WebAppsListRelayServiceConnectionsSlot_570963;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListRelayServiceConnectionsSlot
  ## Gets hybrid connections configured for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_570973 = newJObject()
  var query_570974 = newJObject()
  add(path_570973, "resourceGroupName", newJString(resourceGroupName))
  add(query_570974, "api-version", newJString(apiVersion))
  add(path_570973, "name", newJString(name))
  add(path_570973, "slot", newJString(slot))
  add(path_570973, "subscriptionId", newJString(subscriptionId))
  result = call_570972.call(path_570973, query_570974, nil, nil, nil)

var webAppsListRelayServiceConnectionsSlot* = Call_WebAppsListRelayServiceConnectionsSlot_570963(
    name: "webAppsListRelayServiceConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
    validator: validate_WebAppsListRelayServiceConnectionsSlot_570964, base: "",
    url: url_WebAppsListRelayServiceConnectionsSlot_570965,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570988 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570990(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570989(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570991 = path.getOrDefault("resourceGroupName")
  valid_570991 = validateParameter(valid_570991, JString, required = true,
                                 default = nil)
  if valid_570991 != nil:
    section.add "resourceGroupName", valid_570991
  var valid_570992 = path.getOrDefault("name")
  valid_570992 = validateParameter(valid_570992, JString, required = true,
                                 default = nil)
  if valid_570992 != nil:
    section.add "name", valid_570992
  var valid_570993 = path.getOrDefault("slot")
  valid_570993 = validateParameter(valid_570993, JString, required = true,
                                 default = nil)
  if valid_570993 != nil:
    section.add "slot", valid_570993
  var valid_570994 = path.getOrDefault("subscriptionId")
  valid_570994 = validateParameter(valid_570994, JString, required = true,
                                 default = nil)
  if valid_570994 != nil:
    section.add "subscriptionId", valid_570994
  var valid_570995 = path.getOrDefault("entityName")
  valid_570995 = validateParameter(valid_570995, JString, required = true,
                                 default = nil)
  if valid_570995 != nil:
    section.add "entityName", valid_570995
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570996 = query.getOrDefault("api-version")
  valid_570996 = validateParameter(valid_570996, JString, required = true,
                                 default = nil)
  if valid_570996 != nil:
    section.add "api-version", valid_570996
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_570998: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570988;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_570998.validator(path, query, header, formData, body)
  let scheme = call_570998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570998.url(scheme.get, call_570998.host, call_570998.base,
                         call_570998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570998, url, valid)

proc call*(call_570999: Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570988;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsCreateOrUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_571000 = newJObject()
  var query_571001 = newJObject()
  var body_571002 = newJObject()
  add(path_571000, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571002 = connectionEnvelope
  add(path_571000, "name", newJString(name))
  add(query_571001, "api-version", newJString(apiVersion))
  add(path_571000, "slot", newJString(slot))
  add(path_571000, "subscriptionId", newJString(subscriptionId))
  add(path_571000, "entityName", newJString(entityName))
  result = call_570999.call(path_571000, query_571001, nil, nil, body_571002)

var webAppsCreateOrUpdateRelayServiceConnectionSlot* = Call_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570988(
    name: "webAppsCreateOrUpdateRelayServiceConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570989,
    base: "", url: url_WebAppsCreateOrUpdateRelayServiceConnectionSlot_570990,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetRelayServiceConnectionSlot_570975 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetRelayServiceConnectionSlot_570977(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetRelayServiceConnectionSlot_570976(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a hybrid connection configuration by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_570978 = path.getOrDefault("resourceGroupName")
  valid_570978 = validateParameter(valid_570978, JString, required = true,
                                 default = nil)
  if valid_570978 != nil:
    section.add "resourceGroupName", valid_570978
  var valid_570979 = path.getOrDefault("name")
  valid_570979 = validateParameter(valid_570979, JString, required = true,
                                 default = nil)
  if valid_570979 != nil:
    section.add "name", valid_570979
  var valid_570980 = path.getOrDefault("slot")
  valid_570980 = validateParameter(valid_570980, JString, required = true,
                                 default = nil)
  if valid_570980 != nil:
    section.add "slot", valid_570980
  var valid_570981 = path.getOrDefault("subscriptionId")
  valid_570981 = validateParameter(valid_570981, JString, required = true,
                                 default = nil)
  if valid_570981 != nil:
    section.add "subscriptionId", valid_570981
  var valid_570982 = path.getOrDefault("entityName")
  valid_570982 = validateParameter(valid_570982, JString, required = true,
                                 default = nil)
  if valid_570982 != nil:
    section.add "entityName", valid_570982
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_570983 = query.getOrDefault("api-version")
  valid_570983 = validateParameter(valid_570983, JString, required = true,
                                 default = nil)
  if valid_570983 != nil:
    section.add "api-version", valid_570983
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_570984: Call_WebAppsGetRelayServiceConnectionSlot_570975;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a hybrid connection configuration by its name.
  ## 
  let valid = call_570984.validator(path, query, header, formData, body)
  let scheme = call_570984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_570984.url(scheme.get, call_570984.host, call_570984.base,
                         call_570984.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_570984, url, valid)

proc call*(call_570985: Call_WebAppsGetRelayServiceConnectionSlot_570975;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsGetRelayServiceConnectionSlot
  ## Gets a hybrid connection configuration by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection.
  var path_570986 = newJObject()
  var query_570987 = newJObject()
  add(path_570986, "resourceGroupName", newJString(resourceGroupName))
  add(query_570987, "api-version", newJString(apiVersion))
  add(path_570986, "name", newJString(name))
  add(path_570986, "slot", newJString(slot))
  add(path_570986, "subscriptionId", newJString(subscriptionId))
  add(path_570986, "entityName", newJString(entityName))
  result = call_570985.call(path_570986, query_570987, nil, nil, nil)

var webAppsGetRelayServiceConnectionSlot* = Call_WebAppsGetRelayServiceConnectionSlot_570975(
    name: "webAppsGetRelayServiceConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsGetRelayServiceConnectionSlot_570976, base: "",
    url: url_WebAppsGetRelayServiceConnectionSlot_570977, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateRelayServiceConnectionSlot_571016 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateRelayServiceConnectionSlot_571018(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateRelayServiceConnectionSlot_571017(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571019 = path.getOrDefault("resourceGroupName")
  valid_571019 = validateParameter(valid_571019, JString, required = true,
                                 default = nil)
  if valid_571019 != nil:
    section.add "resourceGroupName", valid_571019
  var valid_571020 = path.getOrDefault("name")
  valid_571020 = validateParameter(valid_571020, JString, required = true,
                                 default = nil)
  if valid_571020 != nil:
    section.add "name", valid_571020
  var valid_571021 = path.getOrDefault("slot")
  valid_571021 = validateParameter(valid_571021, JString, required = true,
                                 default = nil)
  if valid_571021 != nil:
    section.add "slot", valid_571021
  var valid_571022 = path.getOrDefault("subscriptionId")
  valid_571022 = validateParameter(valid_571022, JString, required = true,
                                 default = nil)
  if valid_571022 != nil:
    section.add "subscriptionId", valid_571022
  var valid_571023 = path.getOrDefault("entityName")
  valid_571023 = validateParameter(valid_571023, JString, required = true,
                                 default = nil)
  if valid_571023 != nil:
    section.add "entityName", valid_571023
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571024 = query.getOrDefault("api-version")
  valid_571024 = validateParameter(valid_571024, JString, required = true,
                                 default = nil)
  if valid_571024 != nil:
    section.add "api-version", valid_571024
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571026: Call_WebAppsUpdateRelayServiceConnectionSlot_571016;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ## 
  let valid = call_571026.validator(path, query, header, formData, body)
  let scheme = call_571026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571026.url(scheme.get, call_571026.host, call_571026.base,
                         call_571026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571026, url, valid)

proc call*(call_571027: Call_WebAppsUpdateRelayServiceConnectionSlot_571016;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string; entityName: string): Recallable =
  ## webAppsUpdateRelayServiceConnectionSlot
  ## Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Details of the hybrid connection configuration.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_571028 = newJObject()
  var query_571029 = newJObject()
  var body_571030 = newJObject()
  add(path_571028, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571030 = connectionEnvelope
  add(path_571028, "name", newJString(name))
  add(query_571029, "api-version", newJString(apiVersion))
  add(path_571028, "slot", newJString(slot))
  add(path_571028, "subscriptionId", newJString(subscriptionId))
  add(path_571028, "entityName", newJString(entityName))
  result = call_571027.call(path_571028, query_571029, nil, nil, body_571030)

var webAppsUpdateRelayServiceConnectionSlot* = Call_WebAppsUpdateRelayServiceConnectionSlot_571016(
    name: "webAppsUpdateRelayServiceConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsUpdateRelayServiceConnectionSlot_571017, base: "",
    url: url_WebAppsUpdateRelayServiceConnectionSlot_571018,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteRelayServiceConnectionSlot_571003 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteRelayServiceConnectionSlot_571005(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "entityName" in path, "`entityName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/hybridconnection/"),
               (kind: VariableSegment, value: "entityName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteRelayServiceConnectionSlot_571004(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a relay service connection by its name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: JString (required)
  ##             : Name of the hybrid connection configuration.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571006 = path.getOrDefault("resourceGroupName")
  valid_571006 = validateParameter(valid_571006, JString, required = true,
                                 default = nil)
  if valid_571006 != nil:
    section.add "resourceGroupName", valid_571006
  var valid_571007 = path.getOrDefault("name")
  valid_571007 = validateParameter(valid_571007, JString, required = true,
                                 default = nil)
  if valid_571007 != nil:
    section.add "name", valid_571007
  var valid_571008 = path.getOrDefault("slot")
  valid_571008 = validateParameter(valid_571008, JString, required = true,
                                 default = nil)
  if valid_571008 != nil:
    section.add "slot", valid_571008
  var valid_571009 = path.getOrDefault("subscriptionId")
  valid_571009 = validateParameter(valid_571009, JString, required = true,
                                 default = nil)
  if valid_571009 != nil:
    section.add "subscriptionId", valid_571009
  var valid_571010 = path.getOrDefault("entityName")
  valid_571010 = validateParameter(valid_571010, JString, required = true,
                                 default = nil)
  if valid_571010 != nil:
    section.add "entityName", valid_571010
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571011 = query.getOrDefault("api-version")
  valid_571011 = validateParameter(valid_571011, JString, required = true,
                                 default = nil)
  if valid_571011 != nil:
    section.add "api-version", valid_571011
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571012: Call_WebAppsDeleteRelayServiceConnectionSlot_571003;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a relay service connection by its name.
  ## 
  let valid = call_571012.validator(path, query, header, formData, body)
  let scheme = call_571012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571012.url(scheme.get, call_571012.host, call_571012.base,
                         call_571012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571012, url, valid)

proc call*(call_571013: Call_WebAppsDeleteRelayServiceConnectionSlot_571003;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; entityName: string): Recallable =
  ## webAppsDeleteRelayServiceConnectionSlot
  ## Deletes a relay service connection by its name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   entityName: string (required)
  ##             : Name of the hybrid connection configuration.
  var path_571014 = newJObject()
  var query_571015 = newJObject()
  add(path_571014, "resourceGroupName", newJString(resourceGroupName))
  add(query_571015, "api-version", newJString(apiVersion))
  add(path_571014, "name", newJString(name))
  add(path_571014, "slot", newJString(slot))
  add(path_571014, "subscriptionId", newJString(subscriptionId))
  add(path_571014, "entityName", newJString(entityName))
  result = call_571013.call(path_571014, query_571015, nil, nil, nil)

var webAppsDeleteRelayServiceConnectionSlot* = Call_WebAppsDeleteRelayServiceConnectionSlot_571003(
    name: "webAppsDeleteRelayServiceConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    validator: validate_WebAppsDeleteRelayServiceConnectionSlot_571004, base: "",
    url: url_WebAppsDeleteRelayServiceConnectionSlot_571005,
    schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceIdentifiersSlot_571031 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceIdentifiersSlot_571033(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceIdentifiersSlot_571032(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all scale-out instances of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571034 = path.getOrDefault("resourceGroupName")
  valid_571034 = validateParameter(valid_571034, JString, required = true,
                                 default = nil)
  if valid_571034 != nil:
    section.add "resourceGroupName", valid_571034
  var valid_571035 = path.getOrDefault("name")
  valid_571035 = validateParameter(valid_571035, JString, required = true,
                                 default = nil)
  if valid_571035 != nil:
    section.add "name", valid_571035
  var valid_571036 = path.getOrDefault("slot")
  valid_571036 = validateParameter(valid_571036, JString, required = true,
                                 default = nil)
  if valid_571036 != nil:
    section.add "slot", valid_571036
  var valid_571037 = path.getOrDefault("subscriptionId")
  valid_571037 = validateParameter(valid_571037, JString, required = true,
                                 default = nil)
  if valid_571037 != nil:
    section.add "subscriptionId", valid_571037
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571038 = query.getOrDefault("api-version")
  valid_571038 = validateParameter(valid_571038, JString, required = true,
                                 default = nil)
  if valid_571038 != nil:
    section.add "api-version", valid_571038
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571039: Call_WebAppsListInstanceIdentifiersSlot_571031;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all scale-out instances of an app.
  ## 
  let valid = call_571039.validator(path, query, header, formData, body)
  let scheme = call_571039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571039.url(scheme.get, call_571039.host, call_571039.base,
                         call_571039.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571039, url, valid)

proc call*(call_571040: Call_WebAppsListInstanceIdentifiersSlot_571031;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListInstanceIdentifiersSlot
  ## Gets all scale-out instances of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571041 = newJObject()
  var query_571042 = newJObject()
  add(path_571041, "resourceGroupName", newJString(resourceGroupName))
  add(query_571042, "api-version", newJString(apiVersion))
  add(path_571041, "name", newJString(name))
  add(path_571041, "slot", newJString(slot))
  add(path_571041, "subscriptionId", newJString(subscriptionId))
  result = call_571040.call(path_571041, query_571042, nil, nil, nil)

var webAppsListInstanceIdentifiersSlot* = Call_WebAppsListInstanceIdentifiersSlot_571031(
    name: "webAppsListInstanceIdentifiersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
    validator: validate_WebAppsListInstanceIdentifiersSlot_571032, base: "",
    url: url_WebAppsListInstanceIdentifiersSlot_571033, schemes: {Scheme.Https})
type
  Call_WebAppsCreateInstanceMSDeployOperationSlot_571056 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateInstanceMSDeployOperationSlot_571058(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateInstanceMSDeployOperationSlot_571057(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Invoke the MSDeploy web app extension.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571059 = path.getOrDefault("resourceGroupName")
  valid_571059 = validateParameter(valid_571059, JString, required = true,
                                 default = nil)
  if valid_571059 != nil:
    section.add "resourceGroupName", valid_571059
  var valid_571060 = path.getOrDefault("name")
  valid_571060 = validateParameter(valid_571060, JString, required = true,
                                 default = nil)
  if valid_571060 != nil:
    section.add "name", valid_571060
  var valid_571061 = path.getOrDefault("slot")
  valid_571061 = validateParameter(valid_571061, JString, required = true,
                                 default = nil)
  if valid_571061 != nil:
    section.add "slot", valid_571061
  var valid_571062 = path.getOrDefault("subscriptionId")
  valid_571062 = validateParameter(valid_571062, JString, required = true,
                                 default = nil)
  if valid_571062 != nil:
    section.add "subscriptionId", valid_571062
  var valid_571063 = path.getOrDefault("instanceId")
  valid_571063 = validateParameter(valid_571063, JString, required = true,
                                 default = nil)
  if valid_571063 != nil:
    section.add "instanceId", valid_571063
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571064 = query.getOrDefault("api-version")
  valid_571064 = validateParameter(valid_571064, JString, required = true,
                                 default = nil)
  if valid_571064 != nil:
    section.add "api-version", valid_571064
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571066: Call_WebAppsCreateInstanceMSDeployOperationSlot_571056;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Invoke the MSDeploy web app extension.
  ## 
  let valid = call_571066.validator(path, query, header, formData, body)
  let scheme = call_571066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571066.url(scheme.get, call_571066.host, call_571066.base,
                         call_571066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571066, url, valid)

proc call*(call_571067: Call_WebAppsCreateInstanceMSDeployOperationSlot_571056;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string; MSDeploy: JsonNode): Recallable =
  ## webAppsCreateInstanceMSDeployOperationSlot
  ## Invoke the MSDeploy web app extension.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  ##   MSDeploy: JObject (required)
  ##           : Details of MSDeploy operation
  var path_571068 = newJObject()
  var query_571069 = newJObject()
  var body_571070 = newJObject()
  add(path_571068, "resourceGroupName", newJString(resourceGroupName))
  add(query_571069, "api-version", newJString(apiVersion))
  add(path_571068, "name", newJString(name))
  add(path_571068, "slot", newJString(slot))
  add(path_571068, "subscriptionId", newJString(subscriptionId))
  add(path_571068, "instanceId", newJString(instanceId))
  if MSDeploy != nil:
    body_571070 = MSDeploy
  result = call_571067.call(path_571068, query_571069, nil, nil, body_571070)

var webAppsCreateInstanceMSDeployOperationSlot* = Call_WebAppsCreateInstanceMSDeployOperationSlot_571056(
    name: "webAppsCreateInstanceMSDeployOperationSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsCreateInstanceMSDeployOperationSlot_571057,
    base: "", url: url_WebAppsCreateInstanceMSDeployOperationSlot_571058,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMsDeployStatusSlot_571043 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceMsDeployStatusSlot_571045(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMsDeployStatusSlot_571044(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the status of the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571046 = path.getOrDefault("resourceGroupName")
  valid_571046 = validateParameter(valid_571046, JString, required = true,
                                 default = nil)
  if valid_571046 != nil:
    section.add "resourceGroupName", valid_571046
  var valid_571047 = path.getOrDefault("name")
  valid_571047 = validateParameter(valid_571047, JString, required = true,
                                 default = nil)
  if valid_571047 != nil:
    section.add "name", valid_571047
  var valid_571048 = path.getOrDefault("slot")
  valid_571048 = validateParameter(valid_571048, JString, required = true,
                                 default = nil)
  if valid_571048 != nil:
    section.add "slot", valid_571048
  var valid_571049 = path.getOrDefault("subscriptionId")
  valid_571049 = validateParameter(valid_571049, JString, required = true,
                                 default = nil)
  if valid_571049 != nil:
    section.add "subscriptionId", valid_571049
  var valid_571050 = path.getOrDefault("instanceId")
  valid_571050 = validateParameter(valid_571050, JString, required = true,
                                 default = nil)
  if valid_571050 != nil:
    section.add "instanceId", valid_571050
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571051 = query.getOrDefault("api-version")
  valid_571051 = validateParameter(valid_571051, JString, required = true,
                                 default = nil)
  if valid_571051 != nil:
    section.add "api-version", valid_571051
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571052: Call_WebAppsGetInstanceMsDeployStatusSlot_571043;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the status of the last MSDeploy operation.
  ## 
  let valid = call_571052.validator(path, query, header, formData, body)
  let scheme = call_571052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571052.url(scheme.get, call_571052.host, call_571052.base,
                         call_571052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571052, url, valid)

proc call*(call_571053: Call_WebAppsGetInstanceMsDeployStatusSlot_571043;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMsDeployStatusSlot
  ## Get the status of the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_571054 = newJObject()
  var query_571055 = newJObject()
  add(path_571054, "resourceGroupName", newJString(resourceGroupName))
  add(query_571055, "api-version", newJString(apiVersion))
  add(path_571054, "name", newJString(name))
  add(path_571054, "slot", newJString(slot))
  add(path_571054, "subscriptionId", newJString(subscriptionId))
  add(path_571054, "instanceId", newJString(instanceId))
  result = call_571053.call(path_571054, query_571055, nil, nil, nil)

var webAppsGetInstanceMsDeployStatusSlot* = Call_WebAppsGetInstanceMsDeployStatusSlot_571043(
    name: "webAppsGetInstanceMsDeployStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    validator: validate_WebAppsGetInstanceMsDeployStatusSlot_571044, base: "",
    url: url_WebAppsGetInstanceMsDeployStatusSlot_571045, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceMSDeployLogSlot_571071 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceMSDeployLogSlot_571073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/extensions/MSDeploy/log")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceMSDeployLogSlot_571072(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of web app instance.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571074 = path.getOrDefault("resourceGroupName")
  valid_571074 = validateParameter(valid_571074, JString, required = true,
                                 default = nil)
  if valid_571074 != nil:
    section.add "resourceGroupName", valid_571074
  var valid_571075 = path.getOrDefault("name")
  valid_571075 = validateParameter(valid_571075, JString, required = true,
                                 default = nil)
  if valid_571075 != nil:
    section.add "name", valid_571075
  var valid_571076 = path.getOrDefault("slot")
  valid_571076 = validateParameter(valid_571076, JString, required = true,
                                 default = nil)
  if valid_571076 != nil:
    section.add "slot", valid_571076
  var valid_571077 = path.getOrDefault("subscriptionId")
  valid_571077 = validateParameter(valid_571077, JString, required = true,
                                 default = nil)
  if valid_571077 != nil:
    section.add "subscriptionId", valid_571077
  var valid_571078 = path.getOrDefault("instanceId")
  valid_571078 = validateParameter(valid_571078, JString, required = true,
                                 default = nil)
  if valid_571078 != nil:
    section.add "instanceId", valid_571078
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571079 = query.getOrDefault("api-version")
  valid_571079 = validateParameter(valid_571079, JString, required = true,
                                 default = nil)
  if valid_571079 != nil:
    section.add "api-version", valid_571079
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571080: Call_WebAppsGetInstanceMSDeployLogSlot_571071;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ## 
  let valid = call_571080.validator(path, query, header, formData, body)
  let scheme = call_571080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571080.url(scheme.get, call_571080.host, call_571080.base,
                         call_571080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571080, url, valid)

proc call*(call_571081: Call_WebAppsGetInstanceMSDeployLogSlot_571071;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceMSDeployLogSlot
  ## Get the MSDeploy Log for the last MSDeploy operation.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of web app instance.
  var path_571082 = newJObject()
  var query_571083 = newJObject()
  add(path_571082, "resourceGroupName", newJString(resourceGroupName))
  add(query_571083, "api-version", newJString(apiVersion))
  add(path_571082, "name", newJString(name))
  add(path_571082, "slot", newJString(slot))
  add(path_571082, "subscriptionId", newJString(subscriptionId))
  add(path_571082, "instanceId", newJString(instanceId))
  result = call_571081.call(path_571082, query_571083, nil, nil, nil)

var webAppsGetInstanceMSDeployLogSlot* = Call_WebAppsGetInstanceMSDeployLogSlot_571071(
    name: "webAppsGetInstanceMSDeployLogSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log",
    validator: validate_WebAppsGetInstanceMSDeployLogSlot_571072, base: "",
    url: url_WebAppsGetInstanceMSDeployLogSlot_571073, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessesSlot_571084 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcessesSlot_571086(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessesSlot_571085(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571087 = path.getOrDefault("resourceGroupName")
  valid_571087 = validateParameter(valid_571087, JString, required = true,
                                 default = nil)
  if valid_571087 != nil:
    section.add "resourceGroupName", valid_571087
  var valid_571088 = path.getOrDefault("name")
  valid_571088 = validateParameter(valid_571088, JString, required = true,
                                 default = nil)
  if valid_571088 != nil:
    section.add "name", valid_571088
  var valid_571089 = path.getOrDefault("slot")
  valid_571089 = validateParameter(valid_571089, JString, required = true,
                                 default = nil)
  if valid_571089 != nil:
    section.add "slot", valid_571089
  var valid_571090 = path.getOrDefault("subscriptionId")
  valid_571090 = validateParameter(valid_571090, JString, required = true,
                                 default = nil)
  if valid_571090 != nil:
    section.add "subscriptionId", valid_571090
  var valid_571091 = path.getOrDefault("instanceId")
  valid_571091 = validateParameter(valid_571091, JString, required = true,
                                 default = nil)
  if valid_571091 != nil:
    section.add "instanceId", valid_571091
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571092 = query.getOrDefault("api-version")
  valid_571092 = validateParameter(valid_571092, JString, required = true,
                                 default = nil)
  if valid_571092 != nil:
    section.add "api-version", valid_571092
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571093: Call_WebAppsListInstanceProcessesSlot_571084;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571093.validator(path, query, header, formData, body)
  let scheme = call_571093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571093.url(scheme.get, call_571093.host, call_571093.base,
                         call_571093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571093, url, valid)

proc call*(call_571094: Call_WebAppsListInstanceProcessesSlot_571084;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_571095 = newJObject()
  var query_571096 = newJObject()
  add(path_571095, "resourceGroupName", newJString(resourceGroupName))
  add(query_571096, "api-version", newJString(apiVersion))
  add(path_571095, "name", newJString(name))
  add(path_571095, "slot", newJString(slot))
  add(path_571095, "subscriptionId", newJString(subscriptionId))
  add(path_571095, "instanceId", newJString(instanceId))
  result = call_571094.call(path_571095, query_571096, nil, nil, nil)

var webAppsListInstanceProcessesSlot* = Call_WebAppsListInstanceProcessesSlot_571084(
    name: "webAppsListInstanceProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes",
    validator: validate_WebAppsListInstanceProcessesSlot_571085, base: "",
    url: url_WebAppsListInstanceProcessesSlot_571086, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessSlot_571097 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessSlot_571099(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessSlot_571098(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571100 = path.getOrDefault("resourceGroupName")
  valid_571100 = validateParameter(valid_571100, JString, required = true,
                                 default = nil)
  if valid_571100 != nil:
    section.add "resourceGroupName", valid_571100
  var valid_571101 = path.getOrDefault("name")
  valid_571101 = validateParameter(valid_571101, JString, required = true,
                                 default = nil)
  if valid_571101 != nil:
    section.add "name", valid_571101
  var valid_571102 = path.getOrDefault("processId")
  valid_571102 = validateParameter(valid_571102, JString, required = true,
                                 default = nil)
  if valid_571102 != nil:
    section.add "processId", valid_571102
  var valid_571103 = path.getOrDefault("slot")
  valid_571103 = validateParameter(valid_571103, JString, required = true,
                                 default = nil)
  if valid_571103 != nil:
    section.add "slot", valid_571103
  var valid_571104 = path.getOrDefault("subscriptionId")
  valid_571104 = validateParameter(valid_571104, JString, required = true,
                                 default = nil)
  if valid_571104 != nil:
    section.add "subscriptionId", valid_571104
  var valid_571105 = path.getOrDefault("instanceId")
  valid_571105 = validateParameter(valid_571105, JString, required = true,
                                 default = nil)
  if valid_571105 != nil:
    section.add "instanceId", valid_571105
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571106 = query.getOrDefault("api-version")
  valid_571106 = validateParameter(valid_571106, JString, required = true,
                                 default = nil)
  if valid_571106 != nil:
    section.add "api-version", valid_571106
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571107: Call_WebAppsGetInstanceProcessSlot_571097; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571107.validator(path, query, header, formData, body)
  let scheme = call_571107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571107.url(scheme.get, call_571107.host, call_571107.base,
                         call_571107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571107, url, valid)

proc call*(call_571108: Call_WebAppsGetInstanceProcessSlot_571097;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_571109 = newJObject()
  var query_571110 = newJObject()
  add(path_571109, "resourceGroupName", newJString(resourceGroupName))
  add(query_571110, "api-version", newJString(apiVersion))
  add(path_571109, "name", newJString(name))
  add(path_571109, "processId", newJString(processId))
  add(path_571109, "slot", newJString(slot))
  add(path_571109, "subscriptionId", newJString(subscriptionId))
  add(path_571109, "instanceId", newJString(instanceId))
  result = call_571108.call(path_571109, query_571110, nil, nil, nil)

var webAppsGetInstanceProcessSlot* = Call_WebAppsGetInstanceProcessSlot_571097(
    name: "webAppsGetInstanceProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsGetInstanceProcessSlot_571098, base: "",
    url: url_WebAppsGetInstanceProcessSlot_571099, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteInstanceProcessSlot_571111 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteInstanceProcessSlot_571113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteInstanceProcessSlot_571112(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571114 = path.getOrDefault("resourceGroupName")
  valid_571114 = validateParameter(valid_571114, JString, required = true,
                                 default = nil)
  if valid_571114 != nil:
    section.add "resourceGroupName", valid_571114
  var valid_571115 = path.getOrDefault("name")
  valid_571115 = validateParameter(valid_571115, JString, required = true,
                                 default = nil)
  if valid_571115 != nil:
    section.add "name", valid_571115
  var valid_571116 = path.getOrDefault("processId")
  valid_571116 = validateParameter(valid_571116, JString, required = true,
                                 default = nil)
  if valid_571116 != nil:
    section.add "processId", valid_571116
  var valid_571117 = path.getOrDefault("slot")
  valid_571117 = validateParameter(valid_571117, JString, required = true,
                                 default = nil)
  if valid_571117 != nil:
    section.add "slot", valid_571117
  var valid_571118 = path.getOrDefault("subscriptionId")
  valid_571118 = validateParameter(valid_571118, JString, required = true,
                                 default = nil)
  if valid_571118 != nil:
    section.add "subscriptionId", valid_571118
  var valid_571119 = path.getOrDefault("instanceId")
  valid_571119 = validateParameter(valid_571119, JString, required = true,
                                 default = nil)
  if valid_571119 != nil:
    section.add "instanceId", valid_571119
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571120 = query.getOrDefault("api-version")
  valid_571120 = validateParameter(valid_571120, JString, required = true,
                                 default = nil)
  if valid_571120 != nil:
    section.add "api-version", valid_571120
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571121: Call_WebAppsDeleteInstanceProcessSlot_571111;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_571121.validator(path, query, header, formData, body)
  let scheme = call_571121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571121.url(scheme.get, call_571121.host, call_571121.base,
                         call_571121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571121, url, valid)

proc call*(call_571122: Call_WebAppsDeleteInstanceProcessSlot_571111;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsDeleteInstanceProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_571123 = newJObject()
  var query_571124 = newJObject()
  add(path_571123, "resourceGroupName", newJString(resourceGroupName))
  add(query_571124, "api-version", newJString(apiVersion))
  add(path_571123, "name", newJString(name))
  add(path_571123, "processId", newJString(processId))
  add(path_571123, "slot", newJString(slot))
  add(path_571123, "subscriptionId", newJString(subscriptionId))
  add(path_571123, "instanceId", newJString(instanceId))
  result = call_571122.call(path_571123, query_571124, nil, nil, nil)

var webAppsDeleteInstanceProcessSlot* = Call_WebAppsDeleteInstanceProcessSlot_571111(
    name: "webAppsDeleteInstanceProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    validator: validate_WebAppsDeleteInstanceProcessSlot_571112, base: "",
    url: url_WebAppsDeleteInstanceProcessSlot_571113, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessDumpSlot_571125 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessDumpSlot_571127(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessDumpSlot_571126(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571128 = path.getOrDefault("resourceGroupName")
  valid_571128 = validateParameter(valid_571128, JString, required = true,
                                 default = nil)
  if valid_571128 != nil:
    section.add "resourceGroupName", valid_571128
  var valid_571129 = path.getOrDefault("name")
  valid_571129 = validateParameter(valid_571129, JString, required = true,
                                 default = nil)
  if valid_571129 != nil:
    section.add "name", valid_571129
  var valid_571130 = path.getOrDefault("processId")
  valid_571130 = validateParameter(valid_571130, JString, required = true,
                                 default = nil)
  if valid_571130 != nil:
    section.add "processId", valid_571130
  var valid_571131 = path.getOrDefault("slot")
  valid_571131 = validateParameter(valid_571131, JString, required = true,
                                 default = nil)
  if valid_571131 != nil:
    section.add "slot", valid_571131
  var valid_571132 = path.getOrDefault("subscriptionId")
  valid_571132 = validateParameter(valid_571132, JString, required = true,
                                 default = nil)
  if valid_571132 != nil:
    section.add "subscriptionId", valid_571132
  var valid_571133 = path.getOrDefault("instanceId")
  valid_571133 = validateParameter(valid_571133, JString, required = true,
                                 default = nil)
  if valid_571133 != nil:
    section.add "instanceId", valid_571133
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571134 = query.getOrDefault("api-version")
  valid_571134 = validateParameter(valid_571134, JString, required = true,
                                 default = nil)
  if valid_571134 != nil:
    section.add "api-version", valid_571134
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571135: Call_WebAppsGetInstanceProcessDumpSlot_571125;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571135.validator(path, query, header, formData, body)
  let scheme = call_571135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571135.url(scheme.get, call_571135.host, call_571135.base,
                         call_571135.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571135, url, valid)

proc call*(call_571136: Call_WebAppsGetInstanceProcessDumpSlot_571125;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_571137 = newJObject()
  var query_571138 = newJObject()
  add(path_571137, "resourceGroupName", newJString(resourceGroupName))
  add(query_571138, "api-version", newJString(apiVersion))
  add(path_571137, "name", newJString(name))
  add(path_571137, "processId", newJString(processId))
  add(path_571137, "slot", newJString(slot))
  add(path_571137, "subscriptionId", newJString(subscriptionId))
  add(path_571137, "instanceId", newJString(instanceId))
  result = call_571136.call(path_571137, query_571138, nil, nil, nil)

var webAppsGetInstanceProcessDumpSlot* = Call_WebAppsGetInstanceProcessDumpSlot_571125(
    name: "webAppsGetInstanceProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump",
    validator: validate_WebAppsGetInstanceProcessDumpSlot_571126, base: "",
    url: url_WebAppsGetInstanceProcessDumpSlot_571127, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessModulesSlot_571139 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcessModulesSlot_571141(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessModulesSlot_571140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571142 = path.getOrDefault("resourceGroupName")
  valid_571142 = validateParameter(valid_571142, JString, required = true,
                                 default = nil)
  if valid_571142 != nil:
    section.add "resourceGroupName", valid_571142
  var valid_571143 = path.getOrDefault("name")
  valid_571143 = validateParameter(valid_571143, JString, required = true,
                                 default = nil)
  if valid_571143 != nil:
    section.add "name", valid_571143
  var valid_571144 = path.getOrDefault("processId")
  valid_571144 = validateParameter(valid_571144, JString, required = true,
                                 default = nil)
  if valid_571144 != nil:
    section.add "processId", valid_571144
  var valid_571145 = path.getOrDefault("slot")
  valid_571145 = validateParameter(valid_571145, JString, required = true,
                                 default = nil)
  if valid_571145 != nil:
    section.add "slot", valid_571145
  var valid_571146 = path.getOrDefault("subscriptionId")
  valid_571146 = validateParameter(valid_571146, JString, required = true,
                                 default = nil)
  if valid_571146 != nil:
    section.add "subscriptionId", valid_571146
  var valid_571147 = path.getOrDefault("instanceId")
  valid_571147 = validateParameter(valid_571147, JString, required = true,
                                 default = nil)
  if valid_571147 != nil:
    section.add "instanceId", valid_571147
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571148 = query.getOrDefault("api-version")
  valid_571148 = validateParameter(valid_571148, JString, required = true,
                                 default = nil)
  if valid_571148 != nil:
    section.add "api-version", valid_571148
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571149: Call_WebAppsListInstanceProcessModulesSlot_571139;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571149.validator(path, query, header, formData, body)
  let scheme = call_571149.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571149.url(scheme.get, call_571149.host, call_571149.base,
                         call_571149.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571149, url, valid)

proc call*(call_571150: Call_WebAppsListInstanceProcessModulesSlot_571139;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_571151 = newJObject()
  var query_571152 = newJObject()
  add(path_571151, "resourceGroupName", newJString(resourceGroupName))
  add(query_571152, "api-version", newJString(apiVersion))
  add(path_571151, "name", newJString(name))
  add(path_571151, "processId", newJString(processId))
  add(path_571151, "slot", newJString(slot))
  add(path_571151, "subscriptionId", newJString(subscriptionId))
  add(path_571151, "instanceId", newJString(instanceId))
  result = call_571150.call(path_571151, query_571152, nil, nil, nil)

var webAppsListInstanceProcessModulesSlot* = Call_WebAppsListInstanceProcessModulesSlot_571139(
    name: "webAppsListInstanceProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules",
    validator: validate_WebAppsListInstanceProcessModulesSlot_571140, base: "",
    url: url_WebAppsListInstanceProcessModulesSlot_571141, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessModuleSlot_571153 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessModuleSlot_571155(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessModuleSlot_571154(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571156 = path.getOrDefault("resourceGroupName")
  valid_571156 = validateParameter(valid_571156, JString, required = true,
                                 default = nil)
  if valid_571156 != nil:
    section.add "resourceGroupName", valid_571156
  var valid_571157 = path.getOrDefault("name")
  valid_571157 = validateParameter(valid_571157, JString, required = true,
                                 default = nil)
  if valid_571157 != nil:
    section.add "name", valid_571157
  var valid_571158 = path.getOrDefault("processId")
  valid_571158 = validateParameter(valid_571158, JString, required = true,
                                 default = nil)
  if valid_571158 != nil:
    section.add "processId", valid_571158
  var valid_571159 = path.getOrDefault("slot")
  valid_571159 = validateParameter(valid_571159, JString, required = true,
                                 default = nil)
  if valid_571159 != nil:
    section.add "slot", valid_571159
  var valid_571160 = path.getOrDefault("subscriptionId")
  valid_571160 = validateParameter(valid_571160, JString, required = true,
                                 default = nil)
  if valid_571160 != nil:
    section.add "subscriptionId", valid_571160
  var valid_571161 = path.getOrDefault("baseAddress")
  valid_571161 = validateParameter(valid_571161, JString, required = true,
                                 default = nil)
  if valid_571161 != nil:
    section.add "baseAddress", valid_571161
  var valid_571162 = path.getOrDefault("instanceId")
  valid_571162 = validateParameter(valid_571162, JString, required = true,
                                 default = nil)
  if valid_571162 != nil:
    section.add "instanceId", valid_571162
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571163 = query.getOrDefault("api-version")
  valid_571163 = validateParameter(valid_571163, JString, required = true,
                                 default = nil)
  if valid_571163 != nil:
    section.add "api-version", valid_571163
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571164: Call_WebAppsGetInstanceProcessModuleSlot_571153;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571164.validator(path, query, header, formData, body)
  let scheme = call_571164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571164.url(scheme.get, call_571164.host, call_571164.base,
                         call_571164.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571164, url, valid)

proc call*(call_571165: Call_WebAppsGetInstanceProcessModuleSlot_571153;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string;
          baseAddress: string; instanceId: string): Recallable =
  ## webAppsGetInstanceProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_571166 = newJObject()
  var query_571167 = newJObject()
  add(path_571166, "resourceGroupName", newJString(resourceGroupName))
  add(query_571167, "api-version", newJString(apiVersion))
  add(path_571166, "name", newJString(name))
  add(path_571166, "processId", newJString(processId))
  add(path_571166, "slot", newJString(slot))
  add(path_571166, "subscriptionId", newJString(subscriptionId))
  add(path_571166, "baseAddress", newJString(baseAddress))
  add(path_571166, "instanceId", newJString(instanceId))
  result = call_571165.call(path_571166, query_571167, nil, nil, nil)

var webAppsGetInstanceProcessModuleSlot* = Call_WebAppsGetInstanceProcessModuleSlot_571153(
    name: "webAppsGetInstanceProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetInstanceProcessModuleSlot_571154, base: "",
    url: url_WebAppsGetInstanceProcessModuleSlot_571155, schemes: {Scheme.Https})
type
  Call_WebAppsListInstanceProcessThreadsSlot_571168 = ref object of OpenApiRestCall_567666
proc url_WebAppsListInstanceProcessThreadsSlot_571170(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListInstanceProcessThreadsSlot_571169(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571171 = path.getOrDefault("resourceGroupName")
  valid_571171 = validateParameter(valid_571171, JString, required = true,
                                 default = nil)
  if valid_571171 != nil:
    section.add "resourceGroupName", valid_571171
  var valid_571172 = path.getOrDefault("name")
  valid_571172 = validateParameter(valid_571172, JString, required = true,
                                 default = nil)
  if valid_571172 != nil:
    section.add "name", valid_571172
  var valid_571173 = path.getOrDefault("processId")
  valid_571173 = validateParameter(valid_571173, JString, required = true,
                                 default = nil)
  if valid_571173 != nil:
    section.add "processId", valid_571173
  var valid_571174 = path.getOrDefault("slot")
  valid_571174 = validateParameter(valid_571174, JString, required = true,
                                 default = nil)
  if valid_571174 != nil:
    section.add "slot", valid_571174
  var valid_571175 = path.getOrDefault("subscriptionId")
  valid_571175 = validateParameter(valid_571175, JString, required = true,
                                 default = nil)
  if valid_571175 != nil:
    section.add "subscriptionId", valid_571175
  var valid_571176 = path.getOrDefault("instanceId")
  valid_571176 = validateParameter(valid_571176, JString, required = true,
                                 default = nil)
  if valid_571176 != nil:
    section.add "instanceId", valid_571176
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571177 = query.getOrDefault("api-version")
  valid_571177 = validateParameter(valid_571177, JString, required = true,
                                 default = nil)
  if valid_571177 != nil:
    section.add "api-version", valid_571177
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571178: Call_WebAppsListInstanceProcessThreadsSlot_571168;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571178.validator(path, query, header, formData, body)
  let scheme = call_571178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571178.url(scheme.get, call_571178.host, call_571178.base,
                         call_571178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571178, url, valid)

proc call*(call_571179: Call_WebAppsListInstanceProcessThreadsSlot_571168;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string): Recallable =
  ## webAppsListInstanceProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  var path_571180 = newJObject()
  var query_571181 = newJObject()
  add(path_571180, "resourceGroupName", newJString(resourceGroupName))
  add(query_571181, "api-version", newJString(apiVersion))
  add(path_571180, "name", newJString(name))
  add(path_571180, "processId", newJString(processId))
  add(path_571180, "slot", newJString(slot))
  add(path_571180, "subscriptionId", newJString(subscriptionId))
  add(path_571180, "instanceId", newJString(instanceId))
  result = call_571179.call(path_571180, query_571181, nil, nil, nil)

var webAppsListInstanceProcessThreadsSlot* = Call_WebAppsListInstanceProcessThreadsSlot_571168(
    name: "webAppsListInstanceProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads",
    validator: validate_WebAppsListInstanceProcessThreadsSlot_571169, base: "",
    url: url_WebAppsListInstanceProcessThreadsSlot_571170, schemes: {Scheme.Https})
type
  Call_WebAppsGetInstanceProcessThreadSlot_571182 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetInstanceProcessThreadSlot_571184(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "instanceId" in path, "`instanceId` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/instances/"),
               (kind: VariableSegment, value: "instanceId"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetInstanceProcessThreadSlot_571183(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: JString (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571185 = path.getOrDefault("resourceGroupName")
  valid_571185 = validateParameter(valid_571185, JString, required = true,
                                 default = nil)
  if valid_571185 != nil:
    section.add "resourceGroupName", valid_571185
  var valid_571186 = path.getOrDefault("name")
  valid_571186 = validateParameter(valid_571186, JString, required = true,
                                 default = nil)
  if valid_571186 != nil:
    section.add "name", valid_571186
  var valid_571187 = path.getOrDefault("processId")
  valid_571187 = validateParameter(valid_571187, JString, required = true,
                                 default = nil)
  if valid_571187 != nil:
    section.add "processId", valid_571187
  var valid_571188 = path.getOrDefault("slot")
  valid_571188 = validateParameter(valid_571188, JString, required = true,
                                 default = nil)
  if valid_571188 != nil:
    section.add "slot", valid_571188
  var valid_571189 = path.getOrDefault("subscriptionId")
  valid_571189 = validateParameter(valid_571189, JString, required = true,
                                 default = nil)
  if valid_571189 != nil:
    section.add "subscriptionId", valid_571189
  var valid_571190 = path.getOrDefault("instanceId")
  valid_571190 = validateParameter(valid_571190, JString, required = true,
                                 default = nil)
  if valid_571190 != nil:
    section.add "instanceId", valid_571190
  var valid_571191 = path.getOrDefault("threadId")
  valid_571191 = validateParameter(valid_571191, JString, required = true,
                                 default = nil)
  if valid_571191 != nil:
    section.add "threadId", valid_571191
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571192 = query.getOrDefault("api-version")
  valid_571192 = validateParameter(valid_571192, JString, required = true,
                                 default = nil)
  if valid_571192 != nil:
    section.add "api-version", valid_571192
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571193: Call_WebAppsGetInstanceProcessThreadSlot_571182;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_571193.validator(path, query, header, formData, body)
  let scheme = call_571193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571193.url(scheme.get, call_571193.host, call_571193.base,
                         call_571193.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571193, url, valid)

proc call*(call_571194: Call_WebAppsGetInstanceProcessThreadSlot_571182;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; instanceId: string;
          threadId: string): Recallable =
  ## webAppsGetInstanceProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   instanceId: string (required)
  ##             : ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
  ##   threadId: string (required)
  ##           : TID.
  var path_571195 = newJObject()
  var query_571196 = newJObject()
  add(path_571195, "resourceGroupName", newJString(resourceGroupName))
  add(query_571196, "api-version", newJString(apiVersion))
  add(path_571195, "name", newJString(name))
  add(path_571195, "processId", newJString(processId))
  add(path_571195, "slot", newJString(slot))
  add(path_571195, "subscriptionId", newJString(subscriptionId))
  add(path_571195, "instanceId", newJString(instanceId))
  add(path_571195, "threadId", newJString(threadId))
  result = call_571194.call(path_571195, query_571196, nil, nil, nil)

var webAppsGetInstanceProcessThreadSlot* = Call_WebAppsGetInstanceProcessThreadSlot_571182(
    name: "webAppsGetInstanceProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetInstanceProcessThreadSlot_571183, base: "",
    url: url_WebAppsGetInstanceProcessThreadSlot_571184, schemes: {Scheme.Https})
type
  Call_WebAppsIsCloneableSlot_571197 = ref object of OpenApiRestCall_567666
proc url_WebAppsIsCloneableSlot_571199(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/iscloneable")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsIsCloneableSlot_571198(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571200 = path.getOrDefault("resourceGroupName")
  valid_571200 = validateParameter(valid_571200, JString, required = true,
                                 default = nil)
  if valid_571200 != nil:
    section.add "resourceGroupName", valid_571200
  var valid_571201 = path.getOrDefault("name")
  valid_571201 = validateParameter(valid_571201, JString, required = true,
                                 default = nil)
  if valid_571201 != nil:
    section.add "name", valid_571201
  var valid_571202 = path.getOrDefault("slot")
  valid_571202 = validateParameter(valid_571202, JString, required = true,
                                 default = nil)
  if valid_571202 != nil:
    section.add "slot", valid_571202
  var valid_571203 = path.getOrDefault("subscriptionId")
  valid_571203 = validateParameter(valid_571203, JString, required = true,
                                 default = nil)
  if valid_571203 != nil:
    section.add "subscriptionId", valid_571203
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571204 = query.getOrDefault("api-version")
  valid_571204 = validateParameter(valid_571204, JString, required = true,
                                 default = nil)
  if valid_571204 != nil:
    section.add "api-version", valid_571204
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571205: Call_WebAppsIsCloneableSlot_571197; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Shows whether an app can be cloned to another resource group or subscription.
  ## 
  let valid = call_571205.validator(path, query, header, formData, body)
  let scheme = call_571205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571205.url(scheme.get, call_571205.host, call_571205.base,
                         call_571205.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571205, url, valid)

proc call*(call_571206: Call_WebAppsIsCloneableSlot_571197;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsIsCloneableSlot
  ## Shows whether an app can be cloned to another resource group or subscription.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. By default, this API returns information on the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571207 = newJObject()
  var query_571208 = newJObject()
  add(path_571207, "resourceGroupName", newJString(resourceGroupName))
  add(query_571208, "api-version", newJString(apiVersion))
  add(path_571207, "name", newJString(name))
  add(path_571207, "slot", newJString(slot))
  add(path_571207, "subscriptionId", newJString(subscriptionId))
  result = call_571206.call(path_571207, query_571208, nil, nil, nil)

var webAppsIsCloneableSlot* = Call_WebAppsIsCloneableSlot_571197(
    name: "webAppsIsCloneableSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
    validator: validate_WebAppsIsCloneableSlot_571198, base: "",
    url: url_WebAppsIsCloneableSlot_571199, schemes: {Scheme.Https})
type
  Call_WebAppsListSyncFunctionTriggersSlot_571209 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSyncFunctionTriggersSlot_571211(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/listsyncfunctiontriggerstatus")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSyncFunctionTriggersSlot_571210(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## This is to allow calling via powershell and ARM template.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571212 = path.getOrDefault("resourceGroupName")
  valid_571212 = validateParameter(valid_571212, JString, required = true,
                                 default = nil)
  if valid_571212 != nil:
    section.add "resourceGroupName", valid_571212
  var valid_571213 = path.getOrDefault("name")
  valid_571213 = validateParameter(valid_571213, JString, required = true,
                                 default = nil)
  if valid_571213 != nil:
    section.add "name", valid_571213
  var valid_571214 = path.getOrDefault("slot")
  valid_571214 = validateParameter(valid_571214, JString, required = true,
                                 default = nil)
  if valid_571214 != nil:
    section.add "slot", valid_571214
  var valid_571215 = path.getOrDefault("subscriptionId")
  valid_571215 = validateParameter(valid_571215, JString, required = true,
                                 default = nil)
  if valid_571215 != nil:
    section.add "subscriptionId", valid_571215
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571216 = query.getOrDefault("api-version")
  valid_571216 = validateParameter(valid_571216, JString, required = true,
                                 default = nil)
  if valid_571216 != nil:
    section.add "api-version", valid_571216
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571217: Call_WebAppsListSyncFunctionTriggersSlot_571209;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## This is to allow calling via powershell and ARM template.
  ## 
  let valid = call_571217.validator(path, query, header, formData, body)
  let scheme = call_571217.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571217.url(scheme.get, call_571217.host, call_571217.base,
                         call_571217.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571217, url, valid)

proc call*(call_571218: Call_WebAppsListSyncFunctionTriggersSlot_571209;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSyncFunctionTriggersSlot
  ## This is to allow calling via powershell and ARM template.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571219 = newJObject()
  var query_571220 = newJObject()
  add(path_571219, "resourceGroupName", newJString(resourceGroupName))
  add(query_571220, "api-version", newJString(apiVersion))
  add(path_571219, "name", newJString(name))
  add(path_571219, "slot", newJString(slot))
  add(path_571219, "subscriptionId", newJString(subscriptionId))
  result = call_571218.call(path_571219, query_571220, nil, nil, nil)

var webAppsListSyncFunctionTriggersSlot* = Call_WebAppsListSyncFunctionTriggersSlot_571209(
    name: "webAppsListSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus",
    validator: validate_WebAppsListSyncFunctionTriggersSlot_571210, base: "",
    url: url_WebAppsListSyncFunctionTriggersSlot_571211, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricDefinitionsSlot_571221 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetricDefinitionsSlot_571223(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metricdefinitions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricDefinitionsSlot_571222(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571224 = path.getOrDefault("resourceGroupName")
  valid_571224 = validateParameter(valid_571224, JString, required = true,
                                 default = nil)
  if valid_571224 != nil:
    section.add "resourceGroupName", valid_571224
  var valid_571225 = path.getOrDefault("name")
  valid_571225 = validateParameter(valid_571225, JString, required = true,
                                 default = nil)
  if valid_571225 != nil:
    section.add "name", valid_571225
  var valid_571226 = path.getOrDefault("slot")
  valid_571226 = validateParameter(valid_571226, JString, required = true,
                                 default = nil)
  if valid_571226 != nil:
    section.add "slot", valid_571226
  var valid_571227 = path.getOrDefault("subscriptionId")
  valid_571227 = validateParameter(valid_571227, JString, required = true,
                                 default = nil)
  if valid_571227 != nil:
    section.add "subscriptionId", valid_571227
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571228 = query.getOrDefault("api-version")
  valid_571228 = validateParameter(valid_571228, JString, required = true,
                                 default = nil)
  if valid_571228 != nil:
    section.add "api-version", valid_571228
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571229: Call_WebAppsListMetricDefinitionsSlot_571221;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ## 
  let valid = call_571229.validator(path, query, header, formData, body)
  let scheme = call_571229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571229.url(scheme.get, call_571229.host, call_571229.base,
                         call_571229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571229, url, valid)

proc call*(call_571230: Call_WebAppsListMetricDefinitionsSlot_571221;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListMetricDefinitionsSlot
  ## Gets all metric definitions of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metric definitions of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571231 = newJObject()
  var query_571232 = newJObject()
  add(path_571231, "resourceGroupName", newJString(resourceGroupName))
  add(query_571232, "api-version", newJString(apiVersion))
  add(path_571231, "name", newJString(name))
  add(path_571231, "slot", newJString(slot))
  add(path_571231, "subscriptionId", newJString(subscriptionId))
  result = call_571230.call(path_571231, query_571232, nil, nil, nil)

var webAppsListMetricDefinitionsSlot* = Call_WebAppsListMetricDefinitionsSlot_571221(
    name: "webAppsListMetricDefinitionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
    validator: validate_WebAppsListMetricDefinitionsSlot_571222, base: "",
    url: url_WebAppsListMetricDefinitionsSlot_571223, schemes: {Scheme.Https})
type
  Call_WebAppsListMetricsSlot_571233 = ref object of OpenApiRestCall_567666
proc url_WebAppsListMetricsSlot_571235(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/metrics")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListMetricsSlot_571234(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571236 = path.getOrDefault("resourceGroupName")
  valid_571236 = validateParameter(valid_571236, JString, required = true,
                                 default = nil)
  if valid_571236 != nil:
    section.add "resourceGroupName", valid_571236
  var valid_571237 = path.getOrDefault("name")
  valid_571237 = validateParameter(valid_571237, JString, required = true,
                                 default = nil)
  if valid_571237 != nil:
    section.add "name", valid_571237
  var valid_571238 = path.getOrDefault("slot")
  valid_571238 = validateParameter(valid_571238, JString, required = true,
                                 default = nil)
  if valid_571238 != nil:
    section.add "slot", valid_571238
  var valid_571239 = path.getOrDefault("subscriptionId")
  valid_571239 = validateParameter(valid_571239, JString, required = true,
                                 default = nil)
  if valid_571239 != nil:
    section.add "subscriptionId", valid_571239
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   details: JBool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   $filter: JString
  ##          : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571240 = query.getOrDefault("api-version")
  valid_571240 = validateParameter(valid_571240, JString, required = true,
                                 default = nil)
  if valid_571240 != nil:
    section.add "api-version", valid_571240
  var valid_571241 = query.getOrDefault("details")
  valid_571241 = validateParameter(valid_571241, JBool, required = false, default = nil)
  if valid_571241 != nil:
    section.add "details", valid_571241
  var valid_571242 = query.getOrDefault("$filter")
  valid_571242 = validateParameter(valid_571242, JString, required = false,
                                 default = nil)
  if valid_571242 != nil:
    section.add "$filter", valid_571242
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571243: Call_WebAppsListMetricsSlot_571233; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ## 
  let valid = call_571243.validator(path, query, header, formData, body)
  let scheme = call_571243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571243.url(scheme.get, call_571243.host, call_571243.base,
                         call_571243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571243, url, valid)

proc call*(call_571244: Call_WebAppsListMetricsSlot_571233;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; details: bool = false; Filter: string = ""): Recallable =
  ## webAppsListMetricsSlot
  ## Gets performance metrics of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   details: bool
  ##          : Specify "true" to include metric details in the response. It is "false" by default.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get metrics of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only metrics specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_571245 = newJObject()
  var query_571246 = newJObject()
  add(path_571245, "resourceGroupName", newJString(resourceGroupName))
  add(query_571246, "api-version", newJString(apiVersion))
  add(path_571245, "name", newJString(name))
  add(query_571246, "details", newJBool(details))
  add(path_571245, "slot", newJString(slot))
  add(path_571245, "subscriptionId", newJString(subscriptionId))
  add(query_571246, "$filter", newJString(Filter))
  result = call_571244.call(path_571245, query_571246, nil, nil, nil)

var webAppsListMetricsSlot* = Call_WebAppsListMetricsSlot_571233(
    name: "webAppsListMetricsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics",
    validator: validate_WebAppsListMetricsSlot_571234, base: "",
    url: url_WebAppsListMetricsSlot_571235, schemes: {Scheme.Https})
type
  Call_WebAppsGetMigrateMySqlStatusSlot_571247 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetMigrateMySqlStatusSlot_571249(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/migratemysql/status")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetMigrateMySqlStatusSlot_571248(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571250 = path.getOrDefault("resourceGroupName")
  valid_571250 = validateParameter(valid_571250, JString, required = true,
                                 default = nil)
  if valid_571250 != nil:
    section.add "resourceGroupName", valid_571250
  var valid_571251 = path.getOrDefault("name")
  valid_571251 = validateParameter(valid_571251, JString, required = true,
                                 default = nil)
  if valid_571251 != nil:
    section.add "name", valid_571251
  var valid_571252 = path.getOrDefault("slot")
  valid_571252 = validateParameter(valid_571252, JString, required = true,
                                 default = nil)
  if valid_571252 != nil:
    section.add "slot", valid_571252
  var valid_571253 = path.getOrDefault("subscriptionId")
  valid_571253 = validateParameter(valid_571253, JString, required = true,
                                 default = nil)
  if valid_571253 != nil:
    section.add "subscriptionId", valid_571253
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571254 = query.getOrDefault("api-version")
  valid_571254 = validateParameter(valid_571254, JString, required = true,
                                 default = nil)
  if valid_571254 != nil:
    section.add "api-version", valid_571254
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571255: Call_WebAppsGetMigrateMySqlStatusSlot_571247;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ## 
  let valid = call_571255.validator(path, query, header, formData, body)
  let scheme = call_571255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571255.url(scheme.get, call_571255.host, call_571255.base,
                         call_571255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571255, url, valid)

proc call*(call_571256: Call_WebAppsGetMigrateMySqlStatusSlot_571247;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetMigrateMySqlStatusSlot
  ## Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of the deployment slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571257 = newJObject()
  var query_571258 = newJObject()
  add(path_571257, "resourceGroupName", newJString(resourceGroupName))
  add(query_571258, "api-version", newJString(apiVersion))
  add(path_571257, "name", newJString(name))
  add(path_571257, "slot", newJString(slot))
  add(path_571257, "subscriptionId", newJString(subscriptionId))
  result = call_571256.call(path_571257, query_571258, nil, nil, nil)

var webAppsGetMigrateMySqlStatusSlot* = Call_WebAppsGetMigrateMySqlStatusSlot_571247(
    name: "webAppsGetMigrateMySqlStatusSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status",
    validator: validate_WebAppsGetMigrateMySqlStatusSlot_571248, base: "",
    url: url_WebAppsGetMigrateMySqlStatusSlot_571249, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_571271 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_571273(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_571272(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571274 = path.getOrDefault("resourceGroupName")
  valid_571274 = validateParameter(valid_571274, JString, required = true,
                                 default = nil)
  if valid_571274 != nil:
    section.add "resourceGroupName", valid_571274
  var valid_571275 = path.getOrDefault("name")
  valid_571275 = validateParameter(valid_571275, JString, required = true,
                                 default = nil)
  if valid_571275 != nil:
    section.add "name", valid_571275
  var valid_571276 = path.getOrDefault("slot")
  valid_571276 = validateParameter(valid_571276, JString, required = true,
                                 default = nil)
  if valid_571276 != nil:
    section.add "slot", valid_571276
  var valid_571277 = path.getOrDefault("subscriptionId")
  valid_571277 = validateParameter(valid_571277, JString, required = true,
                                 default = nil)
  if valid_571277 != nil:
    section.add "subscriptionId", valid_571277
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571278 = query.getOrDefault("api-version")
  valid_571278 = validateParameter(valid_571278, JString, required = true,
                                 default = nil)
  if valid_571278 != nil:
    section.add "api-version", valid_571278
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571280: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_571271;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_571280.validator(path, query, header, formData, body)
  let scheme = call_571280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571280.url(scheme.get, call_571280.host, call_571280.base,
                         call_571280.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571280, url, valid)

proc call*(call_571281: Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_571271;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571282 = newJObject()
  var query_571283 = newJObject()
  var body_571284 = newJObject()
  add(path_571282, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571284 = connectionEnvelope
  add(path_571282, "name", newJString(name))
  add(query_571283, "api-version", newJString(apiVersion))
  add(path_571282, "slot", newJString(slot))
  add(path_571282, "subscriptionId", newJString(subscriptionId))
  result = call_571281.call(path_571282, query_571283, nil, nil, body_571284)

var webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot* = Call_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_571271(
    name: "webAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_571272,
    base: "", url: url_WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlot_571273,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_571259 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSwiftVirtualNetworkConnectionSlot_571261(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSwiftVirtualNetworkConnectionSlot_571260(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a Swift Virtual Network connection.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571262 = path.getOrDefault("resourceGroupName")
  valid_571262 = validateParameter(valid_571262, JString, required = true,
                                 default = nil)
  if valid_571262 != nil:
    section.add "resourceGroupName", valid_571262
  var valid_571263 = path.getOrDefault("name")
  valid_571263 = validateParameter(valid_571263, JString, required = true,
                                 default = nil)
  if valid_571263 != nil:
    section.add "name", valid_571263
  var valid_571264 = path.getOrDefault("slot")
  valid_571264 = validateParameter(valid_571264, JString, required = true,
                                 default = nil)
  if valid_571264 != nil:
    section.add "slot", valid_571264
  var valid_571265 = path.getOrDefault("subscriptionId")
  valid_571265 = validateParameter(valid_571265, JString, required = true,
                                 default = nil)
  if valid_571265 != nil:
    section.add "subscriptionId", valid_571265
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571266 = query.getOrDefault("api-version")
  valid_571266 = validateParameter(valid_571266, JString, required = true,
                                 default = nil)
  if valid_571266 != nil:
    section.add "api-version", valid_571266
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571267: Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_571259;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a Swift Virtual Network connection.
  ## 
  let valid = call_571267.validator(path, query, header, formData, body)
  let scheme = call_571267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571267.url(scheme.get, call_571267.host, call_571267.base,
                         call_571267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571267, url, valid)

proc call*(call_571268: Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_571259;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSwiftVirtualNetworkConnectionSlot
  ## Gets a Swift Virtual Network connection.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571269 = newJObject()
  var query_571270 = newJObject()
  add(path_571269, "resourceGroupName", newJString(resourceGroupName))
  add(query_571270, "api-version", newJString(apiVersion))
  add(path_571269, "name", newJString(name))
  add(path_571269, "slot", newJString(slot))
  add(path_571269, "subscriptionId", newJString(subscriptionId))
  result = call_571268.call(path_571269, query_571270, nil, nil, nil)

var webAppsGetSwiftVirtualNetworkConnectionSlot* = Call_WebAppsGetSwiftVirtualNetworkConnectionSlot_571259(
    name: "webAppsGetSwiftVirtualNetworkConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsGetSwiftVirtualNetworkConnectionSlot_571260,
    base: "", url: url_WebAppsGetSwiftVirtualNetworkConnectionSlot_571261,
    schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_571297 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_571299(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_571298(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571300 = path.getOrDefault("resourceGroupName")
  valid_571300 = validateParameter(valid_571300, JString, required = true,
                                 default = nil)
  if valid_571300 != nil:
    section.add "resourceGroupName", valid_571300
  var valid_571301 = path.getOrDefault("name")
  valid_571301 = validateParameter(valid_571301, JString, required = true,
                                 default = nil)
  if valid_571301 != nil:
    section.add "name", valid_571301
  var valid_571302 = path.getOrDefault("slot")
  valid_571302 = validateParameter(valid_571302, JString, required = true,
                                 default = nil)
  if valid_571302 != nil:
    section.add "slot", valid_571302
  var valid_571303 = path.getOrDefault("subscriptionId")
  valid_571303 = validateParameter(valid_571303, JString, required = true,
                                 default = nil)
  if valid_571303 != nil:
    section.add "subscriptionId", valid_571303
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571304 = query.getOrDefault("api-version")
  valid_571304 = validateParameter(valid_571304, JString, required = true,
                                 default = nil)
  if valid_571304 != nil:
    section.add "api-version", valid_571304
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571306: Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_571297;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ## 
  let valid = call_571306.validator(path, query, header, formData, body)
  let scheme = call_571306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571306.url(scheme.get, call_571306.host, call_571306.base,
                         call_571306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571306, url, valid)

proc call*(call_571307: Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_571297;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateSwiftVirtualNetworkConnectionSlot
  ## Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
  ## in use by another App Service Plan other than the one this App is in.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571308 = newJObject()
  var query_571309 = newJObject()
  var body_571310 = newJObject()
  add(path_571308, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_571310 = connectionEnvelope
  add(path_571308, "name", newJString(name))
  add(query_571309, "api-version", newJString(apiVersion))
  add(path_571308, "slot", newJString(slot))
  add(path_571308, "subscriptionId", newJString(subscriptionId))
  result = call_571307.call(path_571308, query_571309, nil, nil, body_571310)

var webAppsUpdateSwiftVirtualNetworkConnectionSlot* = Call_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_571297(
    name: "webAppsUpdateSwiftVirtualNetworkConnectionSlot",
    meth: HttpMethod.HttpPatch, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_571298,
    base: "", url: url_WebAppsUpdateSwiftVirtualNetworkConnectionSlot_571299,
    schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSwiftVirtualNetworkSlot_571285 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSwiftVirtualNetworkSlot_571287(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkConfig/virtualNetwork")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSwiftVirtualNetworkSlot_571286(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571288 = path.getOrDefault("resourceGroupName")
  valid_571288 = validateParameter(valid_571288, JString, required = true,
                                 default = nil)
  if valid_571288 != nil:
    section.add "resourceGroupName", valid_571288
  var valid_571289 = path.getOrDefault("name")
  valid_571289 = validateParameter(valid_571289, JString, required = true,
                                 default = nil)
  if valid_571289 != nil:
    section.add "name", valid_571289
  var valid_571290 = path.getOrDefault("slot")
  valid_571290 = validateParameter(valid_571290, JString, required = true,
                                 default = nil)
  if valid_571290 != nil:
    section.add "slot", valid_571290
  var valid_571291 = path.getOrDefault("subscriptionId")
  valid_571291 = validateParameter(valid_571291, JString, required = true,
                                 default = nil)
  if valid_571291 != nil:
    section.add "subscriptionId", valid_571291
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571292 = query.getOrDefault("api-version")
  valid_571292 = validateParameter(valid_571292, JString, required = true,
                                 default = nil)
  if valid_571292 != nil:
    section.add "api-version", valid_571292
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571293: Call_WebAppsDeleteSwiftVirtualNetworkSlot_571285;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ## 
  let valid = call_571293.validator(path, query, header, formData, body)
  let scheme = call_571293.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571293.url(scheme.get, call_571293.host, call_571293.base,
                         call_571293.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571293, url, valid)

proc call*(call_571294: Call_WebAppsDeleteSwiftVirtualNetworkSlot_571285;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSwiftVirtualNetworkSlot
  ## Deletes a Swift Virtual Network connection from an app (or deployment slot).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571295 = newJObject()
  var query_571296 = newJObject()
  add(path_571295, "resourceGroupName", newJString(resourceGroupName))
  add(query_571296, "api-version", newJString(apiVersion))
  add(path_571295, "name", newJString(name))
  add(path_571295, "slot", newJString(slot))
  add(path_571295, "subscriptionId", newJString(subscriptionId))
  result = call_571294.call(path_571295, query_571296, nil, nil, nil)

var webAppsDeleteSwiftVirtualNetworkSlot* = Call_WebAppsDeleteSwiftVirtualNetworkSlot_571285(
    name: "webAppsDeleteSwiftVirtualNetworkSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    validator: validate_WebAppsDeleteSwiftVirtualNetworkSlot_571286, base: "",
    url: url_WebAppsDeleteSwiftVirtualNetworkSlot_571287, schemes: {Scheme.Https})
type
  Call_WebAppsListNetworkFeaturesSlot_571311 = ref object of OpenApiRestCall_567666
proc url_WebAppsListNetworkFeaturesSlot_571313(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "view" in path, "`view` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkFeatures/"),
               (kind: VariableSegment, value: "view")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListNetworkFeaturesSlot_571312(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: JString (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571314 = path.getOrDefault("resourceGroupName")
  valid_571314 = validateParameter(valid_571314, JString, required = true,
                                 default = nil)
  if valid_571314 != nil:
    section.add "resourceGroupName", valid_571314
  var valid_571315 = path.getOrDefault("name")
  valid_571315 = validateParameter(valid_571315, JString, required = true,
                                 default = nil)
  if valid_571315 != nil:
    section.add "name", valid_571315
  var valid_571316 = path.getOrDefault("slot")
  valid_571316 = validateParameter(valid_571316, JString, required = true,
                                 default = nil)
  if valid_571316 != nil:
    section.add "slot", valid_571316
  var valid_571317 = path.getOrDefault("subscriptionId")
  valid_571317 = validateParameter(valid_571317, JString, required = true,
                                 default = nil)
  if valid_571317 != nil:
    section.add "subscriptionId", valid_571317
  var valid_571318 = path.getOrDefault("view")
  valid_571318 = validateParameter(valid_571318, JString, required = true,
                                 default = nil)
  if valid_571318 != nil:
    section.add "view", valid_571318
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571319 = query.getOrDefault("api-version")
  valid_571319 = validateParameter(valid_571319, JString, required = true,
                                 default = nil)
  if valid_571319 != nil:
    section.add "api-version", valid_571319
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571320: Call_WebAppsListNetworkFeaturesSlot_571311; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets all network features used by the app (or deployment slot, if specified).
  ## 
  let valid = call_571320.validator(path, query, header, formData, body)
  let scheme = call_571320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571320.url(scheme.get, call_571320.host, call_571320.base,
                         call_571320.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571320, url, valid)

proc call*(call_571321: Call_WebAppsListNetworkFeaturesSlot_571311;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; view: string): Recallable =
  ## webAppsListNetworkFeaturesSlot
  ## Gets all network features used by the app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   view: string (required)
  ##       : The type of view. This can either be "summary" or "detailed".
  var path_571322 = newJObject()
  var query_571323 = newJObject()
  add(path_571322, "resourceGroupName", newJString(resourceGroupName))
  add(query_571323, "api-version", newJString(apiVersion))
  add(path_571322, "name", newJString(name))
  add(path_571322, "slot", newJString(slot))
  add(path_571322, "subscriptionId", newJString(subscriptionId))
  add(path_571322, "view", newJString(view))
  result = call_571321.call(path_571322, query_571323, nil, nil, nil)

var webAppsListNetworkFeaturesSlot* = Call_WebAppsListNetworkFeaturesSlot_571311(
    name: "webAppsListNetworkFeaturesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
    validator: validate_WebAppsListNetworkFeaturesSlot_571312, base: "",
    url: url_WebAppsListNetworkFeaturesSlot_571313, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperationSlot_571324 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetNetworkTraceOperationSlot_571326(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/networkTrace/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperationSlot_571325(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571327 = path.getOrDefault("resourceGroupName")
  valid_571327 = validateParameter(valid_571327, JString, required = true,
                                 default = nil)
  if valid_571327 != nil:
    section.add "resourceGroupName", valid_571327
  var valid_571328 = path.getOrDefault("name")
  valid_571328 = validateParameter(valid_571328, JString, required = true,
                                 default = nil)
  if valid_571328 != nil:
    section.add "name", valid_571328
  var valid_571329 = path.getOrDefault("slot")
  valid_571329 = validateParameter(valid_571329, JString, required = true,
                                 default = nil)
  if valid_571329 != nil:
    section.add "slot", valid_571329
  var valid_571330 = path.getOrDefault("subscriptionId")
  valid_571330 = validateParameter(valid_571330, JString, required = true,
                                 default = nil)
  if valid_571330 != nil:
    section.add "subscriptionId", valid_571330
  var valid_571331 = path.getOrDefault("operationId")
  valid_571331 = validateParameter(valid_571331, JString, required = true,
                                 default = nil)
  if valid_571331 != nil:
    section.add "operationId", valid_571331
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571332 = query.getOrDefault("api-version")
  valid_571332 = validateParameter(valid_571332, JString, required = true,
                                 default = nil)
  if valid_571332 != nil:
    section.add "api-version", valid_571332
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571333: Call_WebAppsGetNetworkTraceOperationSlot_571324;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_571333.validator(path, query, header, formData, body)
  let scheme = call_571333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571333.url(scheme.get, call_571333.host, call_571333.base,
                         call_571333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571333, url, valid)

proc call*(call_571334: Call_WebAppsGetNetworkTraceOperationSlot_571324;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTraceOperationSlot
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_571335 = newJObject()
  var query_571336 = newJObject()
  add(path_571335, "resourceGroupName", newJString(resourceGroupName))
  add(query_571336, "api-version", newJString(apiVersion))
  add(path_571335, "name", newJString(name))
  add(path_571335, "slot", newJString(slot))
  add(path_571335, "subscriptionId", newJString(subscriptionId))
  add(path_571335, "operationId", newJString(operationId))
  result = call_571334.call(path_571335, query_571336, nil, nil, nil)

var webAppsGetNetworkTraceOperationSlot* = Call_WebAppsGetNetworkTraceOperationSlot_571324(
    name: "webAppsGetNetworkTraceOperationSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperationSlot_571325, base: "",
    url: url_WebAppsGetNetworkTraceOperationSlot_571326, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceSlot_571337 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartWebSiteNetworkTraceSlot_571339(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceSlot_571338(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571340 = path.getOrDefault("resourceGroupName")
  valid_571340 = validateParameter(valid_571340, JString, required = true,
                                 default = nil)
  if valid_571340 != nil:
    section.add "resourceGroupName", valid_571340
  var valid_571341 = path.getOrDefault("name")
  valid_571341 = validateParameter(valid_571341, JString, required = true,
                                 default = nil)
  if valid_571341 != nil:
    section.add "name", valid_571341
  var valid_571342 = path.getOrDefault("slot")
  valid_571342 = validateParameter(valid_571342, JString, required = true,
                                 default = nil)
  if valid_571342 != nil:
    section.add "slot", valid_571342
  var valid_571343 = path.getOrDefault("subscriptionId")
  valid_571343 = validateParameter(valid_571343, JString, required = true,
                                 default = nil)
  if valid_571343 != nil:
    section.add "subscriptionId", valid_571343
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571344 = query.getOrDefault("api-version")
  valid_571344 = validateParameter(valid_571344, JString, required = true,
                                 default = nil)
  if valid_571344 != nil:
    section.add "api-version", valid_571344
  var valid_571345 = query.getOrDefault("durationInSeconds")
  valid_571345 = validateParameter(valid_571345, JInt, required = false, default = nil)
  if valid_571345 != nil:
    section.add "durationInSeconds", valid_571345
  var valid_571346 = query.getOrDefault("maxFrameLength")
  valid_571346 = validateParameter(valid_571346, JInt, required = false, default = nil)
  if valid_571346 != nil:
    section.add "maxFrameLength", valid_571346
  var valid_571347 = query.getOrDefault("sasUrl")
  valid_571347 = validateParameter(valid_571347, JString, required = false,
                                 default = nil)
  if valid_571347 != nil:
    section.add "sasUrl", valid_571347
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571348: Call_WebAppsStartWebSiteNetworkTraceSlot_571337;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site (To be deprecated).
  ## 
  let valid = call_571348.validator(path, query, header, formData, body)
  let scheme = call_571348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571348.url(scheme.get, call_571348.host, call_571348.base,
                         call_571348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571348, url, valid)

proc call*(call_571349: Call_WebAppsStartWebSiteNetworkTraceSlot_571337;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTraceSlot
  ## Start capturing network packets for the site (To be deprecated).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_571350 = newJObject()
  var query_571351 = newJObject()
  add(path_571350, "resourceGroupName", newJString(resourceGroupName))
  add(query_571351, "api-version", newJString(apiVersion))
  add(path_571350, "name", newJString(name))
  add(path_571350, "slot", newJString(slot))
  add(path_571350, "subscriptionId", newJString(subscriptionId))
  add(query_571351, "durationInSeconds", newJInt(durationInSeconds))
  add(query_571351, "maxFrameLength", newJInt(maxFrameLength))
  add(query_571351, "sasUrl", newJString(sasUrl))
  result = call_571349.call(path_571350, query_571351, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceSlot* = Call_WebAppsStartWebSiteNetworkTraceSlot_571337(
    name: "webAppsStartWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start",
    validator: validate_WebAppsStartWebSiteNetworkTraceSlot_571338, base: "",
    url: url_WebAppsStartWebSiteNetworkTraceSlot_571339, schemes: {Scheme.Https})
type
  Call_WebAppsStartWebSiteNetworkTraceOperationSlot_571352 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartWebSiteNetworkTraceOperationSlot_571354(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/startOperation")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartWebSiteNetworkTraceOperationSlot_571353(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571355 = path.getOrDefault("resourceGroupName")
  valid_571355 = validateParameter(valid_571355, JString, required = true,
                                 default = nil)
  if valid_571355 != nil:
    section.add "resourceGroupName", valid_571355
  var valid_571356 = path.getOrDefault("name")
  valid_571356 = validateParameter(valid_571356, JString, required = true,
                                 default = nil)
  if valid_571356 != nil:
    section.add "name", valid_571356
  var valid_571357 = path.getOrDefault("slot")
  valid_571357 = validateParameter(valid_571357, JString, required = true,
                                 default = nil)
  if valid_571357 != nil:
    section.add "slot", valid_571357
  var valid_571358 = path.getOrDefault("subscriptionId")
  valid_571358 = validateParameter(valid_571358, JString, required = true,
                                 default = nil)
  if valid_571358 != nil:
    section.add "subscriptionId", valid_571358
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571359 = query.getOrDefault("api-version")
  valid_571359 = validateParameter(valid_571359, JString, required = true,
                                 default = nil)
  if valid_571359 != nil:
    section.add "api-version", valid_571359
  var valid_571360 = query.getOrDefault("durationInSeconds")
  valid_571360 = validateParameter(valid_571360, JInt, required = false, default = nil)
  if valid_571360 != nil:
    section.add "durationInSeconds", valid_571360
  var valid_571361 = query.getOrDefault("maxFrameLength")
  valid_571361 = validateParameter(valid_571361, JInt, required = false, default = nil)
  if valid_571361 != nil:
    section.add "maxFrameLength", valid_571361
  var valid_571362 = query.getOrDefault("sasUrl")
  valid_571362 = validateParameter(valid_571362, JString, required = false,
                                 default = nil)
  if valid_571362 != nil:
    section.add "sasUrl", valid_571362
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571363: Call_WebAppsStartWebSiteNetworkTraceOperationSlot_571352;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_571363.validator(path, query, header, formData, body)
  let scheme = call_571363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571363.url(scheme.get, call_571363.host, call_571363.base,
                         call_571363.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571363, url, valid)

proc call*(call_571364: Call_WebAppsStartWebSiteNetworkTraceOperationSlot_571352;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartWebSiteNetworkTraceOperationSlot
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_571365 = newJObject()
  var query_571366 = newJObject()
  add(path_571365, "resourceGroupName", newJString(resourceGroupName))
  add(query_571366, "api-version", newJString(apiVersion))
  add(path_571365, "name", newJString(name))
  add(path_571365, "slot", newJString(slot))
  add(path_571365, "subscriptionId", newJString(subscriptionId))
  add(query_571366, "durationInSeconds", newJInt(durationInSeconds))
  add(query_571366, "maxFrameLength", newJInt(maxFrameLength))
  add(query_571366, "sasUrl", newJString(sasUrl))
  result = call_571364.call(path_571365, query_571366, nil, nil, nil)

var webAppsStartWebSiteNetworkTraceOperationSlot* = Call_WebAppsStartWebSiteNetworkTraceOperationSlot_571352(
    name: "webAppsStartWebSiteNetworkTraceOperationSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation",
    validator: validate_WebAppsStartWebSiteNetworkTraceOperationSlot_571353,
    base: "", url: url_WebAppsStartWebSiteNetworkTraceOperationSlot_571354,
    schemes: {Scheme.Https})
type
  Call_WebAppsStopWebSiteNetworkTraceSlot_571367 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopWebSiteNetworkTraceSlot_571369(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopWebSiteNetworkTraceSlot_571368(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571370 = path.getOrDefault("resourceGroupName")
  valid_571370 = validateParameter(valid_571370, JString, required = true,
                                 default = nil)
  if valid_571370 != nil:
    section.add "resourceGroupName", valid_571370
  var valid_571371 = path.getOrDefault("name")
  valid_571371 = validateParameter(valid_571371, JString, required = true,
                                 default = nil)
  if valid_571371 != nil:
    section.add "name", valid_571371
  var valid_571372 = path.getOrDefault("slot")
  valid_571372 = validateParameter(valid_571372, JString, required = true,
                                 default = nil)
  if valid_571372 != nil:
    section.add "slot", valid_571372
  var valid_571373 = path.getOrDefault("subscriptionId")
  valid_571373 = validateParameter(valid_571373, JString, required = true,
                                 default = nil)
  if valid_571373 != nil:
    section.add "subscriptionId", valid_571373
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571374 = query.getOrDefault("api-version")
  valid_571374 = validateParameter(valid_571374, JString, required = true,
                                 default = nil)
  if valid_571374 != nil:
    section.add "api-version", valid_571374
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571375: Call_WebAppsStopWebSiteNetworkTraceSlot_571367;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_571375.validator(path, query, header, formData, body)
  let scheme = call_571375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571375.url(scheme.get, call_571375.host, call_571375.base,
                         call_571375.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571375, url, valid)

proc call*(call_571376: Call_WebAppsStopWebSiteNetworkTraceSlot_571367;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsStopWebSiteNetworkTraceSlot
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571377 = newJObject()
  var query_571378 = newJObject()
  add(path_571377, "resourceGroupName", newJString(resourceGroupName))
  add(query_571378, "api-version", newJString(apiVersion))
  add(path_571377, "name", newJString(name))
  add(path_571377, "slot", newJString(slot))
  add(path_571377, "subscriptionId", newJString(subscriptionId))
  result = call_571376.call(path_571377, query_571378, nil, nil, nil)

var webAppsStopWebSiteNetworkTraceSlot* = Call_WebAppsStopWebSiteNetworkTraceSlot_571367(
    name: "webAppsStopWebSiteNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop",
    validator: validate_WebAppsStopWebSiteNetworkTraceSlot_571368, base: "",
    url: url_WebAppsStopWebSiteNetworkTraceSlot_571369, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTracesSlot_571379 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetNetworkTracesSlot_571381(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTrace/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTracesSlot_571380(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571382 = path.getOrDefault("resourceGroupName")
  valid_571382 = validateParameter(valid_571382, JString, required = true,
                                 default = nil)
  if valid_571382 != nil:
    section.add "resourceGroupName", valid_571382
  var valid_571383 = path.getOrDefault("name")
  valid_571383 = validateParameter(valid_571383, JString, required = true,
                                 default = nil)
  if valid_571383 != nil:
    section.add "name", valid_571383
  var valid_571384 = path.getOrDefault("slot")
  valid_571384 = validateParameter(valid_571384, JString, required = true,
                                 default = nil)
  if valid_571384 != nil:
    section.add "slot", valid_571384
  var valid_571385 = path.getOrDefault("subscriptionId")
  valid_571385 = validateParameter(valid_571385, JString, required = true,
                                 default = nil)
  if valid_571385 != nil:
    section.add "subscriptionId", valid_571385
  var valid_571386 = path.getOrDefault("operationId")
  valid_571386 = validateParameter(valid_571386, JString, required = true,
                                 default = nil)
  if valid_571386 != nil:
    section.add "operationId", valid_571386
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571387 = query.getOrDefault("api-version")
  valid_571387 = validateParameter(valid_571387, JString, required = true,
                                 default = nil)
  if valid_571387 != nil:
    section.add "api-version", valid_571387
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571388: Call_WebAppsGetNetworkTracesSlot_571379; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_571388.validator(path, query, header, formData, body)
  let scheme = call_571388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571388.url(scheme.get, call_571388.host, call_571388.base,
                         call_571388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571388, url, valid)

proc call*(call_571389: Call_WebAppsGetNetworkTracesSlot_571379;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTracesSlot
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_571390 = newJObject()
  var query_571391 = newJObject()
  add(path_571390, "resourceGroupName", newJString(resourceGroupName))
  add(query_571391, "api-version", newJString(apiVersion))
  add(path_571390, "name", newJString(name))
  add(path_571390, "slot", newJString(slot))
  add(path_571390, "subscriptionId", newJString(subscriptionId))
  add(path_571390, "operationId", newJString(operationId))
  result = call_571389.call(path_571390, query_571391, nil, nil, nil)

var webAppsGetNetworkTracesSlot* = Call_WebAppsGetNetworkTracesSlot_571379(
    name: "webAppsGetNetworkTracesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}",
    validator: validate_WebAppsGetNetworkTracesSlot_571380, base: "",
    url: url_WebAppsGetNetworkTracesSlot_571381, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTraceOperationSlotV2_571392 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetNetworkTraceOperationSlotV2_571394(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"), (kind: ConstantSegment,
        value: "/networkTraces/current/operationresults/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTraceOperationSlotV2_571393(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571395 = path.getOrDefault("resourceGroupName")
  valid_571395 = validateParameter(valid_571395, JString, required = true,
                                 default = nil)
  if valid_571395 != nil:
    section.add "resourceGroupName", valid_571395
  var valid_571396 = path.getOrDefault("name")
  valid_571396 = validateParameter(valid_571396, JString, required = true,
                                 default = nil)
  if valid_571396 != nil:
    section.add "name", valid_571396
  var valid_571397 = path.getOrDefault("slot")
  valid_571397 = validateParameter(valid_571397, JString, required = true,
                                 default = nil)
  if valid_571397 != nil:
    section.add "slot", valid_571397
  var valid_571398 = path.getOrDefault("subscriptionId")
  valid_571398 = validateParameter(valid_571398, JString, required = true,
                                 default = nil)
  if valid_571398 != nil:
    section.add "subscriptionId", valid_571398
  var valid_571399 = path.getOrDefault("operationId")
  valid_571399 = validateParameter(valid_571399, JString, required = true,
                                 default = nil)
  if valid_571399 != nil:
    section.add "operationId", valid_571399
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571400 = query.getOrDefault("api-version")
  valid_571400 = validateParameter(valid_571400, JString, required = true,
                                 default = nil)
  if valid_571400 != nil:
    section.add "api-version", valid_571400
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571401: Call_WebAppsGetNetworkTraceOperationSlotV2_571392;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_571401.validator(path, query, header, formData, body)
  let scheme = call_571401.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571401.url(scheme.get, call_571401.host, call_571401.base,
                         call_571401.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571401, url, valid)

proc call*(call_571402: Call_WebAppsGetNetworkTraceOperationSlotV2_571392;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTraceOperationSlotV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_571403 = newJObject()
  var query_571404 = newJObject()
  add(path_571403, "resourceGroupName", newJString(resourceGroupName))
  add(query_571404, "api-version", newJString(apiVersion))
  add(path_571403, "name", newJString(name))
  add(path_571403, "slot", newJString(slot))
  add(path_571403, "subscriptionId", newJString(subscriptionId))
  add(path_571403, "operationId", newJString(operationId))
  result = call_571402.call(path_571403, query_571404, nil, nil, nil)

var webAppsGetNetworkTraceOperationSlotV2* = Call_WebAppsGetNetworkTraceOperationSlotV2_571392(
    name: "webAppsGetNetworkTraceOperationSlotV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}",
    validator: validate_WebAppsGetNetworkTraceOperationSlotV2_571393, base: "",
    url: url_WebAppsGetNetworkTraceOperationSlotV2_571394, schemes: {Scheme.Https})
type
  Call_WebAppsGetNetworkTracesSlotV2_571405 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetNetworkTracesSlotV2_571407(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "operationId" in path, "`operationId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/networkTraces/"),
               (kind: VariableSegment, value: "operationId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetNetworkTracesSlotV2_571406(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: JString (required)
  ##              : GUID of the operation.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571408 = path.getOrDefault("resourceGroupName")
  valid_571408 = validateParameter(valid_571408, JString, required = true,
                                 default = nil)
  if valid_571408 != nil:
    section.add "resourceGroupName", valid_571408
  var valid_571409 = path.getOrDefault("name")
  valid_571409 = validateParameter(valid_571409, JString, required = true,
                                 default = nil)
  if valid_571409 != nil:
    section.add "name", valid_571409
  var valid_571410 = path.getOrDefault("slot")
  valid_571410 = validateParameter(valid_571410, JString, required = true,
                                 default = nil)
  if valid_571410 != nil:
    section.add "slot", valid_571410
  var valid_571411 = path.getOrDefault("subscriptionId")
  valid_571411 = validateParameter(valid_571411, JString, required = true,
                                 default = nil)
  if valid_571411 != nil:
    section.add "subscriptionId", valid_571411
  var valid_571412 = path.getOrDefault("operationId")
  valid_571412 = validateParameter(valid_571412, JString, required = true,
                                 default = nil)
  if valid_571412 != nil:
    section.add "operationId", valid_571412
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571413 = query.getOrDefault("api-version")
  valid_571413 = validateParameter(valid_571413, JString, required = true,
                                 default = nil)
  if valid_571413 != nil:
    section.add "api-version", valid_571413
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571414: Call_WebAppsGetNetworkTracesSlotV2_571405; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ## 
  let valid = call_571414.validator(path, query, header, formData, body)
  let scheme = call_571414.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571414.url(scheme.get, call_571414.host, call_571414.base,
                         call_571414.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571414, url, valid)

proc call*(call_571415: Call_WebAppsGetNetworkTracesSlotV2_571405;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; operationId: string): Recallable =
  ## webAppsGetNetworkTracesSlotV2
  ## Gets a named operation for a network trace capturing (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   operationId: string (required)
  ##              : GUID of the operation.
  var path_571416 = newJObject()
  var query_571417 = newJObject()
  add(path_571416, "resourceGroupName", newJString(resourceGroupName))
  add(query_571417, "api-version", newJString(apiVersion))
  add(path_571416, "name", newJString(name))
  add(path_571416, "slot", newJString(slot))
  add(path_571416, "subscriptionId", newJString(subscriptionId))
  add(path_571416, "operationId", newJString(operationId))
  result = call_571415.call(path_571416, query_571417, nil, nil, nil)

var webAppsGetNetworkTracesSlotV2* = Call_WebAppsGetNetworkTracesSlotV2_571405(
    name: "webAppsGetNetworkTracesSlotV2", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}",
    validator: validate_WebAppsGetNetworkTracesSlotV2_571406, base: "",
    url: url_WebAppsGetNetworkTracesSlotV2_571407, schemes: {Scheme.Https})
type
  Call_WebAppsGenerateNewSitePublishingPasswordSlot_571418 = ref object of OpenApiRestCall_567666
proc url_WebAppsGenerateNewSitePublishingPasswordSlot_571420(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/newpassword")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGenerateNewSitePublishingPasswordSlot_571419(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571421 = path.getOrDefault("resourceGroupName")
  valid_571421 = validateParameter(valid_571421, JString, required = true,
                                 default = nil)
  if valid_571421 != nil:
    section.add "resourceGroupName", valid_571421
  var valid_571422 = path.getOrDefault("name")
  valid_571422 = validateParameter(valid_571422, JString, required = true,
                                 default = nil)
  if valid_571422 != nil:
    section.add "name", valid_571422
  var valid_571423 = path.getOrDefault("slot")
  valid_571423 = validateParameter(valid_571423, JString, required = true,
                                 default = nil)
  if valid_571423 != nil:
    section.add "slot", valid_571423
  var valid_571424 = path.getOrDefault("subscriptionId")
  valid_571424 = validateParameter(valid_571424, JString, required = true,
                                 default = nil)
  if valid_571424 != nil:
    section.add "subscriptionId", valid_571424
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571425 = query.getOrDefault("api-version")
  valid_571425 = validateParameter(valid_571425, JString, required = true,
                                 default = nil)
  if valid_571425 != nil:
    section.add "api-version", valid_571425
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571426: Call_WebAppsGenerateNewSitePublishingPasswordSlot_571418;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ## 
  let valid = call_571426.validator(path, query, header, formData, body)
  let scheme = call_571426.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571426.url(scheme.get, call_571426.host, call_571426.base,
                         call_571426.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571426, url, valid)

proc call*(call_571427: Call_WebAppsGenerateNewSitePublishingPasswordSlot_571418;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGenerateNewSitePublishingPasswordSlot
  ## Generates a new publishing password for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571428 = newJObject()
  var query_571429 = newJObject()
  add(path_571428, "resourceGroupName", newJString(resourceGroupName))
  add(query_571429, "api-version", newJString(apiVersion))
  add(path_571428, "name", newJString(name))
  add(path_571428, "slot", newJString(slot))
  add(path_571428, "subscriptionId", newJString(subscriptionId))
  result = call_571427.call(path_571428, query_571429, nil, nil, nil)

var webAppsGenerateNewSitePublishingPasswordSlot* = Call_WebAppsGenerateNewSitePublishingPasswordSlot_571418(
    name: "webAppsGenerateNewSitePublishingPasswordSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
    validator: validate_WebAppsGenerateNewSitePublishingPasswordSlot_571419,
    base: "", url: url_WebAppsGenerateNewSitePublishingPasswordSlot_571420,
    schemes: {Scheme.Https})
type
  Call_WebAppsListPerfMonCountersSlot_571430 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPerfMonCountersSlot_571432(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/perfcounters")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPerfMonCountersSlot_571431(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets perfmon counters for web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571433 = path.getOrDefault("resourceGroupName")
  valid_571433 = validateParameter(valid_571433, JString, required = true,
                                 default = nil)
  if valid_571433 != nil:
    section.add "resourceGroupName", valid_571433
  var valid_571434 = path.getOrDefault("name")
  valid_571434 = validateParameter(valid_571434, JString, required = true,
                                 default = nil)
  if valid_571434 != nil:
    section.add "name", valid_571434
  var valid_571435 = path.getOrDefault("slot")
  valid_571435 = validateParameter(valid_571435, JString, required = true,
                                 default = nil)
  if valid_571435 != nil:
    section.add "slot", valid_571435
  var valid_571436 = path.getOrDefault("subscriptionId")
  valid_571436 = validateParameter(valid_571436, JString, required = true,
                                 default = nil)
  if valid_571436 != nil:
    section.add "subscriptionId", valid_571436
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571437 = query.getOrDefault("api-version")
  valid_571437 = validateParameter(valid_571437, JString, required = true,
                                 default = nil)
  if valid_571437 != nil:
    section.add "api-version", valid_571437
  var valid_571438 = query.getOrDefault("$filter")
  valid_571438 = validateParameter(valid_571438, JString, required = false,
                                 default = nil)
  if valid_571438 != nil:
    section.add "$filter", valid_571438
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571439: Call_WebAppsListPerfMonCountersSlot_571430; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets perfmon counters for web app.
  ## 
  let valid = call_571439.validator(path, query, header, formData, body)
  let scheme = call_571439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571439.url(scheme.get, call_571439.host, call_571439.base,
                         call_571439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571439, url, valid)

proc call*(call_571440: Call_WebAppsListPerfMonCountersSlot_571430;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListPerfMonCountersSlot
  ## Gets perfmon counters for web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_571441 = newJObject()
  var query_571442 = newJObject()
  add(path_571441, "resourceGroupName", newJString(resourceGroupName))
  add(query_571442, "api-version", newJString(apiVersion))
  add(path_571441, "name", newJString(name))
  add(path_571441, "slot", newJString(slot))
  add(path_571441, "subscriptionId", newJString(subscriptionId))
  add(query_571442, "$filter", newJString(Filter))
  result = call_571440.call(path_571441, query_571442, nil, nil, nil)

var webAppsListPerfMonCountersSlot* = Call_WebAppsListPerfMonCountersSlot_571430(
    name: "webAppsListPerfMonCountersSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters",
    validator: validate_WebAppsListPerfMonCountersSlot_571431, base: "",
    url: url_WebAppsListPerfMonCountersSlot_571432, schemes: {Scheme.Https})
type
  Call_WebAppsGetSitePhpErrorLogFlagSlot_571443 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSitePhpErrorLogFlagSlot_571445(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/phplogging")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSitePhpErrorLogFlagSlot_571444(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets web app's event logs.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571446 = path.getOrDefault("resourceGroupName")
  valid_571446 = validateParameter(valid_571446, JString, required = true,
                                 default = nil)
  if valid_571446 != nil:
    section.add "resourceGroupName", valid_571446
  var valid_571447 = path.getOrDefault("name")
  valid_571447 = validateParameter(valid_571447, JString, required = true,
                                 default = nil)
  if valid_571447 != nil:
    section.add "name", valid_571447
  var valid_571448 = path.getOrDefault("slot")
  valid_571448 = validateParameter(valid_571448, JString, required = true,
                                 default = nil)
  if valid_571448 != nil:
    section.add "slot", valid_571448
  var valid_571449 = path.getOrDefault("subscriptionId")
  valid_571449 = validateParameter(valid_571449, JString, required = true,
                                 default = nil)
  if valid_571449 != nil:
    section.add "subscriptionId", valid_571449
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571450 = query.getOrDefault("api-version")
  valid_571450 = validateParameter(valid_571450, JString, required = true,
                                 default = nil)
  if valid_571450 != nil:
    section.add "api-version", valid_571450
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571451: Call_WebAppsGetSitePhpErrorLogFlagSlot_571443;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets web app's event logs.
  ## 
  let valid = call_571451.validator(path, query, header, formData, body)
  let scheme = call_571451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571451.url(scheme.get, call_571451.host, call_571451.base,
                         call_571451.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571451, url, valid)

proc call*(call_571452: Call_WebAppsGetSitePhpErrorLogFlagSlot_571443;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSitePhpErrorLogFlagSlot
  ## Gets web app's event logs.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571453 = newJObject()
  var query_571454 = newJObject()
  add(path_571453, "resourceGroupName", newJString(resourceGroupName))
  add(query_571454, "api-version", newJString(apiVersion))
  add(path_571453, "name", newJString(name))
  add(path_571453, "slot", newJString(slot))
  add(path_571453, "subscriptionId", newJString(subscriptionId))
  result = call_571452.call(path_571453, query_571454, nil, nil, nil)

var webAppsGetSitePhpErrorLogFlagSlot* = Call_WebAppsGetSitePhpErrorLogFlagSlot_571443(
    name: "webAppsGetSitePhpErrorLogFlagSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging",
    validator: validate_WebAppsGetSitePhpErrorLogFlagSlot_571444, base: "",
    url: url_WebAppsGetSitePhpErrorLogFlagSlot_571445, schemes: {Scheme.Https})
type
  Call_WebAppsListPremierAddOnsSlot_571455 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPremierAddOnsSlot_571457(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPremierAddOnsSlot_571456(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the premier add-ons of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571458 = path.getOrDefault("resourceGroupName")
  valid_571458 = validateParameter(valid_571458, JString, required = true,
                                 default = nil)
  if valid_571458 != nil:
    section.add "resourceGroupName", valid_571458
  var valid_571459 = path.getOrDefault("name")
  valid_571459 = validateParameter(valid_571459, JString, required = true,
                                 default = nil)
  if valid_571459 != nil:
    section.add "name", valid_571459
  var valid_571460 = path.getOrDefault("slot")
  valid_571460 = validateParameter(valid_571460, JString, required = true,
                                 default = nil)
  if valid_571460 != nil:
    section.add "slot", valid_571460
  var valid_571461 = path.getOrDefault("subscriptionId")
  valid_571461 = validateParameter(valid_571461, JString, required = true,
                                 default = nil)
  if valid_571461 != nil:
    section.add "subscriptionId", valid_571461
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571462 = query.getOrDefault("api-version")
  valid_571462 = validateParameter(valid_571462, JString, required = true,
                                 default = nil)
  if valid_571462 != nil:
    section.add "api-version", valid_571462
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571463: Call_WebAppsListPremierAddOnsSlot_571455; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the premier add-ons of an app.
  ## 
  let valid = call_571463.validator(path, query, header, formData, body)
  let scheme = call_571463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571463.url(scheme.get, call_571463.host, call_571463.base,
                         call_571463.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571463, url, valid)

proc call*(call_571464: Call_WebAppsListPremierAddOnsSlot_571455;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPremierAddOnsSlot
  ## Gets the premier add-ons of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571465 = newJObject()
  var query_571466 = newJObject()
  add(path_571465, "resourceGroupName", newJString(resourceGroupName))
  add(query_571466, "api-version", newJString(apiVersion))
  add(path_571465, "name", newJString(name))
  add(path_571465, "slot", newJString(slot))
  add(path_571465, "subscriptionId", newJString(subscriptionId))
  result = call_571464.call(path_571465, query_571466, nil, nil, nil)

var webAppsListPremierAddOnsSlot* = Call_WebAppsListPremierAddOnsSlot_571455(
    name: "webAppsListPremierAddOnsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
    validator: validate_WebAppsListPremierAddOnsSlot_571456, base: "",
    url: url_WebAppsListPremierAddOnsSlot_571457, schemes: {Scheme.Https})
type
  Call_WebAppsAddPremierAddOnSlot_571480 = ref object of OpenApiRestCall_567666
proc url_WebAppsAddPremierAddOnSlot_571482(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsAddPremierAddOnSlot_571481(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571483 = path.getOrDefault("resourceGroupName")
  valid_571483 = validateParameter(valid_571483, JString, required = true,
                                 default = nil)
  if valid_571483 != nil:
    section.add "resourceGroupName", valid_571483
  var valid_571484 = path.getOrDefault("name")
  valid_571484 = validateParameter(valid_571484, JString, required = true,
                                 default = nil)
  if valid_571484 != nil:
    section.add "name", valid_571484
  var valid_571485 = path.getOrDefault("slot")
  valid_571485 = validateParameter(valid_571485, JString, required = true,
                                 default = nil)
  if valid_571485 != nil:
    section.add "slot", valid_571485
  var valid_571486 = path.getOrDefault("subscriptionId")
  valid_571486 = validateParameter(valid_571486, JString, required = true,
                                 default = nil)
  if valid_571486 != nil:
    section.add "subscriptionId", valid_571486
  var valid_571487 = path.getOrDefault("premierAddOnName")
  valid_571487 = validateParameter(valid_571487, JString, required = true,
                                 default = nil)
  if valid_571487 != nil:
    section.add "premierAddOnName", valid_571487
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571488 = query.getOrDefault("api-version")
  valid_571488 = validateParameter(valid_571488, JString, required = true,
                                 default = nil)
  if valid_571488 != nil:
    section.add "api-version", valid_571488
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571490: Call_WebAppsAddPremierAddOnSlot_571480; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_571490.validator(path, query, header, formData, body)
  let scheme = call_571490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571490.url(scheme.get, call_571490.host, call_571490.base,
                         call_571490.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571490, url, valid)

proc call*(call_571491: Call_WebAppsAddPremierAddOnSlot_571480;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; slot: string; subscriptionId: string;
          premierAddOnName: string): Recallable =
  ## webAppsAddPremierAddOnSlot
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_571492 = newJObject()
  var query_571493 = newJObject()
  var body_571494 = newJObject()
  add(path_571492, "resourceGroupName", newJString(resourceGroupName))
  add(query_571493, "api-version", newJString(apiVersion))
  add(path_571492, "name", newJString(name))
  if premierAddOn != nil:
    body_571494 = premierAddOn
  add(path_571492, "slot", newJString(slot))
  add(path_571492, "subscriptionId", newJString(subscriptionId))
  add(path_571492, "premierAddOnName", newJString(premierAddOnName))
  result = call_571491.call(path_571492, query_571493, nil, nil, body_571494)

var webAppsAddPremierAddOnSlot* = Call_WebAppsAddPremierAddOnSlot_571480(
    name: "webAppsAddPremierAddOnSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsAddPremierAddOnSlot_571481, base: "",
    url: url_WebAppsAddPremierAddOnSlot_571482, schemes: {Scheme.Https})
type
  Call_WebAppsGetPremierAddOnSlot_571467 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetPremierAddOnSlot_571469(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPremierAddOnSlot_571468(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571470 = path.getOrDefault("resourceGroupName")
  valid_571470 = validateParameter(valid_571470, JString, required = true,
                                 default = nil)
  if valid_571470 != nil:
    section.add "resourceGroupName", valid_571470
  var valid_571471 = path.getOrDefault("name")
  valid_571471 = validateParameter(valid_571471, JString, required = true,
                                 default = nil)
  if valid_571471 != nil:
    section.add "name", valid_571471
  var valid_571472 = path.getOrDefault("slot")
  valid_571472 = validateParameter(valid_571472, JString, required = true,
                                 default = nil)
  if valid_571472 != nil:
    section.add "slot", valid_571472
  var valid_571473 = path.getOrDefault("subscriptionId")
  valid_571473 = validateParameter(valid_571473, JString, required = true,
                                 default = nil)
  if valid_571473 != nil:
    section.add "subscriptionId", valid_571473
  var valid_571474 = path.getOrDefault("premierAddOnName")
  valid_571474 = validateParameter(valid_571474, JString, required = true,
                                 default = nil)
  if valid_571474 != nil:
    section.add "premierAddOnName", valid_571474
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571475 = query.getOrDefault("api-version")
  valid_571475 = validateParameter(valid_571475, JString, required = true,
                                 default = nil)
  if valid_571475 != nil:
    section.add "api-version", valid_571475
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571476: Call_WebAppsGetPremierAddOnSlot_571467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a named add-on of an app.
  ## 
  let valid = call_571476.validator(path, query, header, formData, body)
  let scheme = call_571476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571476.url(scheme.get, call_571476.host, call_571476.base,
                         call_571476.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571476, url, valid)

proc call*(call_571477: Call_WebAppsGetPremierAddOnSlot_571467;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsGetPremierAddOnSlot
  ## Gets a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_571478 = newJObject()
  var query_571479 = newJObject()
  add(path_571478, "resourceGroupName", newJString(resourceGroupName))
  add(query_571479, "api-version", newJString(apiVersion))
  add(path_571478, "name", newJString(name))
  add(path_571478, "slot", newJString(slot))
  add(path_571478, "subscriptionId", newJString(subscriptionId))
  add(path_571478, "premierAddOnName", newJString(premierAddOnName))
  result = call_571477.call(path_571478, query_571479, nil, nil, nil)

var webAppsGetPremierAddOnSlot* = Call_WebAppsGetPremierAddOnSlot_571467(
    name: "webAppsGetPremierAddOnSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsGetPremierAddOnSlot_571468, base: "",
    url: url_WebAppsGetPremierAddOnSlot_571469, schemes: {Scheme.Https})
type
  Call_WebAppsUpdatePremierAddOnSlot_571508 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdatePremierAddOnSlot_571510(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdatePremierAddOnSlot_571509(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates a named add-on of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571511 = path.getOrDefault("resourceGroupName")
  valid_571511 = validateParameter(valid_571511, JString, required = true,
                                 default = nil)
  if valid_571511 != nil:
    section.add "resourceGroupName", valid_571511
  var valid_571512 = path.getOrDefault("name")
  valid_571512 = validateParameter(valid_571512, JString, required = true,
                                 default = nil)
  if valid_571512 != nil:
    section.add "name", valid_571512
  var valid_571513 = path.getOrDefault("slot")
  valid_571513 = validateParameter(valid_571513, JString, required = true,
                                 default = nil)
  if valid_571513 != nil:
    section.add "slot", valid_571513
  var valid_571514 = path.getOrDefault("subscriptionId")
  valid_571514 = validateParameter(valid_571514, JString, required = true,
                                 default = nil)
  if valid_571514 != nil:
    section.add "subscriptionId", valid_571514
  var valid_571515 = path.getOrDefault("premierAddOnName")
  valid_571515 = validateParameter(valid_571515, JString, required = true,
                                 default = nil)
  if valid_571515 != nil:
    section.add "premierAddOnName", valid_571515
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571516 = query.getOrDefault("api-version")
  valid_571516 = validateParameter(valid_571516, JString, required = true,
                                 default = nil)
  if valid_571516 != nil:
    section.add "api-version", valid_571516
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571518: Call_WebAppsUpdatePremierAddOnSlot_571508; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates a named add-on of an app.
  ## 
  let valid = call_571518.validator(path, query, header, formData, body)
  let scheme = call_571518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571518.url(scheme.get, call_571518.host, call_571518.base,
                         call_571518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571518, url, valid)

proc call*(call_571519: Call_WebAppsUpdatePremierAddOnSlot_571508;
          resourceGroupName: string; apiVersion: string; name: string;
          premierAddOn: JsonNode; slot: string; subscriptionId: string;
          premierAddOnName: string): Recallable =
  ## webAppsUpdatePremierAddOnSlot
  ## Updates a named add-on of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   premierAddOn: JObject (required)
  ##               : A JSON representation of the edited premier add-on.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_571520 = newJObject()
  var query_571521 = newJObject()
  var body_571522 = newJObject()
  add(path_571520, "resourceGroupName", newJString(resourceGroupName))
  add(query_571521, "api-version", newJString(apiVersion))
  add(path_571520, "name", newJString(name))
  if premierAddOn != nil:
    body_571522 = premierAddOn
  add(path_571520, "slot", newJString(slot))
  add(path_571520, "subscriptionId", newJString(subscriptionId))
  add(path_571520, "premierAddOnName", newJString(premierAddOnName))
  result = call_571519.call(path_571520, query_571521, nil, nil, body_571522)

var webAppsUpdatePremierAddOnSlot* = Call_WebAppsUpdatePremierAddOnSlot_571508(
    name: "webAppsUpdatePremierAddOnSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsUpdatePremierAddOnSlot_571509, base: "",
    url: url_WebAppsUpdatePremierAddOnSlot_571510, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePremierAddOnSlot_571495 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeletePremierAddOnSlot_571497(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "premierAddOnName" in path,
        "`premierAddOnName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/premieraddons/"),
               (kind: VariableSegment, value: "premierAddOnName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePremierAddOnSlot_571496(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a premier add-on from an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: JString (required)
  ##                   : Add-on name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571498 = path.getOrDefault("resourceGroupName")
  valid_571498 = validateParameter(valid_571498, JString, required = true,
                                 default = nil)
  if valid_571498 != nil:
    section.add "resourceGroupName", valid_571498
  var valid_571499 = path.getOrDefault("name")
  valid_571499 = validateParameter(valid_571499, JString, required = true,
                                 default = nil)
  if valid_571499 != nil:
    section.add "name", valid_571499
  var valid_571500 = path.getOrDefault("slot")
  valid_571500 = validateParameter(valid_571500, JString, required = true,
                                 default = nil)
  if valid_571500 != nil:
    section.add "slot", valid_571500
  var valid_571501 = path.getOrDefault("subscriptionId")
  valid_571501 = validateParameter(valid_571501, JString, required = true,
                                 default = nil)
  if valid_571501 != nil:
    section.add "subscriptionId", valid_571501
  var valid_571502 = path.getOrDefault("premierAddOnName")
  valid_571502 = validateParameter(valid_571502, JString, required = true,
                                 default = nil)
  if valid_571502 != nil:
    section.add "premierAddOnName", valid_571502
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571503 = query.getOrDefault("api-version")
  valid_571503 = validateParameter(valid_571503, JString, required = true,
                                 default = nil)
  if valid_571503 != nil:
    section.add "api-version", valid_571503
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571504: Call_WebAppsDeletePremierAddOnSlot_571495; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a premier add-on from an app.
  ## 
  let valid = call_571504.validator(path, query, header, formData, body)
  let scheme = call_571504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571504.url(scheme.get, call_571504.host, call_571504.base,
                         call_571504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571504, url, valid)

proc call*(call_571505: Call_WebAppsDeletePremierAddOnSlot_571495;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; premierAddOnName: string): Recallable =
  ## webAppsDeletePremierAddOnSlot
  ## Delete a premier add-on from an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   premierAddOnName: string (required)
  ##                   : Add-on name.
  var path_571506 = newJObject()
  var query_571507 = newJObject()
  add(path_571506, "resourceGroupName", newJString(resourceGroupName))
  add(query_571507, "api-version", newJString(apiVersion))
  add(path_571506, "name", newJString(name))
  add(path_571506, "slot", newJString(slot))
  add(path_571506, "subscriptionId", newJString(subscriptionId))
  add(path_571506, "premierAddOnName", newJString(premierAddOnName))
  result = call_571505.call(path_571506, query_571507, nil, nil, nil)

var webAppsDeletePremierAddOnSlot* = Call_WebAppsDeletePremierAddOnSlot_571495(
    name: "webAppsDeletePremierAddOnSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    validator: validate_WebAppsDeletePremierAddOnSlot_571496, base: "",
    url: url_WebAppsDeletePremierAddOnSlot_571497, schemes: {Scheme.Https})
type
  Call_WebAppsPutPrivateAccessVnetSlot_571535 = ref object of OpenApiRestCall_567666
proc url_WebAppsPutPrivateAccessVnetSlot_571537(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsPutPrivateAccessVnetSlot_571536(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571538 = path.getOrDefault("resourceGroupName")
  valid_571538 = validateParameter(valid_571538, JString, required = true,
                                 default = nil)
  if valid_571538 != nil:
    section.add "resourceGroupName", valid_571538
  var valid_571539 = path.getOrDefault("name")
  valid_571539 = validateParameter(valid_571539, JString, required = true,
                                 default = nil)
  if valid_571539 != nil:
    section.add "name", valid_571539
  var valid_571540 = path.getOrDefault("slot")
  valid_571540 = validateParameter(valid_571540, JString, required = true,
                                 default = nil)
  if valid_571540 != nil:
    section.add "slot", valid_571540
  var valid_571541 = path.getOrDefault("subscriptionId")
  valid_571541 = validateParameter(valid_571541, JString, required = true,
                                 default = nil)
  if valid_571541 != nil:
    section.add "subscriptionId", valid_571541
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571542 = query.getOrDefault("api-version")
  valid_571542 = validateParameter(valid_571542, JString, required = true,
                                 default = nil)
  if valid_571542 != nil:
    section.add "api-version", valid_571542
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   access: JObject (required)
  ##         : The information for the private access
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571544: Call_WebAppsPutPrivateAccessVnetSlot_571535;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_571544.validator(path, query, header, formData, body)
  let scheme = call_571544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571544.url(scheme.get, call_571544.host, call_571544.base,
                         call_571544.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571544, url, valid)

proc call*(call_571545: Call_WebAppsPutPrivateAccessVnetSlot_571535;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; access: JsonNode): Recallable =
  ## webAppsPutPrivateAccessVnetSlot
  ## Sets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   access: JObject (required)
  ##         : The information for the private access
  var path_571546 = newJObject()
  var query_571547 = newJObject()
  var body_571548 = newJObject()
  add(path_571546, "resourceGroupName", newJString(resourceGroupName))
  add(query_571547, "api-version", newJString(apiVersion))
  add(path_571546, "name", newJString(name))
  add(path_571546, "slot", newJString(slot))
  add(path_571546, "subscriptionId", newJString(subscriptionId))
  if access != nil:
    body_571548 = access
  result = call_571545.call(path_571546, query_571547, nil, nil, body_571548)

var webAppsPutPrivateAccessVnetSlot* = Call_WebAppsPutPrivateAccessVnetSlot_571535(
    name: "webAppsPutPrivateAccessVnetSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
    validator: validate_WebAppsPutPrivateAccessVnetSlot_571536, base: "",
    url: url_WebAppsPutPrivateAccessVnetSlot_571537, schemes: {Scheme.Https})
type
  Call_WebAppsGetPrivateAccessSlot_571523 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetPrivateAccessSlot_571525(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/privateAccess/virtualNetworks")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPrivateAccessSlot_571524(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571526 = path.getOrDefault("resourceGroupName")
  valid_571526 = validateParameter(valid_571526, JString, required = true,
                                 default = nil)
  if valid_571526 != nil:
    section.add "resourceGroupName", valid_571526
  var valid_571527 = path.getOrDefault("name")
  valid_571527 = validateParameter(valid_571527, JString, required = true,
                                 default = nil)
  if valid_571527 != nil:
    section.add "name", valid_571527
  var valid_571528 = path.getOrDefault("slot")
  valid_571528 = validateParameter(valid_571528, JString, required = true,
                                 default = nil)
  if valid_571528 != nil:
    section.add "slot", valid_571528
  var valid_571529 = path.getOrDefault("subscriptionId")
  valid_571529 = validateParameter(valid_571529, JString, required = true,
                                 default = nil)
  if valid_571529 != nil:
    section.add "subscriptionId", valid_571529
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571530 = query.getOrDefault("api-version")
  valid_571530 = validateParameter(valid_571530, JString, required = true,
                                 default = nil)
  if valid_571530 != nil:
    section.add "api-version", valid_571530
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571531: Call_WebAppsGetPrivateAccessSlot_571523; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ## 
  let valid = call_571531.validator(path, query, header, formData, body)
  let scheme = call_571531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571531.url(scheme.get, call_571531.host, call_571531.base,
                         call_571531.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571531, url, valid)

proc call*(call_571532: Call_WebAppsGetPrivateAccessSlot_571523;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetPrivateAccessSlot
  ## Gets data around private site access enablement and authorized Virtual Networks that can access the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571533 = newJObject()
  var query_571534 = newJObject()
  add(path_571533, "resourceGroupName", newJString(resourceGroupName))
  add(query_571534, "api-version", newJString(apiVersion))
  add(path_571533, "name", newJString(name))
  add(path_571533, "slot", newJString(slot))
  add(path_571533, "subscriptionId", newJString(subscriptionId))
  result = call_571532.call(path_571533, query_571534, nil, nil, nil)

var webAppsGetPrivateAccessSlot* = Call_WebAppsGetPrivateAccessSlot_571523(
    name: "webAppsGetPrivateAccessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
    validator: validate_WebAppsGetPrivateAccessSlot_571524, base: "",
    url: url_WebAppsGetPrivateAccessSlot_571525, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessesSlot_571549 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcessesSlot_571551(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessesSlot_571550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571552 = path.getOrDefault("resourceGroupName")
  valid_571552 = validateParameter(valid_571552, JString, required = true,
                                 default = nil)
  if valid_571552 != nil:
    section.add "resourceGroupName", valid_571552
  var valid_571553 = path.getOrDefault("name")
  valid_571553 = validateParameter(valid_571553, JString, required = true,
                                 default = nil)
  if valid_571553 != nil:
    section.add "name", valid_571553
  var valid_571554 = path.getOrDefault("slot")
  valid_571554 = validateParameter(valid_571554, JString, required = true,
                                 default = nil)
  if valid_571554 != nil:
    section.add "slot", valid_571554
  var valid_571555 = path.getOrDefault("subscriptionId")
  valid_571555 = validateParameter(valid_571555, JString, required = true,
                                 default = nil)
  if valid_571555 != nil:
    section.add "subscriptionId", valid_571555
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571556 = query.getOrDefault("api-version")
  valid_571556 = validateParameter(valid_571556, JString, required = true,
                                 default = nil)
  if valid_571556 != nil:
    section.add "api-version", valid_571556
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571557: Call_WebAppsListProcessesSlot_571549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571557.validator(path, query, header, formData, body)
  let scheme = call_571557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571557.url(scheme.get, call_571557.host, call_571557.base,
                         call_571557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571557, url, valid)

proc call*(call_571558: Call_WebAppsListProcessesSlot_571549;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListProcessesSlot
  ## Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571559 = newJObject()
  var query_571560 = newJObject()
  add(path_571559, "resourceGroupName", newJString(resourceGroupName))
  add(query_571560, "api-version", newJString(apiVersion))
  add(path_571559, "name", newJString(name))
  add(path_571559, "slot", newJString(slot))
  add(path_571559, "subscriptionId", newJString(subscriptionId))
  result = call_571558.call(path_571559, query_571560, nil, nil, nil)

var webAppsListProcessesSlot* = Call_WebAppsListProcessesSlot_571549(
    name: "webAppsListProcessesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes",
    validator: validate_WebAppsListProcessesSlot_571550, base: "",
    url: url_WebAppsListProcessesSlot_571551, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessSlot_571561 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessSlot_571563(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessSlot_571562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571564 = path.getOrDefault("resourceGroupName")
  valid_571564 = validateParameter(valid_571564, JString, required = true,
                                 default = nil)
  if valid_571564 != nil:
    section.add "resourceGroupName", valid_571564
  var valid_571565 = path.getOrDefault("name")
  valid_571565 = validateParameter(valid_571565, JString, required = true,
                                 default = nil)
  if valid_571565 != nil:
    section.add "name", valid_571565
  var valid_571566 = path.getOrDefault("processId")
  valid_571566 = validateParameter(valid_571566, JString, required = true,
                                 default = nil)
  if valid_571566 != nil:
    section.add "processId", valid_571566
  var valid_571567 = path.getOrDefault("slot")
  valid_571567 = validateParameter(valid_571567, JString, required = true,
                                 default = nil)
  if valid_571567 != nil:
    section.add "slot", valid_571567
  var valid_571568 = path.getOrDefault("subscriptionId")
  valid_571568 = validateParameter(valid_571568, JString, required = true,
                                 default = nil)
  if valid_571568 != nil:
    section.add "subscriptionId", valid_571568
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571569 = query.getOrDefault("api-version")
  valid_571569 = validateParameter(valid_571569, JString, required = true,
                                 default = nil)
  if valid_571569 != nil:
    section.add "api-version", valid_571569
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571570: Call_WebAppsGetProcessSlot_571561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571570.validator(path, query, header, formData, body)
  let scheme = call_571570.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571570.url(scheme.get, call_571570.host, call_571570.base,
                         call_571570.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571570, url, valid)

proc call*(call_571571: Call_WebAppsGetProcessSlot_571561;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571572 = newJObject()
  var query_571573 = newJObject()
  add(path_571572, "resourceGroupName", newJString(resourceGroupName))
  add(query_571573, "api-version", newJString(apiVersion))
  add(path_571572, "name", newJString(name))
  add(path_571572, "processId", newJString(processId))
  add(path_571572, "slot", newJString(slot))
  add(path_571572, "subscriptionId", newJString(subscriptionId))
  result = call_571571.call(path_571572, query_571573, nil, nil, nil)

var webAppsGetProcessSlot* = Call_WebAppsGetProcessSlot_571561(
    name: "webAppsGetProcessSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsGetProcessSlot_571562, base: "",
    url: url_WebAppsGetProcessSlot_571563, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteProcessSlot_571574 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteProcessSlot_571576(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteProcessSlot_571575(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571577 = path.getOrDefault("resourceGroupName")
  valid_571577 = validateParameter(valid_571577, JString, required = true,
                                 default = nil)
  if valid_571577 != nil:
    section.add "resourceGroupName", valid_571577
  var valid_571578 = path.getOrDefault("name")
  valid_571578 = validateParameter(valid_571578, JString, required = true,
                                 default = nil)
  if valid_571578 != nil:
    section.add "name", valid_571578
  var valid_571579 = path.getOrDefault("processId")
  valid_571579 = validateParameter(valid_571579, JString, required = true,
                                 default = nil)
  if valid_571579 != nil:
    section.add "processId", valid_571579
  var valid_571580 = path.getOrDefault("slot")
  valid_571580 = validateParameter(valid_571580, JString, required = true,
                                 default = nil)
  if valid_571580 != nil:
    section.add "slot", valid_571580
  var valid_571581 = path.getOrDefault("subscriptionId")
  valid_571581 = validateParameter(valid_571581, JString, required = true,
                                 default = nil)
  if valid_571581 != nil:
    section.add "subscriptionId", valid_571581
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571582 = query.getOrDefault("api-version")
  valid_571582 = validateParameter(valid_571582, JString, required = true,
                                 default = nil)
  if valid_571582 != nil:
    section.add "api-version", valid_571582
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571583: Call_WebAppsDeleteProcessSlot_571574; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ## 
  let valid = call_571583.validator(path, query, header, formData, body)
  let scheme = call_571583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571583.url(scheme.get, call_571583.host, call_571583.base,
                         call_571583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571583, url, valid)

proc call*(call_571584: Call_WebAppsDeleteProcessSlot_571574;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsDeleteProcessSlot
  ## Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571585 = newJObject()
  var query_571586 = newJObject()
  add(path_571585, "resourceGroupName", newJString(resourceGroupName))
  add(query_571586, "api-version", newJString(apiVersion))
  add(path_571585, "name", newJString(name))
  add(path_571585, "processId", newJString(processId))
  add(path_571585, "slot", newJString(slot))
  add(path_571585, "subscriptionId", newJString(subscriptionId))
  result = call_571584.call(path_571585, query_571586, nil, nil, nil)

var webAppsDeleteProcessSlot* = Call_WebAppsDeleteProcessSlot_571574(
    name: "webAppsDeleteProcessSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    validator: validate_WebAppsDeleteProcessSlot_571575, base: "",
    url: url_WebAppsDeleteProcessSlot_571576, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessDumpSlot_571587 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessDumpSlot_571589(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/dump")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessDumpSlot_571588(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571590 = path.getOrDefault("resourceGroupName")
  valid_571590 = validateParameter(valid_571590, JString, required = true,
                                 default = nil)
  if valid_571590 != nil:
    section.add "resourceGroupName", valid_571590
  var valid_571591 = path.getOrDefault("name")
  valid_571591 = validateParameter(valid_571591, JString, required = true,
                                 default = nil)
  if valid_571591 != nil:
    section.add "name", valid_571591
  var valid_571592 = path.getOrDefault("processId")
  valid_571592 = validateParameter(valid_571592, JString, required = true,
                                 default = nil)
  if valid_571592 != nil:
    section.add "processId", valid_571592
  var valid_571593 = path.getOrDefault("slot")
  valid_571593 = validateParameter(valid_571593, JString, required = true,
                                 default = nil)
  if valid_571593 != nil:
    section.add "slot", valid_571593
  var valid_571594 = path.getOrDefault("subscriptionId")
  valid_571594 = validateParameter(valid_571594, JString, required = true,
                                 default = nil)
  if valid_571594 != nil:
    section.add "subscriptionId", valid_571594
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571595 = query.getOrDefault("api-version")
  valid_571595 = validateParameter(valid_571595, JString, required = true,
                                 default = nil)
  if valid_571595 != nil:
    section.add "api-version", valid_571595
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571596: Call_WebAppsGetProcessDumpSlot_571587; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571596.validator(path, query, header, formData, body)
  let scheme = call_571596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571596.url(scheme.get, call_571596.host, call_571596.base,
                         call_571596.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571596, url, valid)

proc call*(call_571597: Call_WebAppsGetProcessDumpSlot_571587;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetProcessDumpSlot
  ## Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571598 = newJObject()
  var query_571599 = newJObject()
  add(path_571598, "resourceGroupName", newJString(resourceGroupName))
  add(query_571599, "api-version", newJString(apiVersion))
  add(path_571598, "name", newJString(name))
  add(path_571598, "processId", newJString(processId))
  add(path_571598, "slot", newJString(slot))
  add(path_571598, "subscriptionId", newJString(subscriptionId))
  result = call_571597.call(path_571598, query_571599, nil, nil, nil)

var webAppsGetProcessDumpSlot* = Call_WebAppsGetProcessDumpSlot_571587(
    name: "webAppsGetProcessDumpSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump",
    validator: validate_WebAppsGetProcessDumpSlot_571588, base: "",
    url: url_WebAppsGetProcessDumpSlot_571589, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessModulesSlot_571600 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcessModulesSlot_571602(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessModulesSlot_571601(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571603 = path.getOrDefault("resourceGroupName")
  valid_571603 = validateParameter(valid_571603, JString, required = true,
                                 default = nil)
  if valid_571603 != nil:
    section.add "resourceGroupName", valid_571603
  var valid_571604 = path.getOrDefault("name")
  valid_571604 = validateParameter(valid_571604, JString, required = true,
                                 default = nil)
  if valid_571604 != nil:
    section.add "name", valid_571604
  var valid_571605 = path.getOrDefault("processId")
  valid_571605 = validateParameter(valid_571605, JString, required = true,
                                 default = nil)
  if valid_571605 != nil:
    section.add "processId", valid_571605
  var valid_571606 = path.getOrDefault("slot")
  valid_571606 = validateParameter(valid_571606, JString, required = true,
                                 default = nil)
  if valid_571606 != nil:
    section.add "slot", valid_571606
  var valid_571607 = path.getOrDefault("subscriptionId")
  valid_571607 = validateParameter(valid_571607, JString, required = true,
                                 default = nil)
  if valid_571607 != nil:
    section.add "subscriptionId", valid_571607
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571608 = query.getOrDefault("api-version")
  valid_571608 = validateParameter(valid_571608, JString, required = true,
                                 default = nil)
  if valid_571608 != nil:
    section.add "api-version", valid_571608
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571609: Call_WebAppsListProcessModulesSlot_571600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571609.validator(path, query, header, formData, body)
  let scheme = call_571609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571609.url(scheme.get, call_571609.host, call_571609.base,
                         call_571609.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571609, url, valid)

proc call*(call_571610: Call_WebAppsListProcessModulesSlot_571600;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsListProcessModulesSlot
  ## List module information for a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571611 = newJObject()
  var query_571612 = newJObject()
  add(path_571611, "resourceGroupName", newJString(resourceGroupName))
  add(query_571612, "api-version", newJString(apiVersion))
  add(path_571611, "name", newJString(name))
  add(path_571611, "processId", newJString(processId))
  add(path_571611, "slot", newJString(slot))
  add(path_571611, "subscriptionId", newJString(subscriptionId))
  result = call_571610.call(path_571611, query_571612, nil, nil, nil)

var webAppsListProcessModulesSlot* = Call_WebAppsListProcessModulesSlot_571600(
    name: "webAppsListProcessModulesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules",
    validator: validate_WebAppsListProcessModulesSlot_571601, base: "",
    url: url_WebAppsListProcessModulesSlot_571602, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessModuleSlot_571613 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessModuleSlot_571615(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "baseAddress" in path, "`baseAddress` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/modules/"),
               (kind: VariableSegment, value: "baseAddress")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessModuleSlot_571614(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: JString (required)
  ##              : Module base address.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571616 = path.getOrDefault("resourceGroupName")
  valid_571616 = validateParameter(valid_571616, JString, required = true,
                                 default = nil)
  if valid_571616 != nil:
    section.add "resourceGroupName", valid_571616
  var valid_571617 = path.getOrDefault("name")
  valid_571617 = validateParameter(valid_571617, JString, required = true,
                                 default = nil)
  if valid_571617 != nil:
    section.add "name", valid_571617
  var valid_571618 = path.getOrDefault("processId")
  valid_571618 = validateParameter(valid_571618, JString, required = true,
                                 default = nil)
  if valid_571618 != nil:
    section.add "processId", valid_571618
  var valid_571619 = path.getOrDefault("slot")
  valid_571619 = validateParameter(valid_571619, JString, required = true,
                                 default = nil)
  if valid_571619 != nil:
    section.add "slot", valid_571619
  var valid_571620 = path.getOrDefault("subscriptionId")
  valid_571620 = validateParameter(valid_571620, JString, required = true,
                                 default = nil)
  if valid_571620 != nil:
    section.add "subscriptionId", valid_571620
  var valid_571621 = path.getOrDefault("baseAddress")
  valid_571621 = validateParameter(valid_571621, JString, required = true,
                                 default = nil)
  if valid_571621 != nil:
    section.add "baseAddress", valid_571621
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571622 = query.getOrDefault("api-version")
  valid_571622 = validateParameter(valid_571622, JString, required = true,
                                 default = nil)
  if valid_571622 != nil:
    section.add "api-version", valid_571622
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571623: Call_WebAppsGetProcessModuleSlot_571613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571623.validator(path, query, header, formData, body)
  let scheme = call_571623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571623.url(scheme.get, call_571623.host, call_571623.base,
                         call_571623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571623, url, valid)

proc call*(call_571624: Call_WebAppsGetProcessModuleSlot_571613;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; baseAddress: string): Recallable =
  ## webAppsGetProcessModuleSlot
  ## Get process information by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   baseAddress: string (required)
  ##              : Module base address.
  var path_571625 = newJObject()
  var query_571626 = newJObject()
  add(path_571625, "resourceGroupName", newJString(resourceGroupName))
  add(query_571626, "api-version", newJString(apiVersion))
  add(path_571625, "name", newJString(name))
  add(path_571625, "processId", newJString(processId))
  add(path_571625, "slot", newJString(slot))
  add(path_571625, "subscriptionId", newJString(subscriptionId))
  add(path_571625, "baseAddress", newJString(baseAddress))
  result = call_571624.call(path_571625, query_571626, nil, nil, nil)

var webAppsGetProcessModuleSlot* = Call_WebAppsGetProcessModuleSlot_571613(
    name: "webAppsGetProcessModuleSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}",
    validator: validate_WebAppsGetProcessModuleSlot_571614, base: "",
    url: url_WebAppsGetProcessModuleSlot_571615, schemes: {Scheme.Https})
type
  Call_WebAppsListProcessThreadsSlot_571627 = ref object of OpenApiRestCall_567666
proc url_WebAppsListProcessThreadsSlot_571629(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListProcessThreadsSlot_571628(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571630 = path.getOrDefault("resourceGroupName")
  valid_571630 = validateParameter(valid_571630, JString, required = true,
                                 default = nil)
  if valid_571630 != nil:
    section.add "resourceGroupName", valid_571630
  var valid_571631 = path.getOrDefault("name")
  valid_571631 = validateParameter(valid_571631, JString, required = true,
                                 default = nil)
  if valid_571631 != nil:
    section.add "name", valid_571631
  var valid_571632 = path.getOrDefault("processId")
  valid_571632 = validateParameter(valid_571632, JString, required = true,
                                 default = nil)
  if valid_571632 != nil:
    section.add "processId", valid_571632
  var valid_571633 = path.getOrDefault("slot")
  valid_571633 = validateParameter(valid_571633, JString, required = true,
                                 default = nil)
  if valid_571633 != nil:
    section.add "slot", valid_571633
  var valid_571634 = path.getOrDefault("subscriptionId")
  valid_571634 = validateParameter(valid_571634, JString, required = true,
                                 default = nil)
  if valid_571634 != nil:
    section.add "subscriptionId", valid_571634
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571635 = query.getOrDefault("api-version")
  valid_571635 = validateParameter(valid_571635, JString, required = true,
                                 default = nil)
  if valid_571635 != nil:
    section.add "api-version", valid_571635
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571636: Call_WebAppsListProcessThreadsSlot_571627; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ## 
  let valid = call_571636.validator(path, query, header, formData, body)
  let scheme = call_571636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571636.url(scheme.get, call_571636.host, call_571636.base,
                         call_571636.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571636, url, valid)

proc call*(call_571637: Call_WebAppsListProcessThreadsSlot_571627;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsListProcessThreadsSlot
  ## List the threads in a process by its ID for a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571638 = newJObject()
  var query_571639 = newJObject()
  add(path_571638, "resourceGroupName", newJString(resourceGroupName))
  add(query_571639, "api-version", newJString(apiVersion))
  add(path_571638, "name", newJString(name))
  add(path_571638, "processId", newJString(processId))
  add(path_571638, "slot", newJString(slot))
  add(path_571638, "subscriptionId", newJString(subscriptionId))
  result = call_571637.call(path_571638, query_571639, nil, nil, nil)

var webAppsListProcessThreadsSlot* = Call_WebAppsListProcessThreadsSlot_571627(
    name: "webAppsListProcessThreadsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads",
    validator: validate_WebAppsListProcessThreadsSlot_571628, base: "",
    url: url_WebAppsListProcessThreadsSlot_571629, schemes: {Scheme.Https})
type
  Call_WebAppsGetProcessThreadSlot_571640 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetProcessThreadSlot_571642(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "processId" in path, "`processId` is a required path parameter"
  assert "threadId" in path, "`threadId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/processes/"),
               (kind: VariableSegment, value: "processId"),
               (kind: ConstantSegment, value: "/threads/"),
               (kind: VariableSegment, value: "threadId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetProcessThreadSlot_571641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   processId: JString (required)
  ##            : PID.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: JString (required)
  ##           : TID.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571643 = path.getOrDefault("resourceGroupName")
  valid_571643 = validateParameter(valid_571643, JString, required = true,
                                 default = nil)
  if valid_571643 != nil:
    section.add "resourceGroupName", valid_571643
  var valid_571644 = path.getOrDefault("name")
  valid_571644 = validateParameter(valid_571644, JString, required = true,
                                 default = nil)
  if valid_571644 != nil:
    section.add "name", valid_571644
  var valid_571645 = path.getOrDefault("processId")
  valid_571645 = validateParameter(valid_571645, JString, required = true,
                                 default = nil)
  if valid_571645 != nil:
    section.add "processId", valid_571645
  var valid_571646 = path.getOrDefault("slot")
  valid_571646 = validateParameter(valid_571646, JString, required = true,
                                 default = nil)
  if valid_571646 != nil:
    section.add "slot", valid_571646
  var valid_571647 = path.getOrDefault("subscriptionId")
  valid_571647 = validateParameter(valid_571647, JString, required = true,
                                 default = nil)
  if valid_571647 != nil:
    section.add "subscriptionId", valid_571647
  var valid_571648 = path.getOrDefault("threadId")
  valid_571648 = validateParameter(valid_571648, JString, required = true,
                                 default = nil)
  if valid_571648 != nil:
    section.add "threadId", valid_571648
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571649 = query.getOrDefault("api-version")
  valid_571649 = validateParameter(valid_571649, JString, required = true,
                                 default = nil)
  if valid_571649 != nil:
    section.add "api-version", valid_571649
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571650: Call_WebAppsGetProcessThreadSlot_571640; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ## 
  let valid = call_571650.validator(path, query, header, formData, body)
  let scheme = call_571650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571650.url(scheme.get, call_571650.host, call_571650.base,
                         call_571650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571650, url, valid)

proc call*(call_571651: Call_WebAppsGetProcessThreadSlot_571640;
          resourceGroupName: string; apiVersion: string; name: string;
          processId: string; slot: string; subscriptionId: string; threadId: string): Recallable =
  ## webAppsGetProcessThreadSlot
  ## Get thread information by Thread ID for a specific process, in a specific scaled-out instance in a web site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   processId: string (required)
  ##            : PID.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   threadId: string (required)
  ##           : TID.
  var path_571652 = newJObject()
  var query_571653 = newJObject()
  add(path_571652, "resourceGroupName", newJString(resourceGroupName))
  add(query_571653, "api-version", newJString(apiVersion))
  add(path_571652, "name", newJString(name))
  add(path_571652, "processId", newJString(processId))
  add(path_571652, "slot", newJString(slot))
  add(path_571652, "subscriptionId", newJString(subscriptionId))
  add(path_571652, "threadId", newJString(threadId))
  result = call_571651.call(path_571652, query_571653, nil, nil, nil)

var webAppsGetProcessThreadSlot* = Call_WebAppsGetProcessThreadSlot_571640(
    name: "webAppsGetProcessThreadSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads/{threadId}",
    validator: validate_WebAppsGetProcessThreadSlot_571641, base: "",
    url: url_WebAppsGetProcessThreadSlot_571642, schemes: {Scheme.Https})
type
  Call_WebAppsListPublicCertificatesSlot_571654 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublicCertificatesSlot_571656(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublicCertificatesSlot_571655(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get public certificates for an app or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571657 = path.getOrDefault("resourceGroupName")
  valid_571657 = validateParameter(valid_571657, JString, required = true,
                                 default = nil)
  if valid_571657 != nil:
    section.add "resourceGroupName", valid_571657
  var valid_571658 = path.getOrDefault("name")
  valid_571658 = validateParameter(valid_571658, JString, required = true,
                                 default = nil)
  if valid_571658 != nil:
    section.add "name", valid_571658
  var valid_571659 = path.getOrDefault("slot")
  valid_571659 = validateParameter(valid_571659, JString, required = true,
                                 default = nil)
  if valid_571659 != nil:
    section.add "slot", valid_571659
  var valid_571660 = path.getOrDefault("subscriptionId")
  valid_571660 = validateParameter(valid_571660, JString, required = true,
                                 default = nil)
  if valid_571660 != nil:
    section.add "subscriptionId", valid_571660
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571661 = query.getOrDefault("api-version")
  valid_571661 = validateParameter(valid_571661, JString, required = true,
                                 default = nil)
  if valid_571661 != nil:
    section.add "api-version", valid_571661
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571662: Call_WebAppsListPublicCertificatesSlot_571654;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get public certificates for an app or a deployment slot.
  ## 
  let valid = call_571662.validator(path, query, header, formData, body)
  let scheme = call_571662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571662.url(scheme.get, call_571662.host, call_571662.base,
                         call_571662.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571662, url, valid)

proc call*(call_571663: Call_WebAppsListPublicCertificatesSlot_571654;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListPublicCertificatesSlot
  ## Get public certificates for an app or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571664 = newJObject()
  var query_571665 = newJObject()
  add(path_571664, "resourceGroupName", newJString(resourceGroupName))
  add(query_571665, "api-version", newJString(apiVersion))
  add(path_571664, "name", newJString(name))
  add(path_571664, "slot", newJString(slot))
  add(path_571664, "subscriptionId", newJString(subscriptionId))
  result = call_571663.call(path_571664, query_571665, nil, nil, nil)

var webAppsListPublicCertificatesSlot* = Call_WebAppsListPublicCertificatesSlot_571654(
    name: "webAppsListPublicCertificatesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates",
    validator: validate_WebAppsListPublicCertificatesSlot_571655, base: "",
    url: url_WebAppsListPublicCertificatesSlot_571656, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdatePublicCertificateSlot_571679 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdatePublicCertificateSlot_571681(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdatePublicCertificateSlot_571680(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571682 = path.getOrDefault("resourceGroupName")
  valid_571682 = validateParameter(valid_571682, JString, required = true,
                                 default = nil)
  if valid_571682 != nil:
    section.add "resourceGroupName", valid_571682
  var valid_571683 = path.getOrDefault("name")
  valid_571683 = validateParameter(valid_571683, JString, required = true,
                                 default = nil)
  if valid_571683 != nil:
    section.add "name", valid_571683
  var valid_571684 = path.getOrDefault("slot")
  valid_571684 = validateParameter(valid_571684, JString, required = true,
                                 default = nil)
  if valid_571684 != nil:
    section.add "slot", valid_571684
  var valid_571685 = path.getOrDefault("subscriptionId")
  valid_571685 = validateParameter(valid_571685, JString, required = true,
                                 default = nil)
  if valid_571685 != nil:
    section.add "subscriptionId", valid_571685
  var valid_571686 = path.getOrDefault("publicCertificateName")
  valid_571686 = validateParameter(valid_571686, JString, required = true,
                                 default = nil)
  if valid_571686 != nil:
    section.add "publicCertificateName", valid_571686
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571687 = query.getOrDefault("api-version")
  valid_571687 = validateParameter(valid_571687, JString, required = true,
                                 default = nil)
  if valid_571687 != nil:
    section.add "api-version", valid_571687
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571689: Call_WebAppsCreateOrUpdatePublicCertificateSlot_571679;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Creates a hostname binding for an app.
  ## 
  let valid = call_571689.validator(path, query, header, formData, body)
  let scheme = call_571689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571689.url(scheme.get, call_571689.host, call_571689.base,
                         call_571689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571689, url, valid)

proc call*(call_571690: Call_WebAppsCreateOrUpdatePublicCertificateSlot_571679;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string;
          publicCertificate: JsonNode): Recallable =
  ## webAppsCreateOrUpdatePublicCertificateSlot
  ## Creates a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  ##   publicCertificate: JObject (required)
  ##                    : Public certificate details. This is the JSON representation of a PublicCertificate object.
  var path_571691 = newJObject()
  var query_571692 = newJObject()
  var body_571693 = newJObject()
  add(path_571691, "resourceGroupName", newJString(resourceGroupName))
  add(query_571692, "api-version", newJString(apiVersion))
  add(path_571691, "name", newJString(name))
  add(path_571691, "slot", newJString(slot))
  add(path_571691, "subscriptionId", newJString(subscriptionId))
  add(path_571691, "publicCertificateName", newJString(publicCertificateName))
  if publicCertificate != nil:
    body_571693 = publicCertificate
  result = call_571690.call(path_571691, query_571692, nil, nil, body_571693)

var webAppsCreateOrUpdatePublicCertificateSlot* = Call_WebAppsCreateOrUpdatePublicCertificateSlot_571679(
    name: "webAppsCreateOrUpdatePublicCertificateSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsCreateOrUpdatePublicCertificateSlot_571680,
    base: "", url: url_WebAppsCreateOrUpdatePublicCertificateSlot_571681,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetPublicCertificateSlot_571666 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetPublicCertificateSlot_571668(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetPublicCertificateSlot_571667(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571669 = path.getOrDefault("resourceGroupName")
  valid_571669 = validateParameter(valid_571669, JString, required = true,
                                 default = nil)
  if valid_571669 != nil:
    section.add "resourceGroupName", valid_571669
  var valid_571670 = path.getOrDefault("name")
  valid_571670 = validateParameter(valid_571670, JString, required = true,
                                 default = nil)
  if valid_571670 != nil:
    section.add "name", valid_571670
  var valid_571671 = path.getOrDefault("slot")
  valid_571671 = validateParameter(valid_571671, JString, required = true,
                                 default = nil)
  if valid_571671 != nil:
    section.add "slot", valid_571671
  var valid_571672 = path.getOrDefault("subscriptionId")
  valid_571672 = validateParameter(valid_571672, JString, required = true,
                                 default = nil)
  if valid_571672 != nil:
    section.add "subscriptionId", valid_571672
  var valid_571673 = path.getOrDefault("publicCertificateName")
  valid_571673 = validateParameter(valid_571673, JString, required = true,
                                 default = nil)
  if valid_571673 != nil:
    section.add "publicCertificateName", valid_571673
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571674 = query.getOrDefault("api-version")
  valid_571674 = validateParameter(valid_571674, JString, required = true,
                                 default = nil)
  if valid_571674 != nil:
    section.add "api-version", valid_571674
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571675: Call_WebAppsGetPublicCertificateSlot_571666;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ## 
  let valid = call_571675.validator(path, query, header, formData, body)
  let scheme = call_571675.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571675.url(scheme.get, call_571675.host, call_571675.base,
                         call_571675.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571675, url, valid)

proc call*(call_571676: Call_WebAppsGetPublicCertificateSlot_571666;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsGetPublicCertificateSlot
  ## Get the named public certificate for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_571677 = newJObject()
  var query_571678 = newJObject()
  add(path_571677, "resourceGroupName", newJString(resourceGroupName))
  add(query_571678, "api-version", newJString(apiVersion))
  add(path_571677, "name", newJString(name))
  add(path_571677, "slot", newJString(slot))
  add(path_571677, "subscriptionId", newJString(subscriptionId))
  add(path_571677, "publicCertificateName", newJString(publicCertificateName))
  result = call_571676.call(path_571677, query_571678, nil, nil, nil)

var webAppsGetPublicCertificateSlot* = Call_WebAppsGetPublicCertificateSlot_571666(
    name: "webAppsGetPublicCertificateSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsGetPublicCertificateSlot_571667, base: "",
    url: url_WebAppsGetPublicCertificateSlot_571668, schemes: {Scheme.Https})
type
  Call_WebAppsDeletePublicCertificateSlot_571694 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeletePublicCertificateSlot_571696(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "publicCertificateName" in path,
        "`publicCertificateName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publicCertificates/"),
               (kind: VariableSegment, value: "publicCertificateName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeletePublicCertificateSlot_571695(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a hostname binding for an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: JString (required)
  ##                        : Public certificate name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571697 = path.getOrDefault("resourceGroupName")
  valid_571697 = validateParameter(valid_571697, JString, required = true,
                                 default = nil)
  if valid_571697 != nil:
    section.add "resourceGroupName", valid_571697
  var valid_571698 = path.getOrDefault("name")
  valid_571698 = validateParameter(valid_571698, JString, required = true,
                                 default = nil)
  if valid_571698 != nil:
    section.add "name", valid_571698
  var valid_571699 = path.getOrDefault("slot")
  valid_571699 = validateParameter(valid_571699, JString, required = true,
                                 default = nil)
  if valid_571699 != nil:
    section.add "slot", valid_571699
  var valid_571700 = path.getOrDefault("subscriptionId")
  valid_571700 = validateParameter(valid_571700, JString, required = true,
                                 default = nil)
  if valid_571700 != nil:
    section.add "subscriptionId", valid_571700
  var valid_571701 = path.getOrDefault("publicCertificateName")
  valid_571701 = validateParameter(valid_571701, JString, required = true,
                                 default = nil)
  if valid_571701 != nil:
    section.add "publicCertificateName", valid_571701
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571702 = query.getOrDefault("api-version")
  valid_571702 = validateParameter(valid_571702, JString, required = true,
                                 default = nil)
  if valid_571702 != nil:
    section.add "api-version", valid_571702
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571703: Call_WebAppsDeletePublicCertificateSlot_571694;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a hostname binding for an app.
  ## 
  let valid = call_571703.validator(path, query, header, formData, body)
  let scheme = call_571703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571703.url(scheme.get, call_571703.host, call_571703.base,
                         call_571703.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571703, url, valid)

proc call*(call_571704: Call_WebAppsDeletePublicCertificateSlot_571694;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publicCertificateName: string): Recallable =
  ## webAppsDeletePublicCertificateSlot
  ## Deletes a hostname binding for an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publicCertificateName: string (required)
  ##                        : Public certificate name.
  var path_571705 = newJObject()
  var query_571706 = newJObject()
  add(path_571705, "resourceGroupName", newJString(resourceGroupName))
  add(query_571706, "api-version", newJString(apiVersion))
  add(path_571705, "name", newJString(name))
  add(path_571705, "slot", newJString(slot))
  add(path_571705, "subscriptionId", newJString(subscriptionId))
  add(path_571705, "publicCertificateName", newJString(publicCertificateName))
  result = call_571704.call(path_571705, query_571706, nil, nil, nil)

var webAppsDeletePublicCertificateSlot* = Call_WebAppsDeletePublicCertificateSlot_571694(
    name: "webAppsDeletePublicCertificateSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    validator: validate_WebAppsDeletePublicCertificateSlot_571695, base: "",
    url: url_WebAppsDeletePublicCertificateSlot_571696, schemes: {Scheme.Https})
type
  Call_WebAppsListPublishingProfileXmlWithSecretsSlot_571707 = ref object of OpenApiRestCall_567666
proc url_WebAppsListPublishingProfileXmlWithSecretsSlot_571709(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/publishxml")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListPublishingProfileXmlWithSecretsSlot_571708(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571710 = path.getOrDefault("resourceGroupName")
  valid_571710 = validateParameter(valid_571710, JString, required = true,
                                 default = nil)
  if valid_571710 != nil:
    section.add "resourceGroupName", valid_571710
  var valid_571711 = path.getOrDefault("name")
  valid_571711 = validateParameter(valid_571711, JString, required = true,
                                 default = nil)
  if valid_571711 != nil:
    section.add "name", valid_571711
  var valid_571712 = path.getOrDefault("slot")
  valid_571712 = validateParameter(valid_571712, JString, required = true,
                                 default = nil)
  if valid_571712 != nil:
    section.add "slot", valid_571712
  var valid_571713 = path.getOrDefault("subscriptionId")
  valid_571713 = validateParameter(valid_571713, JString, required = true,
                                 default = nil)
  if valid_571713 != nil:
    section.add "subscriptionId", valid_571713
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571714 = query.getOrDefault("api-version")
  valid_571714 = validateParameter(valid_571714, JString, required = true,
                                 default = nil)
  if valid_571714 != nil:
    section.add "api-version", valid_571714
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571716: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_571707;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ## 
  let valid = call_571716.validator(path, query, header, formData, body)
  let scheme = call_571716.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571716.url(scheme.get, call_571716.host, call_571716.base,
                         call_571716.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571716, url, valid)

proc call*(call_571717: Call_WebAppsListPublishingProfileXmlWithSecretsSlot_571707;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; publishingProfileOptions: JsonNode): Recallable =
  ## webAppsListPublishingProfileXmlWithSecretsSlot
  ## Gets the publishing profile for an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   publishingProfileOptions: JObject (required)
  ##                           : Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
  var path_571718 = newJObject()
  var query_571719 = newJObject()
  var body_571720 = newJObject()
  add(path_571718, "resourceGroupName", newJString(resourceGroupName))
  add(query_571719, "api-version", newJString(apiVersion))
  add(path_571718, "name", newJString(name))
  add(path_571718, "slot", newJString(slot))
  add(path_571718, "subscriptionId", newJString(subscriptionId))
  if publishingProfileOptions != nil:
    body_571720 = publishingProfileOptions
  result = call_571717.call(path_571718, query_571719, nil, nil, body_571720)

var webAppsListPublishingProfileXmlWithSecretsSlot* = Call_WebAppsListPublishingProfileXmlWithSecretsSlot_571707(
    name: "webAppsListPublishingProfileXmlWithSecretsSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
    validator: validate_WebAppsListPublishingProfileXmlWithSecretsSlot_571708,
    base: "", url: url_WebAppsListPublishingProfileXmlWithSecretsSlot_571709,
    schemes: {Scheme.Https})
type
  Call_WebAppsResetSlotConfigurationSlot_571721 = ref object of OpenApiRestCall_567666
proc url_WebAppsResetSlotConfigurationSlot_571723(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/resetSlotConfig")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsResetSlotConfigurationSlot_571722(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571724 = path.getOrDefault("resourceGroupName")
  valid_571724 = validateParameter(valid_571724, JString, required = true,
                                 default = nil)
  if valid_571724 != nil:
    section.add "resourceGroupName", valid_571724
  var valid_571725 = path.getOrDefault("name")
  valid_571725 = validateParameter(valid_571725, JString, required = true,
                                 default = nil)
  if valid_571725 != nil:
    section.add "name", valid_571725
  var valid_571726 = path.getOrDefault("slot")
  valid_571726 = validateParameter(valid_571726, JString, required = true,
                                 default = nil)
  if valid_571726 != nil:
    section.add "slot", valid_571726
  var valid_571727 = path.getOrDefault("subscriptionId")
  valid_571727 = validateParameter(valid_571727, JString, required = true,
                                 default = nil)
  if valid_571727 != nil:
    section.add "subscriptionId", valid_571727
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571728 = query.getOrDefault("api-version")
  valid_571728 = validateParameter(valid_571728, JString, required = true,
                                 default = nil)
  if valid_571728 != nil:
    section.add "api-version", valid_571728
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571729: Call_WebAppsResetSlotConfigurationSlot_571721;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ## 
  let valid = call_571729.validator(path, query, header, formData, body)
  let scheme = call_571729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571729.url(scheme.get, call_571729.host, call_571729.base,
                         call_571729.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571729, url, valid)

proc call*(call_571730: Call_WebAppsResetSlotConfigurationSlot_571721;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsResetSlotConfigurationSlot
  ## Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571731 = newJObject()
  var query_571732 = newJObject()
  add(path_571731, "resourceGroupName", newJString(resourceGroupName))
  add(query_571732, "api-version", newJString(apiVersion))
  add(path_571731, "name", newJString(name))
  add(path_571731, "slot", newJString(slot))
  add(path_571731, "subscriptionId", newJString(subscriptionId))
  result = call_571730.call(path_571731, query_571732, nil, nil, nil)

var webAppsResetSlotConfigurationSlot* = Call_WebAppsResetSlotConfigurationSlot_571721(
    name: "webAppsResetSlotConfigurationSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
    validator: validate_WebAppsResetSlotConfigurationSlot_571722, base: "",
    url: url_WebAppsResetSlotConfigurationSlot_571723, schemes: {Scheme.Https})
type
  Call_WebAppsRestartSlot_571733 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestartSlot_571735(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restart")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestartSlot_571734(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571736 = path.getOrDefault("resourceGroupName")
  valid_571736 = validateParameter(valid_571736, JString, required = true,
                                 default = nil)
  if valid_571736 != nil:
    section.add "resourceGroupName", valid_571736
  var valid_571737 = path.getOrDefault("name")
  valid_571737 = validateParameter(valid_571737, JString, required = true,
                                 default = nil)
  if valid_571737 != nil:
    section.add "name", valid_571737
  var valid_571738 = path.getOrDefault("slot")
  valid_571738 = validateParameter(valid_571738, JString, required = true,
                                 default = nil)
  if valid_571738 != nil:
    section.add "slot", valid_571738
  var valid_571739 = path.getOrDefault("subscriptionId")
  valid_571739 = validateParameter(valid_571739, JString, required = true,
                                 default = nil)
  if valid_571739 != nil:
    section.add "subscriptionId", valid_571739
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   synchronous: JBool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: JBool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571740 = query.getOrDefault("api-version")
  valid_571740 = validateParameter(valid_571740, JString, required = true,
                                 default = nil)
  if valid_571740 != nil:
    section.add "api-version", valid_571740
  var valid_571741 = query.getOrDefault("synchronous")
  valid_571741 = validateParameter(valid_571741, JBool, required = false, default = nil)
  if valid_571741 != nil:
    section.add "synchronous", valid_571741
  var valid_571742 = query.getOrDefault("softRestart")
  valid_571742 = validateParameter(valid_571742, JBool, required = false, default = nil)
  if valid_571742 != nil:
    section.add "softRestart", valid_571742
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571743: Call_WebAppsRestartSlot_571733; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restarts an app (or deployment slot, if specified).
  ## 
  let valid = call_571743.validator(path, query, header, formData, body)
  let scheme = call_571743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571743.url(scheme.get, call_571743.host, call_571743.base,
                         call_571743.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571743, url, valid)

proc call*(call_571744: Call_WebAppsRestartSlot_571733; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          synchronous: bool = false; softRestart: bool = false): Recallable =
  ## webAppsRestartSlot
  ## Restarts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   synchronous: bool
  ##              : Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
  ##   softRestart: bool
  ##              : Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
  var path_571745 = newJObject()
  var query_571746 = newJObject()
  add(path_571745, "resourceGroupName", newJString(resourceGroupName))
  add(query_571746, "api-version", newJString(apiVersion))
  add(path_571745, "name", newJString(name))
  add(path_571745, "slot", newJString(slot))
  add(path_571745, "subscriptionId", newJString(subscriptionId))
  add(query_571746, "synchronous", newJBool(synchronous))
  add(query_571746, "softRestart", newJBool(softRestart))
  result = call_571744.call(path_571745, query_571746, nil, nil, nil)

var webAppsRestartSlot* = Call_WebAppsRestartSlot_571733(
    name: "webAppsRestartSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
    validator: validate_WebAppsRestartSlot_571734, base: "",
    url: url_WebAppsRestartSlot_571735, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromBackupBlobSlot_571747 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestoreFromBackupBlobSlot_571749(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restoreFromBackupBlob")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromBackupBlobSlot_571748(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571750 = path.getOrDefault("resourceGroupName")
  valid_571750 = validateParameter(valid_571750, JString, required = true,
                                 default = nil)
  if valid_571750 != nil:
    section.add "resourceGroupName", valid_571750
  var valid_571751 = path.getOrDefault("name")
  valid_571751 = validateParameter(valid_571751, JString, required = true,
                                 default = nil)
  if valid_571751 != nil:
    section.add "name", valid_571751
  var valid_571752 = path.getOrDefault("slot")
  valid_571752 = validateParameter(valid_571752, JString, required = true,
                                 default = nil)
  if valid_571752 != nil:
    section.add "slot", valid_571752
  var valid_571753 = path.getOrDefault("subscriptionId")
  valid_571753 = validateParameter(valid_571753, JString, required = true,
                                 default = nil)
  if valid_571753 != nil:
    section.add "subscriptionId", valid_571753
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571754 = query.getOrDefault("api-version")
  valid_571754 = validateParameter(valid_571754, JString, required = true,
                                 default = nil)
  if valid_571754 != nil:
    section.add "api-version", valid_571754
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   request: JObject (required)
  ##          : Information on restore request .
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571756: Call_WebAppsRestoreFromBackupBlobSlot_571747;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Restores an app from a backup blob in Azure Storage.
  ## 
  let valid = call_571756.validator(path, query, header, formData, body)
  let scheme = call_571756.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571756.url(scheme.get, call_571756.host, call_571756.base,
                         call_571756.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571756, url, valid)

proc call*(call_571757: Call_WebAppsRestoreFromBackupBlobSlot_571747;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; request: JsonNode): Recallable =
  ## webAppsRestoreFromBackupBlobSlot
  ## Restores an app from a backup blob in Azure Storage.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   request: JObject (required)
  ##          : Information on restore request .
  var path_571758 = newJObject()
  var query_571759 = newJObject()
  var body_571760 = newJObject()
  add(path_571758, "resourceGroupName", newJString(resourceGroupName))
  add(query_571759, "api-version", newJString(apiVersion))
  add(path_571758, "name", newJString(name))
  add(path_571758, "slot", newJString(slot))
  add(path_571758, "subscriptionId", newJString(subscriptionId))
  if request != nil:
    body_571760 = request
  result = call_571757.call(path_571758, query_571759, nil, nil, body_571760)

var webAppsRestoreFromBackupBlobSlot* = Call_WebAppsRestoreFromBackupBlobSlot_571747(
    name: "webAppsRestoreFromBackupBlobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob",
    validator: validate_WebAppsRestoreFromBackupBlobSlot_571748, base: "",
    url: url_WebAppsRestoreFromBackupBlobSlot_571749, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreFromDeletedAppSlot_571761 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestoreFromDeletedAppSlot_571763(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restoreFromDeletedApp")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreFromDeletedAppSlot_571762(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a deleted web app to this web app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571764 = path.getOrDefault("resourceGroupName")
  valid_571764 = validateParameter(valid_571764, JString, required = true,
                                 default = nil)
  if valid_571764 != nil:
    section.add "resourceGroupName", valid_571764
  var valid_571765 = path.getOrDefault("name")
  valid_571765 = validateParameter(valid_571765, JString, required = true,
                                 default = nil)
  if valid_571765 != nil:
    section.add "name", valid_571765
  var valid_571766 = path.getOrDefault("slot")
  valid_571766 = validateParameter(valid_571766, JString, required = true,
                                 default = nil)
  if valid_571766 != nil:
    section.add "slot", valid_571766
  var valid_571767 = path.getOrDefault("subscriptionId")
  valid_571767 = validateParameter(valid_571767, JString, required = true,
                                 default = nil)
  if valid_571767 != nil:
    section.add "subscriptionId", valid_571767
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571768 = query.getOrDefault("api-version")
  valid_571768 = validateParameter(valid_571768, JString, required = true,
                                 default = nil)
  if valid_571768 != nil:
    section.add "api-version", valid_571768
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571770: Call_WebAppsRestoreFromDeletedAppSlot_571761;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Restores a deleted web app to this web app.
  ## 
  let valid = call_571770.validator(path, query, header, formData, body)
  let scheme = call_571770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571770.url(scheme.get, call_571770.host, call_571770.base,
                         call_571770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571770, url, valid)

proc call*(call_571771: Call_WebAppsRestoreFromDeletedAppSlot_571761;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; restoreRequest: JsonNode): Recallable =
  ## webAppsRestoreFromDeletedAppSlot
  ## Restores a deleted web app to this web app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   restoreRequest: JObject (required)
  ##                 : Deleted web app restore information.
  var path_571772 = newJObject()
  var query_571773 = newJObject()
  var body_571774 = newJObject()
  add(path_571772, "resourceGroupName", newJString(resourceGroupName))
  add(query_571773, "api-version", newJString(apiVersion))
  add(path_571772, "name", newJString(name))
  add(path_571772, "slot", newJString(slot))
  add(path_571772, "subscriptionId", newJString(subscriptionId))
  if restoreRequest != nil:
    body_571774 = restoreRequest
  result = call_571771.call(path_571772, query_571773, nil, nil, body_571774)

var webAppsRestoreFromDeletedAppSlot* = Call_WebAppsRestoreFromDeletedAppSlot_571761(
    name: "webAppsRestoreFromDeletedAppSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp",
    validator: validate_WebAppsRestoreFromDeletedAppSlot_571762, base: "",
    url: url_WebAppsRestoreFromDeletedAppSlot_571763, schemes: {Scheme.Https})
type
  Call_WebAppsRestoreSnapshotSlot_571775 = ref object of OpenApiRestCall_567666
proc url_WebAppsRestoreSnapshotSlot_571777(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/restoreSnapshot")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRestoreSnapshotSlot_571776(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Restores a web app from a snapshot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571778 = path.getOrDefault("resourceGroupName")
  valid_571778 = validateParameter(valid_571778, JString, required = true,
                                 default = nil)
  if valid_571778 != nil:
    section.add "resourceGroupName", valid_571778
  var valid_571779 = path.getOrDefault("name")
  valid_571779 = validateParameter(valid_571779, JString, required = true,
                                 default = nil)
  if valid_571779 != nil:
    section.add "name", valid_571779
  var valid_571780 = path.getOrDefault("slot")
  valid_571780 = validateParameter(valid_571780, JString, required = true,
                                 default = nil)
  if valid_571780 != nil:
    section.add "slot", valid_571780
  var valid_571781 = path.getOrDefault("subscriptionId")
  valid_571781 = validateParameter(valid_571781, JString, required = true,
                                 default = nil)
  if valid_571781 != nil:
    section.add "subscriptionId", valid_571781
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571782 = query.getOrDefault("api-version")
  valid_571782 = validateParameter(valid_571782, JString, required = true,
                                 default = nil)
  if valid_571782 != nil:
    section.add "api-version", valid_571782
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571784: Call_WebAppsRestoreSnapshotSlot_571775; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Restores a web app from a snapshot.
  ## 
  let valid = call_571784.validator(path, query, header, formData, body)
  let scheme = call_571784.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571784.url(scheme.get, call_571784.host, call_571784.base,
                         call_571784.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571784, url, valid)

proc call*(call_571785: Call_WebAppsRestoreSnapshotSlot_571775;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; restoreRequest: JsonNode): Recallable =
  ## webAppsRestoreSnapshotSlot
  ## Restores a web app from a snapshot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   restoreRequest: JObject (required)
  ##                 : Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
  var path_571786 = newJObject()
  var query_571787 = newJObject()
  var body_571788 = newJObject()
  add(path_571786, "resourceGroupName", newJString(resourceGroupName))
  add(query_571787, "api-version", newJString(apiVersion))
  add(path_571786, "name", newJString(name))
  add(path_571786, "slot", newJString(slot))
  add(path_571786, "subscriptionId", newJString(subscriptionId))
  if restoreRequest != nil:
    body_571788 = restoreRequest
  result = call_571785.call(path_571786, query_571787, nil, nil, body_571788)

var webAppsRestoreSnapshotSlot* = Call_WebAppsRestoreSnapshotSlot_571775(
    name: "webAppsRestoreSnapshotSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot",
    validator: validate_WebAppsRestoreSnapshotSlot_571776, base: "",
    url: url_WebAppsRestoreSnapshotSlot_571777, schemes: {Scheme.Https})
type
  Call_WebAppsListSiteExtensionsSlot_571789 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSiteExtensionsSlot_571791(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSiteExtensionsSlot_571790(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571792 = path.getOrDefault("resourceGroupName")
  valid_571792 = validateParameter(valid_571792, JString, required = true,
                                 default = nil)
  if valid_571792 != nil:
    section.add "resourceGroupName", valid_571792
  var valid_571793 = path.getOrDefault("name")
  valid_571793 = validateParameter(valid_571793, JString, required = true,
                                 default = nil)
  if valid_571793 != nil:
    section.add "name", valid_571793
  var valid_571794 = path.getOrDefault("slot")
  valid_571794 = validateParameter(valid_571794, JString, required = true,
                                 default = nil)
  if valid_571794 != nil:
    section.add "slot", valid_571794
  var valid_571795 = path.getOrDefault("subscriptionId")
  valid_571795 = validateParameter(valid_571795, JString, required = true,
                                 default = nil)
  if valid_571795 != nil:
    section.add "subscriptionId", valid_571795
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571796 = query.getOrDefault("api-version")
  valid_571796 = validateParameter(valid_571796, JString, required = true,
                                 default = nil)
  if valid_571796 != nil:
    section.add "api-version", valid_571796
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571797: Call_WebAppsListSiteExtensionsSlot_571789; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get list of siteextensions for a web site, or a deployment slot.
  ## 
  let valid = call_571797.validator(path, query, header, formData, body)
  let scheme = call_571797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571797.url(scheme.get, call_571797.host, call_571797.base,
                         call_571797.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571797, url, valid)

proc call*(call_571798: Call_WebAppsListSiteExtensionsSlot_571789;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSiteExtensionsSlot
  ## Get list of siteextensions for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571799 = newJObject()
  var query_571800 = newJObject()
  add(path_571799, "resourceGroupName", newJString(resourceGroupName))
  add(query_571800, "api-version", newJString(apiVersion))
  add(path_571799, "name", newJString(name))
  add(path_571799, "slot", newJString(slot))
  add(path_571799, "subscriptionId", newJString(subscriptionId))
  result = call_571798.call(path_571799, query_571800, nil, nil, nil)

var webAppsListSiteExtensionsSlot* = Call_WebAppsListSiteExtensionsSlot_571789(
    name: "webAppsListSiteExtensionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions",
    validator: validate_WebAppsListSiteExtensionsSlot_571790, base: "",
    url: url_WebAppsListSiteExtensionsSlot_571791, schemes: {Scheme.Https})
type
  Call_WebAppsInstallSiteExtensionSlot_571814 = ref object of OpenApiRestCall_567666
proc url_WebAppsInstallSiteExtensionSlot_571816(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsInstallSiteExtensionSlot_571815(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571817 = path.getOrDefault("resourceGroupName")
  valid_571817 = validateParameter(valid_571817, JString, required = true,
                                 default = nil)
  if valid_571817 != nil:
    section.add "resourceGroupName", valid_571817
  var valid_571818 = path.getOrDefault("name")
  valid_571818 = validateParameter(valid_571818, JString, required = true,
                                 default = nil)
  if valid_571818 != nil:
    section.add "name", valid_571818
  var valid_571819 = path.getOrDefault("slot")
  valid_571819 = validateParameter(valid_571819, JString, required = true,
                                 default = nil)
  if valid_571819 != nil:
    section.add "slot", valid_571819
  var valid_571820 = path.getOrDefault("subscriptionId")
  valid_571820 = validateParameter(valid_571820, JString, required = true,
                                 default = nil)
  if valid_571820 != nil:
    section.add "subscriptionId", valid_571820
  var valid_571821 = path.getOrDefault("siteExtensionId")
  valid_571821 = validateParameter(valid_571821, JString, required = true,
                                 default = nil)
  if valid_571821 != nil:
    section.add "siteExtensionId", valid_571821
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571822 = query.getOrDefault("api-version")
  valid_571822 = validateParameter(valid_571822, JString, required = true,
                                 default = nil)
  if valid_571822 != nil:
    section.add "api-version", valid_571822
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571823: Call_WebAppsInstallSiteExtensionSlot_571814;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Install site extension on a web site, or a deployment slot.
  ## 
  let valid = call_571823.validator(path, query, header, formData, body)
  let scheme = call_571823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571823.url(scheme.get, call_571823.host, call_571823.base,
                         call_571823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571823, url, valid)

proc call*(call_571824: Call_WebAppsInstallSiteExtensionSlot_571814;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsInstallSiteExtensionSlot
  ## Install site extension on a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_571825 = newJObject()
  var query_571826 = newJObject()
  add(path_571825, "resourceGroupName", newJString(resourceGroupName))
  add(query_571826, "api-version", newJString(apiVersion))
  add(path_571825, "name", newJString(name))
  add(path_571825, "slot", newJString(slot))
  add(path_571825, "subscriptionId", newJString(subscriptionId))
  add(path_571825, "siteExtensionId", newJString(siteExtensionId))
  result = call_571824.call(path_571825, query_571826, nil, nil, nil)

var webAppsInstallSiteExtensionSlot* = Call_WebAppsInstallSiteExtensionSlot_571814(
    name: "webAppsInstallSiteExtensionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsInstallSiteExtensionSlot_571815, base: "",
    url: url_WebAppsInstallSiteExtensionSlot_571816, schemes: {Scheme.Https})
type
  Call_WebAppsGetSiteExtensionSlot_571801 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSiteExtensionSlot_571803(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSiteExtensionSlot_571802(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571804 = path.getOrDefault("resourceGroupName")
  valid_571804 = validateParameter(valid_571804, JString, required = true,
                                 default = nil)
  if valid_571804 != nil:
    section.add "resourceGroupName", valid_571804
  var valid_571805 = path.getOrDefault("name")
  valid_571805 = validateParameter(valid_571805, JString, required = true,
                                 default = nil)
  if valid_571805 != nil:
    section.add "name", valid_571805
  var valid_571806 = path.getOrDefault("slot")
  valid_571806 = validateParameter(valid_571806, JString, required = true,
                                 default = nil)
  if valid_571806 != nil:
    section.add "slot", valid_571806
  var valid_571807 = path.getOrDefault("subscriptionId")
  valid_571807 = validateParameter(valid_571807, JString, required = true,
                                 default = nil)
  if valid_571807 != nil:
    section.add "subscriptionId", valid_571807
  var valid_571808 = path.getOrDefault("siteExtensionId")
  valid_571808 = validateParameter(valid_571808, JString, required = true,
                                 default = nil)
  if valid_571808 != nil:
    section.add "siteExtensionId", valid_571808
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571809 = query.getOrDefault("api-version")
  valid_571809 = validateParameter(valid_571809, JString, required = true,
                                 default = nil)
  if valid_571809 != nil:
    section.add "api-version", valid_571809
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571810: Call_WebAppsGetSiteExtensionSlot_571801; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ## 
  let valid = call_571810.validator(path, query, header, formData, body)
  let scheme = call_571810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571810.url(scheme.get, call_571810.host, call_571810.base,
                         call_571810.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571810, url, valid)

proc call*(call_571811: Call_WebAppsGetSiteExtensionSlot_571801;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsGetSiteExtensionSlot
  ## Get site extension information by its ID for a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_571812 = newJObject()
  var query_571813 = newJObject()
  add(path_571812, "resourceGroupName", newJString(resourceGroupName))
  add(query_571813, "api-version", newJString(apiVersion))
  add(path_571812, "name", newJString(name))
  add(path_571812, "slot", newJString(slot))
  add(path_571812, "subscriptionId", newJString(subscriptionId))
  add(path_571812, "siteExtensionId", newJString(siteExtensionId))
  result = call_571811.call(path_571812, query_571813, nil, nil, nil)

var webAppsGetSiteExtensionSlot* = Call_WebAppsGetSiteExtensionSlot_571801(
    name: "webAppsGetSiteExtensionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsGetSiteExtensionSlot_571802, base: "",
    url: url_WebAppsGetSiteExtensionSlot_571803, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSiteExtensionSlot_571827 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSiteExtensionSlot_571829(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "siteExtensionId" in path, "`siteExtensionId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/siteextensions/"),
               (kind: VariableSegment, value: "siteExtensionId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSiteExtensionSlot_571828(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: JString (required)
  ##                  : Site extension name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571830 = path.getOrDefault("resourceGroupName")
  valid_571830 = validateParameter(valid_571830, JString, required = true,
                                 default = nil)
  if valid_571830 != nil:
    section.add "resourceGroupName", valid_571830
  var valid_571831 = path.getOrDefault("name")
  valid_571831 = validateParameter(valid_571831, JString, required = true,
                                 default = nil)
  if valid_571831 != nil:
    section.add "name", valid_571831
  var valid_571832 = path.getOrDefault("slot")
  valid_571832 = validateParameter(valid_571832, JString, required = true,
                                 default = nil)
  if valid_571832 != nil:
    section.add "slot", valid_571832
  var valid_571833 = path.getOrDefault("subscriptionId")
  valid_571833 = validateParameter(valid_571833, JString, required = true,
                                 default = nil)
  if valid_571833 != nil:
    section.add "subscriptionId", valid_571833
  var valid_571834 = path.getOrDefault("siteExtensionId")
  valid_571834 = validateParameter(valid_571834, JString, required = true,
                                 default = nil)
  if valid_571834 != nil:
    section.add "siteExtensionId", valid_571834
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571835 = query.getOrDefault("api-version")
  valid_571835 = validateParameter(valid_571835, JString, required = true,
                                 default = nil)
  if valid_571835 != nil:
    section.add "api-version", valid_571835
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571836: Call_WebAppsDeleteSiteExtensionSlot_571827; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Remove a site extension from a web site, or a deployment slot.
  ## 
  let valid = call_571836.validator(path, query, header, formData, body)
  let scheme = call_571836.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571836.url(scheme.get, call_571836.host, call_571836.base,
                         call_571836.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571836, url, valid)

proc call*(call_571837: Call_WebAppsDeleteSiteExtensionSlot_571827;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteExtensionId: string): Recallable =
  ## webAppsDeleteSiteExtensionSlot
  ## Remove a site extension from a web site, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteExtensionId: string (required)
  ##                  : Site extension name.
  var path_571838 = newJObject()
  var query_571839 = newJObject()
  add(path_571838, "resourceGroupName", newJString(resourceGroupName))
  add(query_571839, "api-version", newJString(apiVersion))
  add(path_571838, "name", newJString(name))
  add(path_571838, "slot", newJString(slot))
  add(path_571838, "subscriptionId", newJString(subscriptionId))
  add(path_571838, "siteExtensionId", newJString(siteExtensionId))
  result = call_571837.call(path_571838, query_571839, nil, nil, nil)

var webAppsDeleteSiteExtensionSlot* = Call_WebAppsDeleteSiteExtensionSlot_571827(
    name: "webAppsDeleteSiteExtensionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    validator: validate_WebAppsDeleteSiteExtensionSlot_571828, base: "",
    url: url_WebAppsDeleteSiteExtensionSlot_571829, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesSlot_571840 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSlotDifferencesSlot_571842(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesSlot_571841(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571843 = path.getOrDefault("resourceGroupName")
  valid_571843 = validateParameter(valid_571843, JString, required = true,
                                 default = nil)
  if valid_571843 != nil:
    section.add "resourceGroupName", valid_571843
  var valid_571844 = path.getOrDefault("name")
  valid_571844 = validateParameter(valid_571844, JString, required = true,
                                 default = nil)
  if valid_571844 != nil:
    section.add "name", valid_571844
  var valid_571845 = path.getOrDefault("slot")
  valid_571845 = validateParameter(valid_571845, JString, required = true,
                                 default = nil)
  if valid_571845 != nil:
    section.add "slot", valid_571845
  var valid_571846 = path.getOrDefault("subscriptionId")
  valid_571846 = validateParameter(valid_571846, JString, required = true,
                                 default = nil)
  if valid_571846 != nil:
    section.add "subscriptionId", valid_571846
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571847 = query.getOrDefault("api-version")
  valid_571847 = validateParameter(valid_571847, JString, required = true,
                                 default = nil)
  if valid_571847 != nil:
    section.add "api-version", valid_571847
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571849: Call_WebAppsListSlotDifferencesSlot_571840; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_571849.validator(path, query, header, formData, body)
  let scheme = call_571849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571849.url(scheme.get, call_571849.host, call_571849.base,
                         call_571849.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571849, url, valid)

proc call*(call_571850: Call_WebAppsListSlotDifferencesSlot_571840;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsListSlotDifferencesSlot
  ## Get the difference in configuration settings between two web app slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_571851 = newJObject()
  var query_571852 = newJObject()
  var body_571853 = newJObject()
  add(path_571851, "resourceGroupName", newJString(resourceGroupName))
  add(query_571852, "api-version", newJString(apiVersion))
  add(path_571851, "name", newJString(name))
  add(path_571851, "slot", newJString(slot))
  add(path_571851, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_571853 = slotSwapEntity
  result = call_571850.call(path_571851, query_571852, nil, nil, body_571853)

var webAppsListSlotDifferencesSlot* = Call_WebAppsListSlotDifferencesSlot_571840(
    name: "webAppsListSlotDifferencesSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesSlot_571841, base: "",
    url: url_WebAppsListSlotDifferencesSlot_571842, schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotSlot_571854 = ref object of OpenApiRestCall_567666
proc url_WebAppsSwapSlotSlot_571856(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotSlot_571855(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571857 = path.getOrDefault("resourceGroupName")
  valid_571857 = validateParameter(valid_571857, JString, required = true,
                                 default = nil)
  if valid_571857 != nil:
    section.add "resourceGroupName", valid_571857
  var valid_571858 = path.getOrDefault("name")
  valid_571858 = validateParameter(valid_571858, JString, required = true,
                                 default = nil)
  if valid_571858 != nil:
    section.add "name", valid_571858
  var valid_571859 = path.getOrDefault("slot")
  valid_571859 = validateParameter(valid_571859, JString, required = true,
                                 default = nil)
  if valid_571859 != nil:
    section.add "slot", valid_571859
  var valid_571860 = path.getOrDefault("subscriptionId")
  valid_571860 = validateParameter(valid_571860, JString, required = true,
                                 default = nil)
  if valid_571860 != nil:
    section.add "subscriptionId", valid_571860
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571861 = query.getOrDefault("api-version")
  valid_571861 = validateParameter(valid_571861, JString, required = true,
                                 default = nil)
  if valid_571861 != nil:
    section.add "api-version", valid_571861
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571863: Call_WebAppsSwapSlotSlot_571854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_571863.validator(path, query, header, formData, body)
  let scheme = call_571863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571863.url(scheme.get, call_571863.host, call_571863.base,
                         call_571863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571863, url, valid)

proc call*(call_571864: Call_WebAppsSwapSlotSlot_571854; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string;
          slotSwapEntity: JsonNode): Recallable =
  ## webAppsSwapSlotSlot
  ## Swaps two deployment slots of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_571865 = newJObject()
  var query_571866 = newJObject()
  var body_571867 = newJObject()
  add(path_571865, "resourceGroupName", newJString(resourceGroupName))
  add(query_571866, "api-version", newJString(apiVersion))
  add(path_571865, "name", newJString(name))
  add(path_571865, "slot", newJString(slot))
  add(path_571865, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_571867 = slotSwapEntity
  result = call_571864.call(path_571865, query_571866, nil, nil, body_571867)

var webAppsSwapSlotSlot* = Call_WebAppsSwapSlotSlot_571854(
    name: "webAppsSwapSlotSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
    validator: validate_WebAppsSwapSlotSlot_571855, base: "",
    url: url_WebAppsSwapSlotSlot_571856, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsSlot_571868 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSnapshotsSlot_571870(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsSlot_571869(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   slot: JString (required)
  ##       : Website Slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571871 = path.getOrDefault("resourceGroupName")
  valid_571871 = validateParameter(valid_571871, JString, required = true,
                                 default = nil)
  if valid_571871 != nil:
    section.add "resourceGroupName", valid_571871
  var valid_571872 = path.getOrDefault("name")
  valid_571872 = validateParameter(valid_571872, JString, required = true,
                                 default = nil)
  if valid_571872 != nil:
    section.add "name", valid_571872
  var valid_571873 = path.getOrDefault("slot")
  valid_571873 = validateParameter(valid_571873, JString, required = true,
                                 default = nil)
  if valid_571873 != nil:
    section.add "slot", valid_571873
  var valid_571874 = path.getOrDefault("subscriptionId")
  valid_571874 = validateParameter(valid_571874, JString, required = true,
                                 default = nil)
  if valid_571874 != nil:
    section.add "subscriptionId", valid_571874
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571875 = query.getOrDefault("api-version")
  valid_571875 = validateParameter(valid_571875, JString, required = true,
                                 default = nil)
  if valid_571875 != nil:
    section.add "api-version", valid_571875
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571876: Call_WebAppsListSnapshotsSlot_571868; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_571876.validator(path, query, header, formData, body)
  let scheme = call_571876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571876.url(scheme.get, call_571876.host, call_571876.base,
                         call_571876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571876, url, valid)

proc call*(call_571877: Call_WebAppsListSnapshotsSlot_571868;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshotsSlot
  ## Returns all Snapshots to the user.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   slot: string (required)
  ##       : Website Slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571878 = newJObject()
  var query_571879 = newJObject()
  add(path_571878, "resourceGroupName", newJString(resourceGroupName))
  add(query_571879, "api-version", newJString(apiVersion))
  add(path_571878, "name", newJString(name))
  add(path_571878, "slot", newJString(slot))
  add(path_571878, "subscriptionId", newJString(subscriptionId))
  result = call_571877.call(path_571878, query_571879, nil, nil, nil)

var webAppsListSnapshotsSlot* = Call_WebAppsListSnapshotsSlot_571868(
    name: "webAppsListSnapshotsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
    validator: validate_WebAppsListSnapshotsSlot_571869, base: "",
    url: url_WebAppsListSnapshotsSlot_571870, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsFromDRSecondarySlot_571880 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSnapshotsFromDRSecondarySlot_571882(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/snapshotsdr")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsFromDRSecondarySlot_571881(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   slot: JString (required)
  ##       : Website Slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571883 = path.getOrDefault("resourceGroupName")
  valid_571883 = validateParameter(valid_571883, JString, required = true,
                                 default = nil)
  if valid_571883 != nil:
    section.add "resourceGroupName", valid_571883
  var valid_571884 = path.getOrDefault("name")
  valid_571884 = validateParameter(valid_571884, JString, required = true,
                                 default = nil)
  if valid_571884 != nil:
    section.add "name", valid_571884
  var valid_571885 = path.getOrDefault("slot")
  valid_571885 = validateParameter(valid_571885, JString, required = true,
                                 default = nil)
  if valid_571885 != nil:
    section.add "slot", valid_571885
  var valid_571886 = path.getOrDefault("subscriptionId")
  valid_571886 = validateParameter(valid_571886, JString, required = true,
                                 default = nil)
  if valid_571886 != nil:
    section.add "subscriptionId", valid_571886
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571887 = query.getOrDefault("api-version")
  valid_571887 = validateParameter(valid_571887, JString, required = true,
                                 default = nil)
  if valid_571887 != nil:
    section.add "api-version", valid_571887
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571888: Call_WebAppsListSnapshotsFromDRSecondarySlot_571880;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  let valid = call_571888.validator(path, query, header, formData, body)
  let scheme = call_571888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571888.url(scheme.get, call_571888.host, call_571888.base,
                         call_571888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571888, url, valid)

proc call*(call_571889: Call_WebAppsListSnapshotsFromDRSecondarySlot_571880;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshotsFromDRSecondarySlot
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   slot: string (required)
  ##       : Website Slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571890 = newJObject()
  var query_571891 = newJObject()
  add(path_571890, "resourceGroupName", newJString(resourceGroupName))
  add(query_571891, "api-version", newJString(apiVersion))
  add(path_571890, "name", newJString(name))
  add(path_571890, "slot", newJString(slot))
  add(path_571890, "subscriptionId", newJString(subscriptionId))
  result = call_571889.call(path_571890, query_571891, nil, nil, nil)

var webAppsListSnapshotsFromDRSecondarySlot* = Call_WebAppsListSnapshotsFromDRSecondarySlot_571880(
    name: "webAppsListSnapshotsFromDRSecondarySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr",
    validator: validate_WebAppsListSnapshotsFromDRSecondarySlot_571881, base: "",
    url: url_WebAppsListSnapshotsFromDRSecondarySlot_571882,
    schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControlSlot_571904 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateSourceControlSlot_571906(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControlSlot_571905(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571907 = path.getOrDefault("resourceGroupName")
  valid_571907 = validateParameter(valid_571907, JString, required = true,
                                 default = nil)
  if valid_571907 != nil:
    section.add "resourceGroupName", valid_571907
  var valid_571908 = path.getOrDefault("name")
  valid_571908 = validateParameter(valid_571908, JString, required = true,
                                 default = nil)
  if valid_571908 != nil:
    section.add "name", valid_571908
  var valid_571909 = path.getOrDefault("slot")
  valid_571909 = validateParameter(valid_571909, JString, required = true,
                                 default = nil)
  if valid_571909 != nil:
    section.add "slot", valid_571909
  var valid_571910 = path.getOrDefault("subscriptionId")
  valid_571910 = validateParameter(valid_571910, JString, required = true,
                                 default = nil)
  if valid_571910 != nil:
    section.add "subscriptionId", valid_571910
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571911 = query.getOrDefault("api-version")
  valid_571911 = validateParameter(valid_571911, JString, required = true,
                                 default = nil)
  if valid_571911 != nil:
    section.add "api-version", valid_571911
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571913: Call_WebAppsCreateOrUpdateSourceControlSlot_571904;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_571913.validator(path, query, header, formData, body)
  let scheme = call_571913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571913.url(scheme.get, call_571913.host, call_571913.base,
                         call_571913.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571913, url, valid)

proc call*(call_571914: Call_WebAppsCreateOrUpdateSourceControlSlot_571904;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsCreateOrUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_571915 = newJObject()
  var query_571916 = newJObject()
  var body_571917 = newJObject()
  add(path_571915, "resourceGroupName", newJString(resourceGroupName))
  add(query_571916, "api-version", newJString(apiVersion))
  add(path_571915, "name", newJString(name))
  add(path_571915, "slot", newJString(slot))
  add(path_571915, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_571917 = siteSourceControl
  result = call_571914.call(path_571915, query_571916, nil, nil, body_571917)

var webAppsCreateOrUpdateSourceControlSlot* = Call_WebAppsCreateOrUpdateSourceControlSlot_571904(
    name: "webAppsCreateOrUpdateSourceControlSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControlSlot_571905, base: "",
    url: url_WebAppsCreateOrUpdateSourceControlSlot_571906,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControlSlot_571892 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSourceControlSlot_571894(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControlSlot_571893(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571895 = path.getOrDefault("resourceGroupName")
  valid_571895 = validateParameter(valid_571895, JString, required = true,
                                 default = nil)
  if valid_571895 != nil:
    section.add "resourceGroupName", valid_571895
  var valid_571896 = path.getOrDefault("name")
  valid_571896 = validateParameter(valid_571896, JString, required = true,
                                 default = nil)
  if valid_571896 != nil:
    section.add "name", valid_571896
  var valid_571897 = path.getOrDefault("slot")
  valid_571897 = validateParameter(valid_571897, JString, required = true,
                                 default = nil)
  if valid_571897 != nil:
    section.add "slot", valid_571897
  var valid_571898 = path.getOrDefault("subscriptionId")
  valid_571898 = validateParameter(valid_571898, JString, required = true,
                                 default = nil)
  if valid_571898 != nil:
    section.add "subscriptionId", valid_571898
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571899 = query.getOrDefault("api-version")
  valid_571899 = validateParameter(valid_571899, JString, required = true,
                                 default = nil)
  if valid_571899 != nil:
    section.add "api-version", valid_571899
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571900: Call_WebAppsGetSourceControlSlot_571892; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_571900.validator(path, query, header, formData, body)
  let scheme = call_571900.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571900.url(scheme.get, call_571900.host, call_571900.base,
                         call_571900.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571900, url, valid)

proc call*(call_571901: Call_WebAppsGetSourceControlSlot_571892;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSourceControlSlot
  ## Gets the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571902 = newJObject()
  var query_571903 = newJObject()
  add(path_571902, "resourceGroupName", newJString(resourceGroupName))
  add(query_571903, "api-version", newJString(apiVersion))
  add(path_571902, "name", newJString(name))
  add(path_571902, "slot", newJString(slot))
  add(path_571902, "subscriptionId", newJString(subscriptionId))
  result = call_571901.call(path_571902, query_571903, nil, nil, nil)

var webAppsGetSourceControlSlot* = Call_WebAppsGetSourceControlSlot_571892(
    name: "webAppsGetSourceControlSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControlSlot_571893, base: "",
    url: url_WebAppsGetSourceControlSlot_571894, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControlSlot_571930 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSourceControlSlot_571932(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControlSlot_571931(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571933 = path.getOrDefault("resourceGroupName")
  valid_571933 = validateParameter(valid_571933, JString, required = true,
                                 default = nil)
  if valid_571933 != nil:
    section.add "resourceGroupName", valid_571933
  var valid_571934 = path.getOrDefault("name")
  valid_571934 = validateParameter(valid_571934, JString, required = true,
                                 default = nil)
  if valid_571934 != nil:
    section.add "name", valid_571934
  var valid_571935 = path.getOrDefault("slot")
  valid_571935 = validateParameter(valid_571935, JString, required = true,
                                 default = nil)
  if valid_571935 != nil:
    section.add "slot", valid_571935
  var valid_571936 = path.getOrDefault("subscriptionId")
  valid_571936 = validateParameter(valid_571936, JString, required = true,
                                 default = nil)
  if valid_571936 != nil:
    section.add "subscriptionId", valid_571936
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571937 = query.getOrDefault("api-version")
  valid_571937 = validateParameter(valid_571937, JString, required = true,
                                 default = nil)
  if valid_571937 != nil:
    section.add "api-version", valid_571937
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_571939: Call_WebAppsUpdateSourceControlSlot_571930; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_571939.validator(path, query, header, formData, body)
  let scheme = call_571939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571939.url(scheme.get, call_571939.host, call_571939.base,
                         call_571939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571939, url, valid)

proc call*(call_571940: Call_WebAppsUpdateSourceControlSlot_571930;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsUpdateSourceControlSlot
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_571941 = newJObject()
  var query_571942 = newJObject()
  var body_571943 = newJObject()
  add(path_571941, "resourceGroupName", newJString(resourceGroupName))
  add(query_571942, "api-version", newJString(apiVersion))
  add(path_571941, "name", newJString(name))
  add(path_571941, "slot", newJString(slot))
  add(path_571941, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_571943 = siteSourceControl
  result = call_571940.call(path_571941, query_571942, nil, nil, body_571943)

var webAppsUpdateSourceControlSlot* = Call_WebAppsUpdateSourceControlSlot_571930(
    name: "webAppsUpdateSourceControlSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControlSlot_571931, base: "",
    url: url_WebAppsUpdateSourceControlSlot_571932, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControlSlot_571918 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSourceControlSlot_571920(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControlSlot_571919(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571921 = path.getOrDefault("resourceGroupName")
  valid_571921 = validateParameter(valid_571921, JString, required = true,
                                 default = nil)
  if valid_571921 != nil:
    section.add "resourceGroupName", valid_571921
  var valid_571922 = path.getOrDefault("name")
  valid_571922 = validateParameter(valid_571922, JString, required = true,
                                 default = nil)
  if valid_571922 != nil:
    section.add "name", valid_571922
  var valid_571923 = path.getOrDefault("slot")
  valid_571923 = validateParameter(valid_571923, JString, required = true,
                                 default = nil)
  if valid_571923 != nil:
    section.add "slot", valid_571923
  var valid_571924 = path.getOrDefault("subscriptionId")
  valid_571924 = validateParameter(valid_571924, JString, required = true,
                                 default = nil)
  if valid_571924 != nil:
    section.add "subscriptionId", valid_571924
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571925 = query.getOrDefault("api-version")
  valid_571925 = validateParameter(valid_571925, JString, required = true,
                                 default = nil)
  if valid_571925 != nil:
    section.add "api-version", valid_571925
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571926: Call_WebAppsDeleteSourceControlSlot_571918; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_571926.validator(path, query, header, formData, body)
  let scheme = call_571926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571926.url(scheme.get, call_571926.host, call_571926.base,
                         call_571926.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571926, url, valid)

proc call*(call_571927: Call_WebAppsDeleteSourceControlSlot_571918;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSourceControlSlot
  ## Deletes the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571928 = newJObject()
  var query_571929 = newJObject()
  add(path_571928, "resourceGroupName", newJString(resourceGroupName))
  add(query_571929, "api-version", newJString(apiVersion))
  add(path_571928, "name", newJString(name))
  add(path_571928, "slot", newJString(slot))
  add(path_571928, "subscriptionId", newJString(subscriptionId))
  result = call_571927.call(path_571928, query_571929, nil, nil, nil)

var webAppsDeleteSourceControlSlot* = Call_WebAppsDeleteSourceControlSlot_571918(
    name: "webAppsDeleteSourceControlSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControlSlot_571919, base: "",
    url: url_WebAppsDeleteSourceControlSlot_571920, schemes: {Scheme.Https})
type
  Call_WebAppsStartSlot_571944 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartSlot_571946(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartSlot_571945(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571947 = path.getOrDefault("resourceGroupName")
  valid_571947 = validateParameter(valid_571947, JString, required = true,
                                 default = nil)
  if valid_571947 != nil:
    section.add "resourceGroupName", valid_571947
  var valid_571948 = path.getOrDefault("name")
  valid_571948 = validateParameter(valid_571948, JString, required = true,
                                 default = nil)
  if valid_571948 != nil:
    section.add "name", valid_571948
  var valid_571949 = path.getOrDefault("slot")
  valid_571949 = validateParameter(valid_571949, JString, required = true,
                                 default = nil)
  if valid_571949 != nil:
    section.add "slot", valid_571949
  var valid_571950 = path.getOrDefault("subscriptionId")
  valid_571950 = validateParameter(valid_571950, JString, required = true,
                                 default = nil)
  if valid_571950 != nil:
    section.add "subscriptionId", valid_571950
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571951 = query.getOrDefault("api-version")
  valid_571951 = validateParameter(valid_571951, JString, required = true,
                                 default = nil)
  if valid_571951 != nil:
    section.add "api-version", valid_571951
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571952: Call_WebAppsStartSlot_571944; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_571952.validator(path, query, header, formData, body)
  let scheme = call_571952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571952.url(scheme.get, call_571952.host, call_571952.base,
                         call_571952.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571952, url, valid)

proc call*(call_571953: Call_WebAppsStartSlot_571944; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsStartSlot
  ## Starts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will start the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571954 = newJObject()
  var query_571955 = newJObject()
  add(path_571954, "resourceGroupName", newJString(resourceGroupName))
  add(query_571955, "api-version", newJString(apiVersion))
  add(path_571954, "name", newJString(name))
  add(path_571954, "slot", newJString(slot))
  add(path_571954, "subscriptionId", newJString(subscriptionId))
  result = call_571953.call(path_571954, query_571955, nil, nil, nil)

var webAppsStartSlot* = Call_WebAppsStartSlot_571944(name: "webAppsStartSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
    validator: validate_WebAppsStartSlot_571945, base: "",
    url: url_WebAppsStartSlot_571946, schemes: {Scheme.Https})
type
  Call_WebAppsStartNetworkTraceSlot_571956 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartNetworkTraceSlot_571958(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/startNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartNetworkTraceSlot_571957(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571959 = path.getOrDefault("resourceGroupName")
  valid_571959 = validateParameter(valid_571959, JString, required = true,
                                 default = nil)
  if valid_571959 != nil:
    section.add "resourceGroupName", valid_571959
  var valid_571960 = path.getOrDefault("name")
  valid_571960 = validateParameter(valid_571960, JString, required = true,
                                 default = nil)
  if valid_571960 != nil:
    section.add "name", valid_571960
  var valid_571961 = path.getOrDefault("slot")
  valid_571961 = validateParameter(valid_571961, JString, required = true,
                                 default = nil)
  if valid_571961 != nil:
    section.add "slot", valid_571961
  var valid_571962 = path.getOrDefault("subscriptionId")
  valid_571962 = validateParameter(valid_571962, JString, required = true,
                                 default = nil)
  if valid_571962 != nil:
    section.add "subscriptionId", valid_571962
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571963 = query.getOrDefault("api-version")
  valid_571963 = validateParameter(valid_571963, JString, required = true,
                                 default = nil)
  if valid_571963 != nil:
    section.add "api-version", valid_571963
  var valid_571964 = query.getOrDefault("durationInSeconds")
  valid_571964 = validateParameter(valid_571964, JInt, required = false, default = nil)
  if valid_571964 != nil:
    section.add "durationInSeconds", valid_571964
  var valid_571965 = query.getOrDefault("maxFrameLength")
  valid_571965 = validateParameter(valid_571965, JInt, required = false, default = nil)
  if valid_571965 != nil:
    section.add "maxFrameLength", valid_571965
  var valid_571966 = query.getOrDefault("sasUrl")
  valid_571966 = validateParameter(valid_571966, JString, required = false,
                                 default = nil)
  if valid_571966 != nil:
    section.add "sasUrl", valid_571966
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571967: Call_WebAppsStartNetworkTraceSlot_571956; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_571967.validator(path, query, header, formData, body)
  let scheme = call_571967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571967.url(scheme.get, call_571967.host, call_571967.base,
                         call_571967.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571967, url, valid)

proc call*(call_571968: Call_WebAppsStartNetworkTraceSlot_571956;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartNetworkTraceSlot
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_571969 = newJObject()
  var query_571970 = newJObject()
  add(path_571969, "resourceGroupName", newJString(resourceGroupName))
  add(query_571970, "api-version", newJString(apiVersion))
  add(path_571969, "name", newJString(name))
  add(path_571969, "slot", newJString(slot))
  add(path_571969, "subscriptionId", newJString(subscriptionId))
  add(query_571970, "durationInSeconds", newJInt(durationInSeconds))
  add(query_571970, "maxFrameLength", newJInt(maxFrameLength))
  add(query_571970, "sasUrl", newJString(sasUrl))
  result = call_571968.call(path_571969, query_571970, nil, nil, nil)

var webAppsStartNetworkTraceSlot* = Call_WebAppsStartNetworkTraceSlot_571956(
    name: "webAppsStartNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace",
    validator: validate_WebAppsStartNetworkTraceSlot_571957, base: "",
    url: url_WebAppsStartNetworkTraceSlot_571958, schemes: {Scheme.Https})
type
  Call_WebAppsStopSlot_571971 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopSlot_571973(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopSlot_571972(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571974 = path.getOrDefault("resourceGroupName")
  valid_571974 = validateParameter(valid_571974, JString, required = true,
                                 default = nil)
  if valid_571974 != nil:
    section.add "resourceGroupName", valid_571974
  var valid_571975 = path.getOrDefault("name")
  valid_571975 = validateParameter(valid_571975, JString, required = true,
                                 default = nil)
  if valid_571975 != nil:
    section.add "name", valid_571975
  var valid_571976 = path.getOrDefault("slot")
  valid_571976 = validateParameter(valid_571976, JString, required = true,
                                 default = nil)
  if valid_571976 != nil:
    section.add "slot", valid_571976
  var valid_571977 = path.getOrDefault("subscriptionId")
  valid_571977 = validateParameter(valid_571977, JString, required = true,
                                 default = nil)
  if valid_571977 != nil:
    section.add "subscriptionId", valid_571977
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571978 = query.getOrDefault("api-version")
  valid_571978 = validateParameter(valid_571978, JString, required = true,
                                 default = nil)
  if valid_571978 != nil:
    section.add "api-version", valid_571978
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571979: Call_WebAppsStopSlot_571971; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_571979.validator(path, query, header, formData, body)
  let scheme = call_571979.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571979.url(scheme.get, call_571979.host, call_571979.base,
                         call_571979.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571979, url, valid)

proc call*(call_571980: Call_WebAppsStopSlot_571971; resourceGroupName: string;
          apiVersion: string; name: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsStopSlot
  ## Stops an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571981 = newJObject()
  var query_571982 = newJObject()
  add(path_571981, "resourceGroupName", newJString(resourceGroupName))
  add(query_571982, "api-version", newJString(apiVersion))
  add(path_571981, "name", newJString(name))
  add(path_571981, "slot", newJString(slot))
  add(path_571981, "subscriptionId", newJString(subscriptionId))
  result = call_571980.call(path_571981, query_571982, nil, nil, nil)

var webAppsStopSlot* = Call_WebAppsStopSlot_571971(name: "webAppsStopSlot",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
    validator: validate_WebAppsStopSlot_571972, base: "", url: url_WebAppsStopSlot_571973,
    schemes: {Scheme.Https})
type
  Call_WebAppsStopNetworkTraceSlot_571983 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopNetworkTraceSlot_571985(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/stopNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopNetworkTraceSlot_571984(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   slot: JString (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571986 = path.getOrDefault("resourceGroupName")
  valid_571986 = validateParameter(valid_571986, JString, required = true,
                                 default = nil)
  if valid_571986 != nil:
    section.add "resourceGroupName", valid_571986
  var valid_571987 = path.getOrDefault("name")
  valid_571987 = validateParameter(valid_571987, JString, required = true,
                                 default = nil)
  if valid_571987 != nil:
    section.add "name", valid_571987
  var valid_571988 = path.getOrDefault("slot")
  valid_571988 = validateParameter(valid_571988, JString, required = true,
                                 default = nil)
  if valid_571988 != nil:
    section.add "slot", valid_571988
  var valid_571989 = path.getOrDefault("subscriptionId")
  valid_571989 = validateParameter(valid_571989, JString, required = true,
                                 default = nil)
  if valid_571989 != nil:
    section.add "subscriptionId", valid_571989
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_571990 = query.getOrDefault("api-version")
  valid_571990 = validateParameter(valid_571990, JString, required = true,
                                 default = nil)
  if valid_571990 != nil:
    section.add "api-version", valid_571990
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_571991: Call_WebAppsStopNetworkTraceSlot_571983; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_571991.validator(path, query, header, formData, body)
  let scheme = call_571991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_571991.url(scheme.get, call_571991.host, call_571991.base,
                         call_571991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_571991, url, valid)

proc call*(call_571992: Call_WebAppsStopNetworkTraceSlot_571983;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsStopNetworkTraceSlot
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   slot: string (required)
  ##       : The name of the slot for this web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_571993 = newJObject()
  var query_571994 = newJObject()
  add(path_571993, "resourceGroupName", newJString(resourceGroupName))
  add(query_571994, "api-version", newJString(apiVersion))
  add(path_571993, "name", newJString(name))
  add(path_571993, "slot", newJString(slot))
  add(path_571993, "subscriptionId", newJString(subscriptionId))
  result = call_571992.call(path_571993, query_571994, nil, nil, nil)

var webAppsStopNetworkTraceSlot* = Call_WebAppsStopNetworkTraceSlot_571983(
    name: "webAppsStopNetworkTraceSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace",
    validator: validate_WebAppsStopNetworkTraceSlot_571984, base: "",
    url: url_WebAppsStopNetworkTraceSlot_571985, schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepositorySlot_571995 = ref object of OpenApiRestCall_567666
proc url_WebAppsSyncRepositorySlot_571997(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepositorySlot_571996(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   slot: JString (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_571998 = path.getOrDefault("resourceGroupName")
  valid_571998 = validateParameter(valid_571998, JString, required = true,
                                 default = nil)
  if valid_571998 != nil:
    section.add "resourceGroupName", valid_571998
  var valid_571999 = path.getOrDefault("name")
  valid_571999 = validateParameter(valid_571999, JString, required = true,
                                 default = nil)
  if valid_571999 != nil:
    section.add "name", valid_571999
  var valid_572000 = path.getOrDefault("slot")
  valid_572000 = validateParameter(valid_572000, JString, required = true,
                                 default = nil)
  if valid_572000 != nil:
    section.add "slot", valid_572000
  var valid_572001 = path.getOrDefault("subscriptionId")
  valid_572001 = validateParameter(valid_572001, JString, required = true,
                                 default = nil)
  if valid_572001 != nil:
    section.add "subscriptionId", valid_572001
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572002 = query.getOrDefault("api-version")
  valid_572002 = validateParameter(valid_572002, JString, required = true,
                                 default = nil)
  if valid_572002 != nil:
    section.add "api-version", valid_572002
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572003: Call_WebAppsSyncRepositorySlot_571995; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_572003.validator(path, query, header, formData, body)
  let scheme = call_572003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572003.url(scheme.get, call_572003.host, call_572003.base,
                         call_572003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572003, url, valid)

proc call*(call_572004: Call_WebAppsSyncRepositorySlot_571995;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncRepositorySlot
  ## Sync web app repository.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   slot: string (required)
  ##       : Name of web app slot. If not specified then will default to production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572005 = newJObject()
  var query_572006 = newJObject()
  add(path_572005, "resourceGroupName", newJString(resourceGroupName))
  add(query_572006, "api-version", newJString(apiVersion))
  add(path_572005, "name", newJString(name))
  add(path_572005, "slot", newJString(slot))
  add(path_572005, "subscriptionId", newJString(subscriptionId))
  result = call_572004.call(path_572005, query_572006, nil, nil, nil)

var webAppsSyncRepositorySlot* = Call_WebAppsSyncRepositorySlot_571995(
    name: "webAppsSyncRepositorySlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
    validator: validate_WebAppsSyncRepositorySlot_571996, base: "",
    url: url_WebAppsSyncRepositorySlot_571997, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggersSlot_572007 = ref object of OpenApiRestCall_567666
proc url_WebAppsSyncFunctionTriggersSlot_572009(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggersSlot_572008(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572010 = path.getOrDefault("resourceGroupName")
  valid_572010 = validateParameter(valid_572010, JString, required = true,
                                 default = nil)
  if valid_572010 != nil:
    section.add "resourceGroupName", valid_572010
  var valid_572011 = path.getOrDefault("name")
  valid_572011 = validateParameter(valid_572011, JString, required = true,
                                 default = nil)
  if valid_572011 != nil:
    section.add "name", valid_572011
  var valid_572012 = path.getOrDefault("slot")
  valid_572012 = validateParameter(valid_572012, JString, required = true,
                                 default = nil)
  if valid_572012 != nil:
    section.add "slot", valid_572012
  var valid_572013 = path.getOrDefault("subscriptionId")
  valid_572013 = validateParameter(valid_572013, JString, required = true,
                                 default = nil)
  if valid_572013 != nil:
    section.add "subscriptionId", valid_572013
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572014 = query.getOrDefault("api-version")
  valid_572014 = validateParameter(valid_572014, JString, required = true,
                                 default = nil)
  if valid_572014 != nil:
    section.add "api-version", valid_572014
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572015: Call_WebAppsSyncFunctionTriggersSlot_572007;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_572015.validator(path, query, header, formData, body)
  let scheme = call_572015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572015.url(scheme.get, call_572015.host, call_572015.base,
                         call_572015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572015, url, valid)

proc call*(call_572016: Call_WebAppsSyncFunctionTriggersSlot_572007;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncFunctionTriggersSlot
  ## Syncs function trigger metadata to the scale controller
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572017 = newJObject()
  var query_572018 = newJObject()
  add(path_572017, "resourceGroupName", newJString(resourceGroupName))
  add(query_572018, "api-version", newJString(apiVersion))
  add(path_572017, "name", newJString(name))
  add(path_572017, "slot", newJString(slot))
  add(path_572017, "subscriptionId", newJString(subscriptionId))
  result = call_572016.call(path_572017, query_572018, nil, nil, nil)

var webAppsSyncFunctionTriggersSlot* = Call_WebAppsSyncFunctionTriggersSlot_572007(
    name: "webAppsSyncFunctionTriggersSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggersSlot_572008, base: "",
    url: url_WebAppsSyncFunctionTriggersSlot_572009, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobsSlot_572019 = ref object of OpenApiRestCall_567666
proc url_WebAppsListTriggeredWebJobsSlot_572021(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobsSlot_572020(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572022 = path.getOrDefault("resourceGroupName")
  valid_572022 = validateParameter(valid_572022, JString, required = true,
                                 default = nil)
  if valid_572022 != nil:
    section.add "resourceGroupName", valid_572022
  var valid_572023 = path.getOrDefault("name")
  valid_572023 = validateParameter(valid_572023, JString, required = true,
                                 default = nil)
  if valid_572023 != nil:
    section.add "name", valid_572023
  var valid_572024 = path.getOrDefault("slot")
  valid_572024 = validateParameter(valid_572024, JString, required = true,
                                 default = nil)
  if valid_572024 != nil:
    section.add "slot", valid_572024
  var valid_572025 = path.getOrDefault("subscriptionId")
  valid_572025 = validateParameter(valid_572025, JString, required = true,
                                 default = nil)
  if valid_572025 != nil:
    section.add "subscriptionId", valid_572025
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572026 = query.getOrDefault("api-version")
  valid_572026 = validateParameter(valid_572026, JString, required = true,
                                 default = nil)
  if valid_572026 != nil:
    section.add "api-version", valid_572026
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572027: Call_WebAppsListTriggeredWebJobsSlot_572019;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_572027.validator(path, query, header, formData, body)
  let scheme = call_572027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572027.url(scheme.get, call_572027.host, call_572027.base,
                         call_572027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572027, url, valid)

proc call*(call_572028: Call_WebAppsListTriggeredWebJobsSlot_572019;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListTriggeredWebJobsSlot
  ## List triggered web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572029 = newJObject()
  var query_572030 = newJObject()
  add(path_572029, "resourceGroupName", newJString(resourceGroupName))
  add(query_572030, "api-version", newJString(apiVersion))
  add(path_572029, "name", newJString(name))
  add(path_572029, "slot", newJString(slot))
  add(path_572029, "subscriptionId", newJString(subscriptionId))
  result = call_572028.call(path_572029, query_572030, nil, nil, nil)

var webAppsListTriggeredWebJobsSlot* = Call_WebAppsListTriggeredWebJobsSlot_572019(
    name: "webAppsListTriggeredWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobsSlot_572020, base: "",
    url: url_WebAppsListTriggeredWebJobsSlot_572021, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobSlot_572031 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetTriggeredWebJobSlot_572033(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobSlot_572032(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572034 = path.getOrDefault("resourceGroupName")
  valid_572034 = validateParameter(valid_572034, JString, required = true,
                                 default = nil)
  if valid_572034 != nil:
    section.add "resourceGroupName", valid_572034
  var valid_572035 = path.getOrDefault("name")
  valid_572035 = validateParameter(valid_572035, JString, required = true,
                                 default = nil)
  if valid_572035 != nil:
    section.add "name", valid_572035
  var valid_572036 = path.getOrDefault("slot")
  valid_572036 = validateParameter(valid_572036, JString, required = true,
                                 default = nil)
  if valid_572036 != nil:
    section.add "slot", valid_572036
  var valid_572037 = path.getOrDefault("subscriptionId")
  valid_572037 = validateParameter(valid_572037, JString, required = true,
                                 default = nil)
  if valid_572037 != nil:
    section.add "subscriptionId", valid_572037
  var valid_572038 = path.getOrDefault("webJobName")
  valid_572038 = validateParameter(valid_572038, JString, required = true,
                                 default = nil)
  if valid_572038 != nil:
    section.add "webJobName", valid_572038
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572039 = query.getOrDefault("api-version")
  valid_572039 = validateParameter(valid_572039, JString, required = true,
                                 default = nil)
  if valid_572039 != nil:
    section.add "api-version", valid_572039
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572040: Call_WebAppsGetTriggeredWebJobSlot_572031; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_572040.validator(path, query, header, formData, body)
  let scheme = call_572040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572040.url(scheme.get, call_572040.host, call_572040.base,
                         call_572040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572040, url, valid)

proc call*(call_572041: Call_WebAppsGetTriggeredWebJobSlot_572031;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobSlot
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_572042 = newJObject()
  var query_572043 = newJObject()
  add(path_572042, "resourceGroupName", newJString(resourceGroupName))
  add(query_572043, "api-version", newJString(apiVersion))
  add(path_572042, "name", newJString(name))
  add(path_572042, "slot", newJString(slot))
  add(path_572042, "subscriptionId", newJString(subscriptionId))
  add(path_572042, "webJobName", newJString(webJobName))
  result = call_572041.call(path_572042, query_572043, nil, nil, nil)

var webAppsGetTriggeredWebJobSlot* = Call_WebAppsGetTriggeredWebJobSlot_572031(
    name: "webAppsGetTriggeredWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJobSlot_572032, base: "",
    url: url_WebAppsGetTriggeredWebJobSlot_572033, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJobSlot_572044 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteTriggeredWebJobSlot_572046(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJobSlot_572045(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572047 = path.getOrDefault("resourceGroupName")
  valid_572047 = validateParameter(valid_572047, JString, required = true,
                                 default = nil)
  if valid_572047 != nil:
    section.add "resourceGroupName", valid_572047
  var valid_572048 = path.getOrDefault("name")
  valid_572048 = validateParameter(valid_572048, JString, required = true,
                                 default = nil)
  if valid_572048 != nil:
    section.add "name", valid_572048
  var valid_572049 = path.getOrDefault("slot")
  valid_572049 = validateParameter(valid_572049, JString, required = true,
                                 default = nil)
  if valid_572049 != nil:
    section.add "slot", valid_572049
  var valid_572050 = path.getOrDefault("subscriptionId")
  valid_572050 = validateParameter(valid_572050, JString, required = true,
                                 default = nil)
  if valid_572050 != nil:
    section.add "subscriptionId", valid_572050
  var valid_572051 = path.getOrDefault("webJobName")
  valid_572051 = validateParameter(valid_572051, JString, required = true,
                                 default = nil)
  if valid_572051 != nil:
    section.add "webJobName", valid_572051
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572052 = query.getOrDefault("api-version")
  valid_572052 = validateParameter(valid_572052, JString, required = true,
                                 default = nil)
  if valid_572052 != nil:
    section.add "api-version", valid_572052
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572053: Call_WebAppsDeleteTriggeredWebJobSlot_572044;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_572053.validator(path, query, header, formData, body)
  let scheme = call_572053.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572053.url(scheme.get, call_572053.host, call_572053.base,
                         call_572053.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572053, url, valid)

proc call*(call_572054: Call_WebAppsDeleteTriggeredWebJobSlot_572044;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteTriggeredWebJobSlot
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_572055 = newJObject()
  var query_572056 = newJObject()
  add(path_572055, "resourceGroupName", newJString(resourceGroupName))
  add(query_572056, "api-version", newJString(apiVersion))
  add(path_572055, "name", newJString(name))
  add(path_572055, "slot", newJString(slot))
  add(path_572055, "subscriptionId", newJString(subscriptionId))
  add(path_572055, "webJobName", newJString(webJobName))
  result = call_572054.call(path_572055, query_572056, nil, nil, nil)

var webAppsDeleteTriggeredWebJobSlot* = Call_WebAppsDeleteTriggeredWebJobSlot_572044(
    name: "webAppsDeleteTriggeredWebJobSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJobSlot_572045, base: "",
    url: url_WebAppsDeleteTriggeredWebJobSlot_572046, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistorySlot_572057 = ref object of OpenApiRestCall_567666
proc url_WebAppsListTriggeredWebJobHistorySlot_572059(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistorySlot_572058(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572060 = path.getOrDefault("resourceGroupName")
  valid_572060 = validateParameter(valid_572060, JString, required = true,
                                 default = nil)
  if valid_572060 != nil:
    section.add "resourceGroupName", valid_572060
  var valid_572061 = path.getOrDefault("name")
  valid_572061 = validateParameter(valid_572061, JString, required = true,
                                 default = nil)
  if valid_572061 != nil:
    section.add "name", valid_572061
  var valid_572062 = path.getOrDefault("slot")
  valid_572062 = validateParameter(valid_572062, JString, required = true,
                                 default = nil)
  if valid_572062 != nil:
    section.add "slot", valid_572062
  var valid_572063 = path.getOrDefault("subscriptionId")
  valid_572063 = validateParameter(valid_572063, JString, required = true,
                                 default = nil)
  if valid_572063 != nil:
    section.add "subscriptionId", valid_572063
  var valid_572064 = path.getOrDefault("webJobName")
  valid_572064 = validateParameter(valid_572064, JString, required = true,
                                 default = nil)
  if valid_572064 != nil:
    section.add "webJobName", valid_572064
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572065 = query.getOrDefault("api-version")
  valid_572065 = validateParameter(valid_572065, JString, required = true,
                                 default = nil)
  if valid_572065 != nil:
    section.add "api-version", valid_572065
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572066: Call_WebAppsListTriggeredWebJobHistorySlot_572057;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_572066.validator(path, query, header, formData, body)
  let scheme = call_572066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572066.url(scheme.get, call_572066.host, call_572066.base,
                         call_572066.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572066, url, valid)

proc call*(call_572067: Call_WebAppsListTriggeredWebJobHistorySlot_572057;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsListTriggeredWebJobHistorySlot
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_572068 = newJObject()
  var query_572069 = newJObject()
  add(path_572068, "resourceGroupName", newJString(resourceGroupName))
  add(query_572069, "api-version", newJString(apiVersion))
  add(path_572068, "name", newJString(name))
  add(path_572068, "slot", newJString(slot))
  add(path_572068, "subscriptionId", newJString(subscriptionId))
  add(path_572068, "webJobName", newJString(webJobName))
  result = call_572067.call(path_572068, query_572069, nil, nil, nil)

var webAppsListTriggeredWebJobHistorySlot* = Call_WebAppsListTriggeredWebJobHistorySlot_572057(
    name: "webAppsListTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistorySlot_572058, base: "",
    url: url_WebAppsListTriggeredWebJobHistorySlot_572059, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistorySlot_572070 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetTriggeredWebJobHistorySlot_572072(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistorySlot_572071(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : History ID.
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572073 = path.getOrDefault("resourceGroupName")
  valid_572073 = validateParameter(valid_572073, JString, required = true,
                                 default = nil)
  if valid_572073 != nil:
    section.add "resourceGroupName", valid_572073
  var valid_572074 = path.getOrDefault("name")
  valid_572074 = validateParameter(valid_572074, JString, required = true,
                                 default = nil)
  if valid_572074 != nil:
    section.add "name", valid_572074
  var valid_572075 = path.getOrDefault("slot")
  valid_572075 = validateParameter(valid_572075, JString, required = true,
                                 default = nil)
  if valid_572075 != nil:
    section.add "slot", valid_572075
  var valid_572076 = path.getOrDefault("subscriptionId")
  valid_572076 = validateParameter(valid_572076, JString, required = true,
                                 default = nil)
  if valid_572076 != nil:
    section.add "subscriptionId", valid_572076
  var valid_572077 = path.getOrDefault("id")
  valid_572077 = validateParameter(valid_572077, JString, required = true,
                                 default = nil)
  if valid_572077 != nil:
    section.add "id", valid_572077
  var valid_572078 = path.getOrDefault("webJobName")
  valid_572078 = validateParameter(valid_572078, JString, required = true,
                                 default = nil)
  if valid_572078 != nil:
    section.add "webJobName", valid_572078
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572079 = query.getOrDefault("api-version")
  valid_572079 = validateParameter(valid_572079, JString, required = true,
                                 default = nil)
  if valid_572079 != nil:
    section.add "api-version", valid_572079
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572080: Call_WebAppsGetTriggeredWebJobHistorySlot_572070;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_572080.validator(path, query, header, formData, body)
  let scheme = call_572080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572080.url(scheme.get, call_572080.host, call_572080.base,
                         call_572080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572080, url, valid)

proc call*(call_572081: Call_WebAppsGetTriggeredWebJobHistorySlot_572070;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; id: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistorySlot
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : History ID.
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_572082 = newJObject()
  var query_572083 = newJObject()
  add(path_572082, "resourceGroupName", newJString(resourceGroupName))
  add(query_572083, "api-version", newJString(apiVersion))
  add(path_572082, "name", newJString(name))
  add(path_572082, "slot", newJString(slot))
  add(path_572082, "subscriptionId", newJString(subscriptionId))
  add(path_572082, "id", newJString(id))
  add(path_572082, "webJobName", newJString(webJobName))
  result = call_572081.call(path_572082, query_572083, nil, nil, nil)

var webAppsGetTriggeredWebJobHistorySlot* = Call_WebAppsGetTriggeredWebJobHistorySlot_572070(
    name: "webAppsGetTriggeredWebJobHistorySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistorySlot_572071, base: "",
    url: url_WebAppsGetTriggeredWebJobHistorySlot_572072, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJobSlot_572084 = ref object of OpenApiRestCall_567666
proc url_WebAppsRunTriggeredWebJobSlot_572086(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJobSlot_572085(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572087 = path.getOrDefault("resourceGroupName")
  valid_572087 = validateParameter(valid_572087, JString, required = true,
                                 default = nil)
  if valid_572087 != nil:
    section.add "resourceGroupName", valid_572087
  var valid_572088 = path.getOrDefault("name")
  valid_572088 = validateParameter(valid_572088, JString, required = true,
                                 default = nil)
  if valid_572088 != nil:
    section.add "name", valid_572088
  var valid_572089 = path.getOrDefault("slot")
  valid_572089 = validateParameter(valid_572089, JString, required = true,
                                 default = nil)
  if valid_572089 != nil:
    section.add "slot", valid_572089
  var valid_572090 = path.getOrDefault("subscriptionId")
  valid_572090 = validateParameter(valid_572090, JString, required = true,
                                 default = nil)
  if valid_572090 != nil:
    section.add "subscriptionId", valid_572090
  var valid_572091 = path.getOrDefault("webJobName")
  valid_572091 = validateParameter(valid_572091, JString, required = true,
                                 default = nil)
  if valid_572091 != nil:
    section.add "webJobName", valid_572091
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572092 = query.getOrDefault("api-version")
  valid_572092 = validateParameter(valid_572092, JString, required = true,
                                 default = nil)
  if valid_572092 != nil:
    section.add "api-version", valid_572092
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572093: Call_WebAppsRunTriggeredWebJobSlot_572084; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_572093.validator(path, query, header, formData, body)
  let scheme = call_572093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572093.url(scheme.get, call_572093.host, call_572093.base,
                         call_572093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572093, url, valid)

proc call*(call_572094: Call_WebAppsRunTriggeredWebJobSlot_572084;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsRunTriggeredWebJobSlot
  ## Run a triggered web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_572095 = newJObject()
  var query_572096 = newJObject()
  add(path_572095, "resourceGroupName", newJString(resourceGroupName))
  add(query_572096, "api-version", newJString(apiVersion))
  add(path_572095, "name", newJString(name))
  add(path_572095, "slot", newJString(slot))
  add(path_572095, "subscriptionId", newJString(subscriptionId))
  add(path_572095, "webJobName", newJString(webJobName))
  result = call_572094.call(path_572095, query_572096, nil, nil, nil)

var webAppsRunTriggeredWebJobSlot* = Call_WebAppsRunTriggeredWebJobSlot_572084(
    name: "webAppsRunTriggeredWebJobSlot", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJobSlot_572085, base: "",
    url: url_WebAppsRunTriggeredWebJobSlot_572086, schemes: {Scheme.Https})
type
  Call_WebAppsListUsagesSlot_572097 = ref object of OpenApiRestCall_567666
proc url_WebAppsListUsagesSlot_572099(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsagesSlot_572098(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572100 = path.getOrDefault("resourceGroupName")
  valid_572100 = validateParameter(valid_572100, JString, required = true,
                                 default = nil)
  if valid_572100 != nil:
    section.add "resourceGroupName", valid_572100
  var valid_572101 = path.getOrDefault("name")
  valid_572101 = validateParameter(valid_572101, JString, required = true,
                                 default = nil)
  if valid_572101 != nil:
    section.add "name", valid_572101
  var valid_572102 = path.getOrDefault("slot")
  valid_572102 = validateParameter(valid_572102, JString, required = true,
                                 default = nil)
  if valid_572102 != nil:
    section.add "slot", valid_572102
  var valid_572103 = path.getOrDefault("subscriptionId")
  valid_572103 = validateParameter(valid_572103, JString, required = true,
                                 default = nil)
  if valid_572103 != nil:
    section.add "subscriptionId", valid_572103
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572104 = query.getOrDefault("api-version")
  valid_572104 = validateParameter(valid_572104, JString, required = true,
                                 default = nil)
  if valid_572104 != nil:
    section.add "api-version", valid_572104
  var valid_572105 = query.getOrDefault("$filter")
  valid_572105 = validateParameter(valid_572105, JString, required = false,
                                 default = nil)
  if valid_572105 != nil:
    section.add "$filter", valid_572105
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572106: Call_WebAppsListUsagesSlot_572097; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_572106.validator(path, query, header, formData, body)
  let scheme = call_572106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572106.url(scheme.get, call_572106.host, call_572106.base,
                         call_572106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572106, url, valid)

proc call*(call_572107: Call_WebAppsListUsagesSlot_572097;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; Filter: string = ""): Recallable =
  ## webAppsListUsagesSlot
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_572108 = newJObject()
  var query_572109 = newJObject()
  add(path_572108, "resourceGroupName", newJString(resourceGroupName))
  add(query_572109, "api-version", newJString(apiVersion))
  add(path_572108, "name", newJString(name))
  add(path_572108, "slot", newJString(slot))
  add(path_572108, "subscriptionId", newJString(subscriptionId))
  add(query_572109, "$filter", newJString(Filter))
  result = call_572107.call(path_572108, query_572109, nil, nil, nil)

var webAppsListUsagesSlot* = Call_WebAppsListUsagesSlot_572097(
    name: "webAppsListUsagesSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
    validator: validate_WebAppsListUsagesSlot_572098, base: "",
    url: url_WebAppsListUsagesSlot_572099, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnectionsSlot_572110 = ref object of OpenApiRestCall_567666
proc url_WebAppsListVnetConnectionsSlot_572112(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnectionsSlot_572111(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572113 = path.getOrDefault("resourceGroupName")
  valid_572113 = validateParameter(valid_572113, JString, required = true,
                                 default = nil)
  if valid_572113 != nil:
    section.add "resourceGroupName", valid_572113
  var valid_572114 = path.getOrDefault("name")
  valid_572114 = validateParameter(valid_572114, JString, required = true,
                                 default = nil)
  if valid_572114 != nil:
    section.add "name", valid_572114
  var valid_572115 = path.getOrDefault("slot")
  valid_572115 = validateParameter(valid_572115, JString, required = true,
                                 default = nil)
  if valid_572115 != nil:
    section.add "slot", valid_572115
  var valid_572116 = path.getOrDefault("subscriptionId")
  valid_572116 = validateParameter(valid_572116, JString, required = true,
                                 default = nil)
  if valid_572116 != nil:
    section.add "subscriptionId", valid_572116
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572117 = query.getOrDefault("api-version")
  valid_572117 = validateParameter(valid_572117, JString, required = true,
                                 default = nil)
  if valid_572117 != nil:
    section.add "api-version", valid_572117
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572118: Call_WebAppsListVnetConnectionsSlot_572110; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_572118.validator(path, query, header, formData, body)
  let scheme = call_572118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572118.url(scheme.get, call_572118.host, call_572118.base,
                         call_572118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572118, url, valid)

proc call*(call_572119: Call_WebAppsListVnetConnectionsSlot_572110;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListVnetConnectionsSlot
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572120 = newJObject()
  var query_572121 = newJObject()
  add(path_572120, "resourceGroupName", newJString(resourceGroupName))
  add(query_572121, "api-version", newJString(apiVersion))
  add(path_572120, "name", newJString(name))
  add(path_572120, "slot", newJString(slot))
  add(path_572120, "subscriptionId", newJString(subscriptionId))
  result = call_572119.call(path_572120, query_572121, nil, nil, nil)

var webAppsListVnetConnectionsSlot* = Call_WebAppsListVnetConnectionsSlot_572110(
    name: "webAppsListVnetConnectionsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnectionsSlot_572111, base: "",
    url: url_WebAppsListVnetConnectionsSlot_572112, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionSlot_572135 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateVnetConnectionSlot_572137(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionSlot_572136(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572138 = path.getOrDefault("resourceGroupName")
  valid_572138 = validateParameter(valid_572138, JString, required = true,
                                 default = nil)
  if valid_572138 != nil:
    section.add "resourceGroupName", valid_572138
  var valid_572139 = path.getOrDefault("name")
  valid_572139 = validateParameter(valid_572139, JString, required = true,
                                 default = nil)
  if valid_572139 != nil:
    section.add "name", valid_572139
  var valid_572140 = path.getOrDefault("vnetName")
  valid_572140 = validateParameter(valid_572140, JString, required = true,
                                 default = nil)
  if valid_572140 != nil:
    section.add "vnetName", valid_572140
  var valid_572141 = path.getOrDefault("slot")
  valid_572141 = validateParameter(valid_572141, JString, required = true,
                                 default = nil)
  if valid_572141 != nil:
    section.add "slot", valid_572141
  var valid_572142 = path.getOrDefault("subscriptionId")
  valid_572142 = validateParameter(valid_572142, JString, required = true,
                                 default = nil)
  if valid_572142 != nil:
    section.add "subscriptionId", valid_572142
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572143 = query.getOrDefault("api-version")
  valid_572143 = validateParameter(valid_572143, JString, required = true,
                                 default = nil)
  if valid_572143 != nil:
    section.add "api-version", valid_572143
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572145: Call_WebAppsCreateOrUpdateVnetConnectionSlot_572135;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_572145.validator(path, query, header, formData, body)
  let scheme = call_572145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572145.url(scheme.get, call_572145.host, call_572145.base,
                         call_572145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572145, url, valid)

proc call*(call_572146: Call_WebAppsCreateOrUpdateVnetConnectionSlot_572135;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572147 = newJObject()
  var query_572148 = newJObject()
  var body_572149 = newJObject()
  add(path_572147, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572149 = connectionEnvelope
  add(path_572147, "name", newJString(name))
  add(path_572147, "vnetName", newJString(vnetName))
  add(query_572148, "api-version", newJString(apiVersion))
  add(path_572147, "slot", newJString(slot))
  add(path_572147, "subscriptionId", newJString(subscriptionId))
  result = call_572146.call(path_572147, query_572148, nil, nil, body_572149)

var webAppsCreateOrUpdateVnetConnectionSlot* = Call_WebAppsCreateOrUpdateVnetConnectionSlot_572135(
    name: "webAppsCreateOrUpdateVnetConnectionSlot", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionSlot_572136, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnectionSlot_572137,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionSlot_572122 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetVnetConnectionSlot_572124(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionSlot_572123(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572125 = path.getOrDefault("resourceGroupName")
  valid_572125 = validateParameter(valid_572125, JString, required = true,
                                 default = nil)
  if valid_572125 != nil:
    section.add "resourceGroupName", valid_572125
  var valid_572126 = path.getOrDefault("name")
  valid_572126 = validateParameter(valid_572126, JString, required = true,
                                 default = nil)
  if valid_572126 != nil:
    section.add "name", valid_572126
  var valid_572127 = path.getOrDefault("vnetName")
  valid_572127 = validateParameter(valid_572127, JString, required = true,
                                 default = nil)
  if valid_572127 != nil:
    section.add "vnetName", valid_572127
  var valid_572128 = path.getOrDefault("slot")
  valid_572128 = validateParameter(valid_572128, JString, required = true,
                                 default = nil)
  if valid_572128 != nil:
    section.add "slot", valid_572128
  var valid_572129 = path.getOrDefault("subscriptionId")
  valid_572129 = validateParameter(valid_572129, JString, required = true,
                                 default = nil)
  if valid_572129 != nil:
    section.add "subscriptionId", valid_572129
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572130 = query.getOrDefault("api-version")
  valid_572130 = validateParameter(valid_572130, JString, required = true,
                                 default = nil)
  if valid_572130 != nil:
    section.add "api-version", valid_572130
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572131: Call_WebAppsGetVnetConnectionSlot_572122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_572131.validator(path, query, header, formData, body)
  let scheme = call_572131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572131.url(scheme.get, call_572131.host, call_572131.base,
                         call_572131.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572131, url, valid)

proc call*(call_572132: Call_WebAppsGetVnetConnectionSlot_572122;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionSlot
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572133 = newJObject()
  var query_572134 = newJObject()
  add(path_572133, "resourceGroupName", newJString(resourceGroupName))
  add(query_572134, "api-version", newJString(apiVersion))
  add(path_572133, "name", newJString(name))
  add(path_572133, "vnetName", newJString(vnetName))
  add(path_572133, "slot", newJString(slot))
  add(path_572133, "subscriptionId", newJString(subscriptionId))
  result = call_572132.call(path_572133, query_572134, nil, nil, nil)

var webAppsGetVnetConnectionSlot* = Call_WebAppsGetVnetConnectionSlot_572122(
    name: "webAppsGetVnetConnectionSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnectionSlot_572123, base: "",
    url: url_WebAppsGetVnetConnectionSlot_572124, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionSlot_572163 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateVnetConnectionSlot_572165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionSlot_572164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572166 = path.getOrDefault("resourceGroupName")
  valid_572166 = validateParameter(valid_572166, JString, required = true,
                                 default = nil)
  if valid_572166 != nil:
    section.add "resourceGroupName", valid_572166
  var valid_572167 = path.getOrDefault("name")
  valid_572167 = validateParameter(valid_572167, JString, required = true,
                                 default = nil)
  if valid_572167 != nil:
    section.add "name", valid_572167
  var valid_572168 = path.getOrDefault("vnetName")
  valid_572168 = validateParameter(valid_572168, JString, required = true,
                                 default = nil)
  if valid_572168 != nil:
    section.add "vnetName", valid_572168
  var valid_572169 = path.getOrDefault("slot")
  valid_572169 = validateParameter(valid_572169, JString, required = true,
                                 default = nil)
  if valid_572169 != nil:
    section.add "slot", valid_572169
  var valid_572170 = path.getOrDefault("subscriptionId")
  valid_572170 = validateParameter(valid_572170, JString, required = true,
                                 default = nil)
  if valid_572170 != nil:
    section.add "subscriptionId", valid_572170
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572171 = query.getOrDefault("api-version")
  valid_572171 = validateParameter(valid_572171, JString, required = true,
                                 default = nil)
  if valid_572171 != nil:
    section.add "api-version", valid_572171
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572173: Call_WebAppsUpdateVnetConnectionSlot_572163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_572173.validator(path, query, header, formData, body)
  let scheme = call_572173.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572173.url(scheme.get, call_572173.host, call_572173.base,
                         call_572173.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572173, url, valid)

proc call*(call_572174: Call_WebAppsUpdateVnetConnectionSlot_572163;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionSlot
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572175 = newJObject()
  var query_572176 = newJObject()
  var body_572177 = newJObject()
  add(path_572175, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572177 = connectionEnvelope
  add(path_572175, "name", newJString(name))
  add(path_572175, "vnetName", newJString(vnetName))
  add(query_572176, "api-version", newJString(apiVersion))
  add(path_572175, "slot", newJString(slot))
  add(path_572175, "subscriptionId", newJString(subscriptionId))
  result = call_572174.call(path_572175, query_572176, nil, nil, body_572177)

var webAppsUpdateVnetConnectionSlot* = Call_WebAppsUpdateVnetConnectionSlot_572163(
    name: "webAppsUpdateVnetConnectionSlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnectionSlot_572164, base: "",
    url: url_WebAppsUpdateVnetConnectionSlot_572165, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnectionSlot_572150 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteVnetConnectionSlot_572152(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnectionSlot_572151(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572153 = path.getOrDefault("resourceGroupName")
  valid_572153 = validateParameter(valid_572153, JString, required = true,
                                 default = nil)
  if valid_572153 != nil:
    section.add "resourceGroupName", valid_572153
  var valid_572154 = path.getOrDefault("name")
  valid_572154 = validateParameter(valid_572154, JString, required = true,
                                 default = nil)
  if valid_572154 != nil:
    section.add "name", valid_572154
  var valid_572155 = path.getOrDefault("vnetName")
  valid_572155 = validateParameter(valid_572155, JString, required = true,
                                 default = nil)
  if valid_572155 != nil:
    section.add "vnetName", valid_572155
  var valid_572156 = path.getOrDefault("slot")
  valid_572156 = validateParameter(valid_572156, JString, required = true,
                                 default = nil)
  if valid_572156 != nil:
    section.add "slot", valid_572156
  var valid_572157 = path.getOrDefault("subscriptionId")
  valid_572157 = validateParameter(valid_572157, JString, required = true,
                                 default = nil)
  if valid_572157 != nil:
    section.add "subscriptionId", valid_572157
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572158 = query.getOrDefault("api-version")
  valid_572158 = validateParameter(valid_572158, JString, required = true,
                                 default = nil)
  if valid_572158 != nil:
    section.add "api-version", valid_572158
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572159: Call_WebAppsDeleteVnetConnectionSlot_572150;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_572159.validator(path, query, header, formData, body)
  let scheme = call_572159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572159.url(scheme.get, call_572159.host, call_572159.base,
                         call_572159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572159, url, valid)

proc call*(call_572160: Call_WebAppsDeleteVnetConnectionSlot_572150;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; subscriptionId: string): Recallable =
  ## webAppsDeleteVnetConnectionSlot
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572161 = newJObject()
  var query_572162 = newJObject()
  add(path_572161, "resourceGroupName", newJString(resourceGroupName))
  add(query_572162, "api-version", newJString(apiVersion))
  add(path_572161, "name", newJString(name))
  add(path_572161, "vnetName", newJString(vnetName))
  add(path_572161, "slot", newJString(slot))
  add(path_572161, "subscriptionId", newJString(subscriptionId))
  result = call_572160.call(path_572161, query_572162, nil, nil, nil)

var webAppsDeleteVnetConnectionSlot* = Call_WebAppsDeleteVnetConnectionSlot_572150(
    name: "webAppsDeleteVnetConnectionSlot", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnectionSlot_572151, base: "",
    url: url_WebAppsDeleteVnetConnectionSlot_572152, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_572192 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_572194(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_572193(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572195 = path.getOrDefault("resourceGroupName")
  valid_572195 = validateParameter(valid_572195, JString, required = true,
                                 default = nil)
  if valid_572195 != nil:
    section.add "resourceGroupName", valid_572195
  var valid_572196 = path.getOrDefault("name")
  valid_572196 = validateParameter(valid_572196, JString, required = true,
                                 default = nil)
  if valid_572196 != nil:
    section.add "name", valid_572196
  var valid_572197 = path.getOrDefault("vnetName")
  valid_572197 = validateParameter(valid_572197, JString, required = true,
                                 default = nil)
  if valid_572197 != nil:
    section.add "vnetName", valid_572197
  var valid_572198 = path.getOrDefault("slot")
  valid_572198 = validateParameter(valid_572198, JString, required = true,
                                 default = nil)
  if valid_572198 != nil:
    section.add "slot", valid_572198
  var valid_572199 = path.getOrDefault("gatewayName")
  valid_572199 = validateParameter(valid_572199, JString, required = true,
                                 default = nil)
  if valid_572199 != nil:
    section.add "gatewayName", valid_572199
  var valid_572200 = path.getOrDefault("subscriptionId")
  valid_572200 = validateParameter(valid_572200, JString, required = true,
                                 default = nil)
  if valid_572200 != nil:
    section.add "subscriptionId", valid_572200
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572201 = query.getOrDefault("api-version")
  valid_572201 = validateParameter(valid_572201, JString, required = true,
                                 default = nil)
  if valid_572201 != nil:
    section.add "api-version", valid_572201
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572203: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_572192;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_572203.validator(path, query, header, formData, body)
  let scheme = call_572203.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572203.url(scheme.get, call_572203.host, call_572203.base,
                         call_572203.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572203, url, valid)

proc call*(call_572204: Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_572192;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572205 = newJObject()
  var query_572206 = newJObject()
  var body_572207 = newJObject()
  add(path_572205, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572207 = connectionEnvelope
  add(path_572205, "name", newJString(name))
  add(path_572205, "vnetName", newJString(vnetName))
  add(query_572206, "api-version", newJString(apiVersion))
  add(path_572205, "slot", newJString(slot))
  add(path_572205, "gatewayName", newJString(gatewayName))
  add(path_572205, "subscriptionId", newJString(subscriptionId))
  result = call_572204.call(path_572205, query_572206, nil, nil, body_572207)

var webAppsCreateOrUpdateVnetConnectionGatewaySlot* = Call_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_572192(
    name: "webAppsCreateOrUpdateVnetConnectionGatewaySlot",
    meth: HttpMethod.HttpPut, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_572193,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGatewaySlot_572194,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGatewaySlot_572178 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetVnetConnectionGatewaySlot_572180(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGatewaySlot_572179(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572181 = path.getOrDefault("resourceGroupName")
  valid_572181 = validateParameter(valid_572181, JString, required = true,
                                 default = nil)
  if valid_572181 != nil:
    section.add "resourceGroupName", valid_572181
  var valid_572182 = path.getOrDefault("name")
  valid_572182 = validateParameter(valid_572182, JString, required = true,
                                 default = nil)
  if valid_572182 != nil:
    section.add "name", valid_572182
  var valid_572183 = path.getOrDefault("vnetName")
  valid_572183 = validateParameter(valid_572183, JString, required = true,
                                 default = nil)
  if valid_572183 != nil:
    section.add "vnetName", valid_572183
  var valid_572184 = path.getOrDefault("slot")
  valid_572184 = validateParameter(valid_572184, JString, required = true,
                                 default = nil)
  if valid_572184 != nil:
    section.add "slot", valid_572184
  var valid_572185 = path.getOrDefault("gatewayName")
  valid_572185 = validateParameter(valid_572185, JString, required = true,
                                 default = nil)
  if valid_572185 != nil:
    section.add "gatewayName", valid_572185
  var valid_572186 = path.getOrDefault("subscriptionId")
  valid_572186 = validateParameter(valid_572186, JString, required = true,
                                 default = nil)
  if valid_572186 != nil:
    section.add "subscriptionId", valid_572186
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572187 = query.getOrDefault("api-version")
  valid_572187 = validateParameter(valid_572187, JString, required = true,
                                 default = nil)
  if valid_572187 != nil:
    section.add "api-version", valid_572187
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572188: Call_WebAppsGetVnetConnectionGatewaySlot_572178;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_572188.validator(path, query, header, formData, body)
  let scheme = call_572188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572188.url(scheme.get, call_572188.host, call_572188.base,
                         call_572188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572188, url, valid)

proc call*(call_572189: Call_WebAppsGetVnetConnectionGatewaySlot_572178;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; slot: string; gatewayName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionGatewaySlot
  ## Gets an app's Virtual Network gateway.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572190 = newJObject()
  var query_572191 = newJObject()
  add(path_572190, "resourceGroupName", newJString(resourceGroupName))
  add(query_572191, "api-version", newJString(apiVersion))
  add(path_572190, "name", newJString(name))
  add(path_572190, "vnetName", newJString(vnetName))
  add(path_572190, "slot", newJString(slot))
  add(path_572190, "gatewayName", newJString(gatewayName))
  add(path_572190, "subscriptionId", newJString(subscriptionId))
  result = call_572189.call(path_572190, query_572191, nil, nil, nil)

var webAppsGetVnetConnectionGatewaySlot* = Call_WebAppsGetVnetConnectionGatewaySlot_572178(
    name: "webAppsGetVnetConnectionGatewaySlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGatewaySlot_572179, base: "",
    url: url_WebAppsGetVnetConnectionGatewaySlot_572180, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGatewaySlot_572208 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateVnetConnectionGatewaySlot_572210(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGatewaySlot_572209(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572211 = path.getOrDefault("resourceGroupName")
  valid_572211 = validateParameter(valid_572211, JString, required = true,
                                 default = nil)
  if valid_572211 != nil:
    section.add "resourceGroupName", valid_572211
  var valid_572212 = path.getOrDefault("name")
  valid_572212 = validateParameter(valid_572212, JString, required = true,
                                 default = nil)
  if valid_572212 != nil:
    section.add "name", valid_572212
  var valid_572213 = path.getOrDefault("vnetName")
  valid_572213 = validateParameter(valid_572213, JString, required = true,
                                 default = nil)
  if valid_572213 != nil:
    section.add "vnetName", valid_572213
  var valid_572214 = path.getOrDefault("slot")
  valid_572214 = validateParameter(valid_572214, JString, required = true,
                                 default = nil)
  if valid_572214 != nil:
    section.add "slot", valid_572214
  var valid_572215 = path.getOrDefault("gatewayName")
  valid_572215 = validateParameter(valid_572215, JString, required = true,
                                 default = nil)
  if valid_572215 != nil:
    section.add "gatewayName", valid_572215
  var valid_572216 = path.getOrDefault("subscriptionId")
  valid_572216 = validateParameter(valid_572216, JString, required = true,
                                 default = nil)
  if valid_572216 != nil:
    section.add "subscriptionId", valid_572216
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572217 = query.getOrDefault("api-version")
  valid_572217 = validateParameter(valid_572217, JString, required = true,
                                 default = nil)
  if valid_572217 != nil:
    section.add "api-version", valid_572217
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572219: Call_WebAppsUpdateVnetConnectionGatewaySlot_572208;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_572219.validator(path, query, header, formData, body)
  let scheme = call_572219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572219.url(scheme.get, call_572219.host, call_572219.base,
                         call_572219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572219, url, valid)

proc call*(call_572220: Call_WebAppsUpdateVnetConnectionGatewaySlot_572208;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; slot: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionGatewaySlot
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572221 = newJObject()
  var query_572222 = newJObject()
  var body_572223 = newJObject()
  add(path_572221, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572223 = connectionEnvelope
  add(path_572221, "name", newJString(name))
  add(path_572221, "vnetName", newJString(vnetName))
  add(query_572222, "api-version", newJString(apiVersion))
  add(path_572221, "slot", newJString(slot))
  add(path_572221, "gatewayName", newJString(gatewayName))
  add(path_572221, "subscriptionId", newJString(subscriptionId))
  result = call_572220.call(path_572221, query_572222, nil, nil, body_572223)

var webAppsUpdateVnetConnectionGatewaySlot* = Call_WebAppsUpdateVnetConnectionGatewaySlot_572208(
    name: "webAppsUpdateVnetConnectionGatewaySlot", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGatewaySlot_572209, base: "",
    url: url_WebAppsUpdateVnetConnectionGatewaySlot_572210,
    schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobsSlot_572224 = ref object of OpenApiRestCall_567666
proc url_WebAppsListWebJobsSlot_572226(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobsSlot_572225(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572227 = path.getOrDefault("resourceGroupName")
  valid_572227 = validateParameter(valid_572227, JString, required = true,
                                 default = nil)
  if valid_572227 != nil:
    section.add "resourceGroupName", valid_572227
  var valid_572228 = path.getOrDefault("name")
  valid_572228 = validateParameter(valid_572228, JString, required = true,
                                 default = nil)
  if valid_572228 != nil:
    section.add "name", valid_572228
  var valid_572229 = path.getOrDefault("slot")
  valid_572229 = validateParameter(valid_572229, JString, required = true,
                                 default = nil)
  if valid_572229 != nil:
    section.add "slot", valid_572229
  var valid_572230 = path.getOrDefault("subscriptionId")
  valid_572230 = validateParameter(valid_572230, JString, required = true,
                                 default = nil)
  if valid_572230 != nil:
    section.add "subscriptionId", valid_572230
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572231 = query.getOrDefault("api-version")
  valid_572231 = validateParameter(valid_572231, JString, required = true,
                                 default = nil)
  if valid_572231 != nil:
    section.add "api-version", valid_572231
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572232: Call_WebAppsListWebJobsSlot_572224; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_572232.validator(path, query, header, formData, body)
  let scheme = call_572232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572232.url(scheme.get, call_572232.host, call_572232.base,
                         call_572232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572232, url, valid)

proc call*(call_572233: Call_WebAppsListWebJobsSlot_572224;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string): Recallable =
  ## webAppsListWebJobsSlot
  ## List webjobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572234 = newJObject()
  var query_572235 = newJObject()
  add(path_572234, "resourceGroupName", newJString(resourceGroupName))
  add(query_572235, "api-version", newJString(apiVersion))
  add(path_572234, "name", newJString(name))
  add(path_572234, "slot", newJString(slot))
  add(path_572234, "subscriptionId", newJString(subscriptionId))
  result = call_572233.call(path_572234, query_572235, nil, nil, nil)

var webAppsListWebJobsSlot* = Call_WebAppsListWebJobsSlot_572224(
    name: "webAppsListWebJobsSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs",
    validator: validate_WebAppsListWebJobsSlot_572225, base: "",
    url: url_WebAppsListWebJobsSlot_572226, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJobSlot_572236 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetWebJobSlot_572238(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "slot" in path, "`slot` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slots/"),
               (kind: VariableSegment, value: "slot"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJobSlot_572237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   slot: JString (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572239 = path.getOrDefault("resourceGroupName")
  valid_572239 = validateParameter(valid_572239, JString, required = true,
                                 default = nil)
  if valid_572239 != nil:
    section.add "resourceGroupName", valid_572239
  var valid_572240 = path.getOrDefault("name")
  valid_572240 = validateParameter(valid_572240, JString, required = true,
                                 default = nil)
  if valid_572240 != nil:
    section.add "name", valid_572240
  var valid_572241 = path.getOrDefault("slot")
  valid_572241 = validateParameter(valid_572241, JString, required = true,
                                 default = nil)
  if valid_572241 != nil:
    section.add "slot", valid_572241
  var valid_572242 = path.getOrDefault("subscriptionId")
  valid_572242 = validateParameter(valid_572242, JString, required = true,
                                 default = nil)
  if valid_572242 != nil:
    section.add "subscriptionId", valid_572242
  var valid_572243 = path.getOrDefault("webJobName")
  valid_572243 = validateParameter(valid_572243, JString, required = true,
                                 default = nil)
  if valid_572243 != nil:
    section.add "webJobName", valid_572243
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572244 = query.getOrDefault("api-version")
  valid_572244 = validateParameter(valid_572244, JString, required = true,
                                 default = nil)
  if valid_572244 != nil:
    section.add "api-version", valid_572244
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572245: Call_WebAppsGetWebJobSlot_572236; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_572245.validator(path, query, header, formData, body)
  let scheme = call_572245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572245.url(scheme.get, call_572245.host, call_572245.base,
                         call_572245.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572245, url, valid)

proc call*(call_572246: Call_WebAppsGetWebJobSlot_572236;
          resourceGroupName: string; apiVersion: string; name: string; slot: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetWebJobSlot
  ## Get webjob information for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   slot: string (required)
  ##       : Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  var path_572247 = newJObject()
  var query_572248 = newJObject()
  add(path_572247, "resourceGroupName", newJString(resourceGroupName))
  add(query_572248, "api-version", newJString(apiVersion))
  add(path_572247, "name", newJString(name))
  add(path_572247, "slot", newJString(slot))
  add(path_572247, "subscriptionId", newJString(subscriptionId))
  add(path_572247, "webJobName", newJString(webJobName))
  result = call_572246.call(path_572247, query_572248, nil, nil, nil)

var webAppsGetWebJobSlot* = Call_WebAppsGetWebJobSlot_572236(
    name: "webAppsGetWebJobSlot", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJobSlot_572237, base: "",
    url: url_WebAppsGetWebJobSlot_572238, schemes: {Scheme.Https})
type
  Call_WebAppsListSlotDifferencesFromProduction_572249 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSlotDifferencesFromProduction_572251(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsdiffs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSlotDifferencesFromProduction_572250(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572252 = path.getOrDefault("resourceGroupName")
  valid_572252 = validateParameter(valid_572252, JString, required = true,
                                 default = nil)
  if valid_572252 != nil:
    section.add "resourceGroupName", valid_572252
  var valid_572253 = path.getOrDefault("name")
  valid_572253 = validateParameter(valid_572253, JString, required = true,
                                 default = nil)
  if valid_572253 != nil:
    section.add "name", valid_572253
  var valid_572254 = path.getOrDefault("subscriptionId")
  valid_572254 = validateParameter(valid_572254, JString, required = true,
                                 default = nil)
  if valid_572254 != nil:
    section.add "subscriptionId", valid_572254
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572255 = query.getOrDefault("api-version")
  valid_572255 = validateParameter(valid_572255, JString, required = true,
                                 default = nil)
  if valid_572255 != nil:
    section.add "api-version", valid_572255
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572257: Call_WebAppsListSlotDifferencesFromProduction_572249;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get the difference in configuration settings between two web app slots.
  ## 
  let valid = call_572257.validator(path, query, header, formData, body)
  let scheme = call_572257.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572257.url(scheme.get, call_572257.host, call_572257.base,
                         call_572257.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572257, url, valid)

proc call*(call_572258: Call_WebAppsListSlotDifferencesFromProduction_572249;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsListSlotDifferencesFromProduction
  ## Get the difference in configuration settings between two web app slots.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_572259 = newJObject()
  var query_572260 = newJObject()
  var body_572261 = newJObject()
  add(path_572259, "resourceGroupName", newJString(resourceGroupName))
  add(query_572260, "api-version", newJString(apiVersion))
  add(path_572259, "name", newJString(name))
  add(path_572259, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_572261 = slotSwapEntity
  result = call_572258.call(path_572259, query_572260, nil, nil, body_572261)

var webAppsListSlotDifferencesFromProduction* = Call_WebAppsListSlotDifferencesFromProduction_572249(
    name: "webAppsListSlotDifferencesFromProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
    validator: validate_WebAppsListSlotDifferencesFromProduction_572250, base: "",
    url: url_WebAppsListSlotDifferencesFromProduction_572251,
    schemes: {Scheme.Https})
type
  Call_WebAppsSwapSlotWithProduction_572262 = ref object of OpenApiRestCall_567666
proc url_WebAppsSwapSlotWithProduction_572264(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/slotsswap")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSwapSlotWithProduction_572263(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Swaps two deployment slots of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572265 = path.getOrDefault("resourceGroupName")
  valid_572265 = validateParameter(valid_572265, JString, required = true,
                                 default = nil)
  if valid_572265 != nil:
    section.add "resourceGroupName", valid_572265
  var valid_572266 = path.getOrDefault("name")
  valid_572266 = validateParameter(valid_572266, JString, required = true,
                                 default = nil)
  if valid_572266 != nil:
    section.add "name", valid_572266
  var valid_572267 = path.getOrDefault("subscriptionId")
  valid_572267 = validateParameter(valid_572267, JString, required = true,
                                 default = nil)
  if valid_572267 != nil:
    section.add "subscriptionId", valid_572267
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572268 = query.getOrDefault("api-version")
  valid_572268 = validateParameter(valid_572268, JString, required = true,
                                 default = nil)
  if valid_572268 != nil:
    section.add "api-version", valid_572268
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572270: Call_WebAppsSwapSlotWithProduction_572262; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Swaps two deployment slots of an app.
  ## 
  let valid = call_572270.validator(path, query, header, formData, body)
  let scheme = call_572270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572270.url(scheme.get, call_572270.host, call_572270.base,
                         call_572270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572270, url, valid)

proc call*(call_572271: Call_WebAppsSwapSlotWithProduction_572262;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; slotSwapEntity: JsonNode): Recallable =
  ## webAppsSwapSlotWithProduction
  ## Swaps two deployment slots of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   slotSwapEntity: JObject (required)
  ##                 : JSON object that contains the target slot name. See example.
  var path_572272 = newJObject()
  var query_572273 = newJObject()
  var body_572274 = newJObject()
  add(path_572272, "resourceGroupName", newJString(resourceGroupName))
  add(query_572273, "api-version", newJString(apiVersion))
  add(path_572272, "name", newJString(name))
  add(path_572272, "subscriptionId", newJString(subscriptionId))
  if slotSwapEntity != nil:
    body_572274 = slotSwapEntity
  result = call_572271.call(path_572272, query_572273, nil, nil, body_572274)

var webAppsSwapSlotWithProduction* = Call_WebAppsSwapSlotWithProduction_572262(
    name: "webAppsSwapSlotWithProduction", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
    validator: validate_WebAppsSwapSlotWithProduction_572263, base: "",
    url: url_WebAppsSwapSlotWithProduction_572264, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshots_572275 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSnapshots_572277(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshots_572276(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572278 = path.getOrDefault("resourceGroupName")
  valid_572278 = validateParameter(valid_572278, JString, required = true,
                                 default = nil)
  if valid_572278 != nil:
    section.add "resourceGroupName", valid_572278
  var valid_572279 = path.getOrDefault("name")
  valid_572279 = validateParameter(valid_572279, JString, required = true,
                                 default = nil)
  if valid_572279 != nil:
    section.add "name", valid_572279
  var valid_572280 = path.getOrDefault("subscriptionId")
  valid_572280 = validateParameter(valid_572280, JString, required = true,
                                 default = nil)
  if valid_572280 != nil:
    section.add "subscriptionId", valid_572280
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572281 = query.getOrDefault("api-version")
  valid_572281 = validateParameter(valid_572281, JString, required = true,
                                 default = nil)
  if valid_572281 != nil:
    section.add "api-version", valid_572281
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572282: Call_WebAppsListSnapshots_572275; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns all Snapshots to the user.
  ## 
  let valid = call_572282.validator(path, query, header, formData, body)
  let scheme = call_572282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572282.url(scheme.get, call_572282.host, call_572282.base,
                         call_572282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572282, url, valid)

proc call*(call_572283: Call_WebAppsListSnapshots_572275;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshots
  ## Returns all Snapshots to the user.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572284 = newJObject()
  var query_572285 = newJObject()
  add(path_572284, "resourceGroupName", newJString(resourceGroupName))
  add(query_572285, "api-version", newJString(apiVersion))
  add(path_572284, "name", newJString(name))
  add(path_572284, "subscriptionId", newJString(subscriptionId))
  result = call_572283.call(path_572284, query_572285, nil, nil, nil)

var webAppsListSnapshots* = Call_WebAppsListSnapshots_572275(
    name: "webAppsListSnapshots", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
    validator: validate_WebAppsListSnapshots_572276, base: "",
    url: url_WebAppsListSnapshots_572277, schemes: {Scheme.Https})
type
  Call_WebAppsListSnapshotsFromDRSecondary_572286 = ref object of OpenApiRestCall_567666
proc url_WebAppsListSnapshotsFromDRSecondary_572288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/snapshotsdr")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListSnapshotsFromDRSecondary_572287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Website Name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572289 = path.getOrDefault("resourceGroupName")
  valid_572289 = validateParameter(valid_572289, JString, required = true,
                                 default = nil)
  if valid_572289 != nil:
    section.add "resourceGroupName", valid_572289
  var valid_572290 = path.getOrDefault("name")
  valid_572290 = validateParameter(valid_572290, JString, required = true,
                                 default = nil)
  if valid_572290 != nil:
    section.add "name", valid_572290
  var valid_572291 = path.getOrDefault("subscriptionId")
  valid_572291 = validateParameter(valid_572291, JString, required = true,
                                 default = nil)
  if valid_572291 != nil:
    section.add "subscriptionId", valid_572291
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572292 = query.getOrDefault("api-version")
  valid_572292 = validateParameter(valid_572292, JString, required = true,
                                 default = nil)
  if valid_572292 != nil:
    section.add "api-version", valid_572292
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572293: Call_WebAppsListSnapshotsFromDRSecondary_572286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ## 
  let valid = call_572293.validator(path, query, header, formData, body)
  let scheme = call_572293.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572293.url(scheme.get, call_572293.host, call_572293.base,
                         call_572293.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572293, url, valid)

proc call*(call_572294: Call_WebAppsListSnapshotsFromDRSecondary_572286;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListSnapshotsFromDRSecondary
  ## Returns all Snapshots to the user from DRSecondary endpoint.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Website Name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572295 = newJObject()
  var query_572296 = newJObject()
  add(path_572295, "resourceGroupName", newJString(resourceGroupName))
  add(query_572296, "api-version", newJString(apiVersion))
  add(path_572295, "name", newJString(name))
  add(path_572295, "subscriptionId", newJString(subscriptionId))
  result = call_572294.call(path_572295, query_572296, nil, nil, nil)

var webAppsListSnapshotsFromDRSecondary* = Call_WebAppsListSnapshotsFromDRSecondary_572286(
    name: "webAppsListSnapshotsFromDRSecondary", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshotsdr",
    validator: validate_WebAppsListSnapshotsFromDRSecondary_572287, base: "",
    url: url_WebAppsListSnapshotsFromDRSecondary_572288, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateSourceControl_572308 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateSourceControl_572310(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateSourceControl_572309(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572311 = path.getOrDefault("resourceGroupName")
  valid_572311 = validateParameter(valid_572311, JString, required = true,
                                 default = nil)
  if valid_572311 != nil:
    section.add "resourceGroupName", valid_572311
  var valid_572312 = path.getOrDefault("name")
  valid_572312 = validateParameter(valid_572312, JString, required = true,
                                 default = nil)
  if valid_572312 != nil:
    section.add "name", valid_572312
  var valid_572313 = path.getOrDefault("subscriptionId")
  valid_572313 = validateParameter(valid_572313, JString, required = true,
                                 default = nil)
  if valid_572313 != nil:
    section.add "subscriptionId", valid_572313
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572314 = query.getOrDefault("api-version")
  valid_572314 = validateParameter(valid_572314, JString, required = true,
                                 default = nil)
  if valid_572314 != nil:
    section.add "api-version", valid_572314
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572316: Call_WebAppsCreateOrUpdateSourceControl_572308;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_572316.validator(path, query, header, formData, body)
  let scheme = call_572316.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572316.url(scheme.get, call_572316.host, call_572316.base,
                         call_572316.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572316, url, valid)

proc call*(call_572317: Call_WebAppsCreateOrUpdateSourceControl_572308;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsCreateOrUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_572318 = newJObject()
  var query_572319 = newJObject()
  var body_572320 = newJObject()
  add(path_572318, "resourceGroupName", newJString(resourceGroupName))
  add(query_572319, "api-version", newJString(apiVersion))
  add(path_572318, "name", newJString(name))
  add(path_572318, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_572320 = siteSourceControl
  result = call_572317.call(path_572318, query_572319, nil, nil, body_572320)

var webAppsCreateOrUpdateSourceControl* = Call_WebAppsCreateOrUpdateSourceControl_572308(
    name: "webAppsCreateOrUpdateSourceControl", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsCreateOrUpdateSourceControl_572309, base: "",
    url: url_WebAppsCreateOrUpdateSourceControl_572310, schemes: {Scheme.Https})
type
  Call_WebAppsGetSourceControl_572297 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetSourceControl_572299(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetSourceControl_572298(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572300 = path.getOrDefault("resourceGroupName")
  valid_572300 = validateParameter(valid_572300, JString, required = true,
                                 default = nil)
  if valid_572300 != nil:
    section.add "resourceGroupName", valid_572300
  var valid_572301 = path.getOrDefault("name")
  valid_572301 = validateParameter(valid_572301, JString, required = true,
                                 default = nil)
  if valid_572301 != nil:
    section.add "name", valid_572301
  var valid_572302 = path.getOrDefault("subscriptionId")
  valid_572302 = validateParameter(valid_572302, JString, required = true,
                                 default = nil)
  if valid_572302 != nil:
    section.add "subscriptionId", valid_572302
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572303 = query.getOrDefault("api-version")
  valid_572303 = validateParameter(valid_572303, JString, required = true,
                                 default = nil)
  if valid_572303 != nil:
    section.add "api-version", valid_572303
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572304: Call_WebAppsGetSourceControl_572297; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the source control configuration of an app.
  ## 
  let valid = call_572304.validator(path, query, header, formData, body)
  let scheme = call_572304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572304.url(scheme.get, call_572304.host, call_572304.base,
                         call_572304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572304, url, valid)

proc call*(call_572305: Call_WebAppsGetSourceControl_572297;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsGetSourceControl
  ## Gets the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572306 = newJObject()
  var query_572307 = newJObject()
  add(path_572306, "resourceGroupName", newJString(resourceGroupName))
  add(query_572307, "api-version", newJString(apiVersion))
  add(path_572306, "name", newJString(name))
  add(path_572306, "subscriptionId", newJString(subscriptionId))
  result = call_572305.call(path_572306, query_572307, nil, nil, nil)

var webAppsGetSourceControl* = Call_WebAppsGetSourceControl_572297(
    name: "webAppsGetSourceControl", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsGetSourceControl_572298, base: "",
    url: url_WebAppsGetSourceControl_572299, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateSourceControl_572332 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateSourceControl_572334(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateSourceControl_572333(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572335 = path.getOrDefault("resourceGroupName")
  valid_572335 = validateParameter(valid_572335, JString, required = true,
                                 default = nil)
  if valid_572335 != nil:
    section.add "resourceGroupName", valid_572335
  var valid_572336 = path.getOrDefault("name")
  valid_572336 = validateParameter(valid_572336, JString, required = true,
                                 default = nil)
  if valid_572336 != nil:
    section.add "name", valid_572336
  var valid_572337 = path.getOrDefault("subscriptionId")
  valid_572337 = validateParameter(valid_572337, JString, required = true,
                                 default = nil)
  if valid_572337 != nil:
    section.add "subscriptionId", valid_572337
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572338 = query.getOrDefault("api-version")
  valid_572338 = validateParameter(valid_572338, JString, required = true,
                                 default = nil)
  if valid_572338 != nil:
    section.add "api-version", valid_572338
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572340: Call_WebAppsUpdateSourceControl_572332; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the source control configuration of an app.
  ## 
  let valid = call_572340.validator(path, query, header, formData, body)
  let scheme = call_572340.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572340.url(scheme.get, call_572340.host, call_572340.base,
                         call_572340.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572340, url, valid)

proc call*(call_572341: Call_WebAppsUpdateSourceControl_572332;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; siteSourceControl: JsonNode): Recallable =
  ## webAppsUpdateSourceControl
  ## Updates the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   siteSourceControl: JObject (required)
  ##                    : JSON representation of a SiteSourceControl object. See example.
  var path_572342 = newJObject()
  var query_572343 = newJObject()
  var body_572344 = newJObject()
  add(path_572342, "resourceGroupName", newJString(resourceGroupName))
  add(query_572343, "api-version", newJString(apiVersion))
  add(path_572342, "name", newJString(name))
  add(path_572342, "subscriptionId", newJString(subscriptionId))
  if siteSourceControl != nil:
    body_572344 = siteSourceControl
  result = call_572341.call(path_572342, query_572343, nil, nil, body_572344)

var webAppsUpdateSourceControl* = Call_WebAppsUpdateSourceControl_572332(
    name: "webAppsUpdateSourceControl", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsUpdateSourceControl_572333, base: "",
    url: url_WebAppsUpdateSourceControl_572334, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteSourceControl_572321 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteSourceControl_572323(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sourcecontrols/web")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteSourceControl_572322(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the source control configuration of an app.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572324 = path.getOrDefault("resourceGroupName")
  valid_572324 = validateParameter(valid_572324, JString, required = true,
                                 default = nil)
  if valid_572324 != nil:
    section.add "resourceGroupName", valid_572324
  var valid_572325 = path.getOrDefault("name")
  valid_572325 = validateParameter(valid_572325, JString, required = true,
                                 default = nil)
  if valid_572325 != nil:
    section.add "name", valid_572325
  var valid_572326 = path.getOrDefault("subscriptionId")
  valid_572326 = validateParameter(valid_572326, JString, required = true,
                                 default = nil)
  if valid_572326 != nil:
    section.add "subscriptionId", valid_572326
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572327 = query.getOrDefault("api-version")
  valid_572327 = validateParameter(valid_572327, JString, required = true,
                                 default = nil)
  if valid_572327 != nil:
    section.add "api-version", valid_572327
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572328: Call_WebAppsDeleteSourceControl_572321; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the source control configuration of an app.
  ## 
  let valid = call_572328.validator(path, query, header, formData, body)
  let scheme = call_572328.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572328.url(scheme.get, call_572328.host, call_572328.base,
                         call_572328.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572328, url, valid)

proc call*(call_572329: Call_WebAppsDeleteSourceControl_572321;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsDeleteSourceControl
  ## Deletes the source control configuration of an app.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572330 = newJObject()
  var query_572331 = newJObject()
  add(path_572330, "resourceGroupName", newJString(resourceGroupName))
  add(query_572331, "api-version", newJString(apiVersion))
  add(path_572330, "name", newJString(name))
  add(path_572330, "subscriptionId", newJString(subscriptionId))
  result = call_572329.call(path_572330, query_572331, nil, nil, nil)

var webAppsDeleteSourceControl* = Call_WebAppsDeleteSourceControl_572321(
    name: "webAppsDeleteSourceControl", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    validator: validate_WebAppsDeleteSourceControl_572322, base: "",
    url: url_WebAppsDeleteSourceControl_572323, schemes: {Scheme.Https})
type
  Call_WebAppsStart_572345 = ref object of OpenApiRestCall_567666
proc url_WebAppsStart_572347(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/start")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStart_572346(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572348 = path.getOrDefault("resourceGroupName")
  valid_572348 = validateParameter(valid_572348, JString, required = true,
                                 default = nil)
  if valid_572348 != nil:
    section.add "resourceGroupName", valid_572348
  var valid_572349 = path.getOrDefault("name")
  valid_572349 = validateParameter(valid_572349, JString, required = true,
                                 default = nil)
  if valid_572349 != nil:
    section.add "name", valid_572349
  var valid_572350 = path.getOrDefault("subscriptionId")
  valid_572350 = validateParameter(valid_572350, JString, required = true,
                                 default = nil)
  if valid_572350 != nil:
    section.add "subscriptionId", valid_572350
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572351 = query.getOrDefault("api-version")
  valid_572351 = validateParameter(valid_572351, JString, required = true,
                                 default = nil)
  if valid_572351 != nil:
    section.add "api-version", valid_572351
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572352: Call_WebAppsStart_572345; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts an app (or deployment slot, if specified).
  ## 
  let valid = call_572352.validator(path, query, header, formData, body)
  let scheme = call_572352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572352.url(scheme.get, call_572352.host, call_572352.base,
                         call_572352.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572352, url, valid)

proc call*(call_572353: Call_WebAppsStart_572345; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsStart
  ## Starts an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572354 = newJObject()
  var query_572355 = newJObject()
  add(path_572354, "resourceGroupName", newJString(resourceGroupName))
  add(query_572355, "api-version", newJString(apiVersion))
  add(path_572354, "name", newJString(name))
  add(path_572354, "subscriptionId", newJString(subscriptionId))
  result = call_572353.call(path_572354, query_572355, nil, nil, nil)

var webAppsStart* = Call_WebAppsStart_572345(name: "webAppsStart",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
    validator: validate_WebAppsStart_572346, base: "", url: url_WebAppsStart_572347,
    schemes: {Scheme.Https})
type
  Call_WebAppsStartNetworkTrace_572356 = ref object of OpenApiRestCall_567666
proc url_WebAppsStartNetworkTrace_572358(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/startNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStartNetworkTrace_572357(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Start capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572359 = path.getOrDefault("resourceGroupName")
  valid_572359 = validateParameter(valid_572359, JString, required = true,
                                 default = nil)
  if valid_572359 != nil:
    section.add "resourceGroupName", valid_572359
  var valid_572360 = path.getOrDefault("name")
  valid_572360 = validateParameter(valid_572360, JString, required = true,
                                 default = nil)
  if valid_572360 != nil:
    section.add "name", valid_572360
  var valid_572361 = path.getOrDefault("subscriptionId")
  valid_572361 = validateParameter(valid_572361, JString, required = true,
                                 default = nil)
  if valid_572361 != nil:
    section.add "subscriptionId", valid_572361
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   durationInSeconds: JInt
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: JInt
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: JString
  ##         : The Blob URL to store capture file.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572362 = query.getOrDefault("api-version")
  valid_572362 = validateParameter(valid_572362, JString, required = true,
                                 default = nil)
  if valid_572362 != nil:
    section.add "api-version", valid_572362
  var valid_572363 = query.getOrDefault("durationInSeconds")
  valid_572363 = validateParameter(valid_572363, JInt, required = false, default = nil)
  if valid_572363 != nil:
    section.add "durationInSeconds", valid_572363
  var valid_572364 = query.getOrDefault("maxFrameLength")
  valid_572364 = validateParameter(valid_572364, JInt, required = false, default = nil)
  if valid_572364 != nil:
    section.add "maxFrameLength", valid_572364
  var valid_572365 = query.getOrDefault("sasUrl")
  valid_572365 = validateParameter(valid_572365, JString, required = false,
                                 default = nil)
  if valid_572365 != nil:
    section.add "sasUrl", valid_572365
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572366: Call_WebAppsStartNetworkTrace_572356; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start capturing network packets for the site.
  ## 
  let valid = call_572366.validator(path, query, header, formData, body)
  let scheme = call_572366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572366.url(scheme.get, call_572366.host, call_572366.base,
                         call_572366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572366, url, valid)

proc call*(call_572367: Call_WebAppsStartNetworkTrace_572356;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; durationInSeconds: int = 0; maxFrameLength: int = 0;
          sasUrl: string = ""): Recallable =
  ## webAppsStartNetworkTrace
  ## Start capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   durationInSeconds: int
  ##                    : The duration to keep capturing in seconds.
  ##   maxFrameLength: int
  ##                 : The maximum frame length in bytes (Optional).
  ##   sasUrl: string
  ##         : The Blob URL to store capture file.
  var path_572368 = newJObject()
  var query_572369 = newJObject()
  add(path_572368, "resourceGroupName", newJString(resourceGroupName))
  add(query_572369, "api-version", newJString(apiVersion))
  add(path_572368, "name", newJString(name))
  add(path_572368, "subscriptionId", newJString(subscriptionId))
  add(query_572369, "durationInSeconds", newJInt(durationInSeconds))
  add(query_572369, "maxFrameLength", newJInt(maxFrameLength))
  add(query_572369, "sasUrl", newJString(sasUrl))
  result = call_572367.call(path_572368, query_572369, nil, nil, nil)

var webAppsStartNetworkTrace* = Call_WebAppsStartNetworkTrace_572356(
    name: "webAppsStartNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace",
    validator: validate_WebAppsStartNetworkTrace_572357, base: "",
    url: url_WebAppsStartNetworkTrace_572358, schemes: {Scheme.Https})
type
  Call_WebAppsStop_572370 = ref object of OpenApiRestCall_567666
proc url_WebAppsStop_572372(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stop")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStop_572371(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## Stops an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572373 = path.getOrDefault("resourceGroupName")
  valid_572373 = validateParameter(valid_572373, JString, required = true,
                                 default = nil)
  if valid_572373 != nil:
    section.add "resourceGroupName", valid_572373
  var valid_572374 = path.getOrDefault("name")
  valid_572374 = validateParameter(valid_572374, JString, required = true,
                                 default = nil)
  if valid_572374 != nil:
    section.add "name", valid_572374
  var valid_572375 = path.getOrDefault("subscriptionId")
  valid_572375 = validateParameter(valid_572375, JString, required = true,
                                 default = nil)
  if valid_572375 != nil:
    section.add "subscriptionId", valid_572375
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572376 = query.getOrDefault("api-version")
  valid_572376 = validateParameter(valid_572376, JString, required = true,
                                 default = nil)
  if valid_572376 != nil:
    section.add "api-version", valid_572376
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572377: Call_WebAppsStop_572370; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stops an app (or deployment slot, if specified).
  ## 
  let valid = call_572377.validator(path, query, header, formData, body)
  let scheme = call_572377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572377.url(scheme.get, call_572377.host, call_572377.base,
                         call_572377.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572377, url, valid)

proc call*(call_572378: Call_WebAppsStop_572370; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsStop
  ## Stops an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572379 = newJObject()
  var query_572380 = newJObject()
  add(path_572379, "resourceGroupName", newJString(resourceGroupName))
  add(query_572380, "api-version", newJString(apiVersion))
  add(path_572379, "name", newJString(name))
  add(path_572379, "subscriptionId", newJString(subscriptionId))
  result = call_572378.call(path_572379, query_572380, nil, nil, nil)

var webAppsStop* = Call_WebAppsStop_572370(name: "webAppsStop",
                                        meth: HttpMethod.HttpPost,
                                        host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
                                        validator: validate_WebAppsStop_572371,
                                        base: "", url: url_WebAppsStop_572372,
                                        schemes: {Scheme.Https})
type
  Call_WebAppsStopNetworkTrace_572381 = ref object of OpenApiRestCall_567666
proc url_WebAppsStopNetworkTrace_572383(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/stopNetworkTrace")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsStopNetworkTrace_572382(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop ongoing capturing network packets for the site.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : The name of the web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572384 = path.getOrDefault("resourceGroupName")
  valid_572384 = validateParameter(valid_572384, JString, required = true,
                                 default = nil)
  if valid_572384 != nil:
    section.add "resourceGroupName", valid_572384
  var valid_572385 = path.getOrDefault("name")
  valid_572385 = validateParameter(valid_572385, JString, required = true,
                                 default = nil)
  if valid_572385 != nil:
    section.add "name", valid_572385
  var valid_572386 = path.getOrDefault("subscriptionId")
  valid_572386 = validateParameter(valid_572386, JString, required = true,
                                 default = nil)
  if valid_572386 != nil:
    section.add "subscriptionId", valid_572386
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572387 = query.getOrDefault("api-version")
  valid_572387 = validateParameter(valid_572387, JString, required = true,
                                 default = nil)
  if valid_572387 != nil:
    section.add "api-version", valid_572387
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572388: Call_WebAppsStopNetworkTrace_572381; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop ongoing capturing network packets for the site.
  ## 
  let valid = call_572388.validator(path, query, header, formData, body)
  let scheme = call_572388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572388.url(scheme.get, call_572388.host, call_572388.base,
                         call_572388.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572388, url, valid)

proc call*(call_572389: Call_WebAppsStopNetworkTrace_572381;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsStopNetworkTrace
  ## Stop ongoing capturing network packets for the site.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : The name of the web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572390 = newJObject()
  var query_572391 = newJObject()
  add(path_572390, "resourceGroupName", newJString(resourceGroupName))
  add(query_572391, "api-version", newJString(apiVersion))
  add(path_572390, "name", newJString(name))
  add(path_572390, "subscriptionId", newJString(subscriptionId))
  result = call_572389.call(path_572390, query_572391, nil, nil, nil)

var webAppsStopNetworkTrace* = Call_WebAppsStopNetworkTrace_572381(
    name: "webAppsStopNetworkTrace", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stopNetworkTrace",
    validator: validate_WebAppsStopNetworkTrace_572382, base: "",
    url: url_WebAppsStopNetworkTrace_572383, schemes: {Scheme.Https})
type
  Call_WebAppsSyncRepository_572392 = ref object of OpenApiRestCall_567666
proc url_WebAppsSyncRepository_572394(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/sync")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncRepository_572393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sync web app repository.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of web app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572395 = path.getOrDefault("resourceGroupName")
  valid_572395 = validateParameter(valid_572395, JString, required = true,
                                 default = nil)
  if valid_572395 != nil:
    section.add "resourceGroupName", valid_572395
  var valid_572396 = path.getOrDefault("name")
  valid_572396 = validateParameter(valid_572396, JString, required = true,
                                 default = nil)
  if valid_572396 != nil:
    section.add "name", valid_572396
  var valid_572397 = path.getOrDefault("subscriptionId")
  valid_572397 = validateParameter(valid_572397, JString, required = true,
                                 default = nil)
  if valid_572397 != nil:
    section.add "subscriptionId", valid_572397
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572398 = query.getOrDefault("api-version")
  valid_572398 = validateParameter(valid_572398, JString, required = true,
                                 default = nil)
  if valid_572398 != nil:
    section.add "api-version", valid_572398
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572399: Call_WebAppsSyncRepository_572392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Sync web app repository.
  ## 
  let valid = call_572399.validator(path, query, header, formData, body)
  let scheme = call_572399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572399.url(scheme.get, call_572399.host, call_572399.base,
                         call_572399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572399, url, valid)

proc call*(call_572400: Call_WebAppsSyncRepository_572392;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncRepository
  ## Sync web app repository.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of web app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572401 = newJObject()
  var query_572402 = newJObject()
  add(path_572401, "resourceGroupName", newJString(resourceGroupName))
  add(query_572402, "api-version", newJString(apiVersion))
  add(path_572401, "name", newJString(name))
  add(path_572401, "subscriptionId", newJString(subscriptionId))
  result = call_572400.call(path_572401, query_572402, nil, nil, nil)

var webAppsSyncRepository* = Call_WebAppsSyncRepository_572392(
    name: "webAppsSyncRepository", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
    validator: validate_WebAppsSyncRepository_572393, base: "",
    url: url_WebAppsSyncRepository_572394, schemes: {Scheme.Https})
type
  Call_WebAppsSyncFunctionTriggers_572403 = ref object of OpenApiRestCall_567666
proc url_WebAppsSyncFunctionTriggers_572405(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/syncfunctiontriggers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsSyncFunctionTriggers_572404(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Syncs function trigger metadata to the scale controller
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572406 = path.getOrDefault("resourceGroupName")
  valid_572406 = validateParameter(valid_572406, JString, required = true,
                                 default = nil)
  if valid_572406 != nil:
    section.add "resourceGroupName", valid_572406
  var valid_572407 = path.getOrDefault("name")
  valid_572407 = validateParameter(valid_572407, JString, required = true,
                                 default = nil)
  if valid_572407 != nil:
    section.add "name", valid_572407
  var valid_572408 = path.getOrDefault("subscriptionId")
  valid_572408 = validateParameter(valid_572408, JString, required = true,
                                 default = nil)
  if valid_572408 != nil:
    section.add "subscriptionId", valid_572408
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572409 = query.getOrDefault("api-version")
  valid_572409 = validateParameter(valid_572409, JString, required = true,
                                 default = nil)
  if valid_572409 != nil:
    section.add "api-version", valid_572409
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572410: Call_WebAppsSyncFunctionTriggers_572403; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Syncs function trigger metadata to the scale controller
  ## 
  let valid = call_572410.validator(path, query, header, formData, body)
  let scheme = call_572410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572410.url(scheme.get, call_572410.host, call_572410.base,
                         call_572410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572410, url, valid)

proc call*(call_572411: Call_WebAppsSyncFunctionTriggers_572403;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsSyncFunctionTriggers
  ## Syncs function trigger metadata to the scale controller
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572412 = newJObject()
  var query_572413 = newJObject()
  add(path_572412, "resourceGroupName", newJString(resourceGroupName))
  add(query_572413, "api-version", newJString(apiVersion))
  add(path_572412, "name", newJString(name))
  add(path_572412, "subscriptionId", newJString(subscriptionId))
  result = call_572411.call(path_572412, query_572413, nil, nil, nil)

var webAppsSyncFunctionTriggers* = Call_WebAppsSyncFunctionTriggers_572403(
    name: "webAppsSyncFunctionTriggers", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers",
    validator: validate_WebAppsSyncFunctionTriggers_572404, base: "",
    url: url_WebAppsSyncFunctionTriggers_572405, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobs_572414 = ref object of OpenApiRestCall_567666
proc url_WebAppsListTriggeredWebJobs_572416(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobs_572415(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572417 = path.getOrDefault("resourceGroupName")
  valid_572417 = validateParameter(valid_572417, JString, required = true,
                                 default = nil)
  if valid_572417 != nil:
    section.add "resourceGroupName", valid_572417
  var valid_572418 = path.getOrDefault("name")
  valid_572418 = validateParameter(valid_572418, JString, required = true,
                                 default = nil)
  if valid_572418 != nil:
    section.add "name", valid_572418
  var valid_572419 = path.getOrDefault("subscriptionId")
  valid_572419 = validateParameter(valid_572419, JString, required = true,
                                 default = nil)
  if valid_572419 != nil:
    section.add "subscriptionId", valid_572419
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572420 = query.getOrDefault("api-version")
  valid_572420 = validateParameter(valid_572420, JString, required = true,
                                 default = nil)
  if valid_572420 != nil:
    section.add "api-version", valid_572420
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572421: Call_WebAppsListTriggeredWebJobs_572414; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List triggered web jobs for an app, or a deployment slot.
  ## 
  let valid = call_572421.validator(path, query, header, formData, body)
  let scheme = call_572421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572421.url(scheme.get, call_572421.host, call_572421.base,
                         call_572421.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572421, url, valid)

proc call*(call_572422: Call_WebAppsListTriggeredWebJobs_572414;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListTriggeredWebJobs
  ## List triggered web jobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572423 = newJObject()
  var query_572424 = newJObject()
  add(path_572423, "resourceGroupName", newJString(resourceGroupName))
  add(query_572424, "api-version", newJString(apiVersion))
  add(path_572423, "name", newJString(name))
  add(path_572423, "subscriptionId", newJString(subscriptionId))
  result = call_572422.call(path_572423, query_572424, nil, nil, nil)

var webAppsListTriggeredWebJobs* = Call_WebAppsListTriggeredWebJobs_572414(
    name: "webAppsListTriggeredWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs",
    validator: validate_WebAppsListTriggeredWebJobs_572415, base: "",
    url: url_WebAppsListTriggeredWebJobs_572416, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJob_572425 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetTriggeredWebJob_572427(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJob_572426(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572428 = path.getOrDefault("resourceGroupName")
  valid_572428 = validateParameter(valid_572428, JString, required = true,
                                 default = nil)
  if valid_572428 != nil:
    section.add "resourceGroupName", valid_572428
  var valid_572429 = path.getOrDefault("name")
  valid_572429 = validateParameter(valid_572429, JString, required = true,
                                 default = nil)
  if valid_572429 != nil:
    section.add "name", valid_572429
  var valid_572430 = path.getOrDefault("subscriptionId")
  valid_572430 = validateParameter(valid_572430, JString, required = true,
                                 default = nil)
  if valid_572430 != nil:
    section.add "subscriptionId", valid_572430
  var valid_572431 = path.getOrDefault("webJobName")
  valid_572431 = validateParameter(valid_572431, JString, required = true,
                                 default = nil)
  if valid_572431 != nil:
    section.add "webJobName", valid_572431
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572432 = query.getOrDefault("api-version")
  valid_572432 = validateParameter(valid_572432, JString, required = true,
                                 default = nil)
  if valid_572432 != nil:
    section.add "api-version", valid_572432
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572433: Call_WebAppsGetTriggeredWebJob_572425; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_572433.validator(path, query, header, formData, body)
  let scheme = call_572433.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572433.url(scheme.get, call_572433.host, call_572433.base,
                         call_572433.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572433, url, valid)

proc call*(call_572434: Call_WebAppsGetTriggeredWebJob_572425;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJob
  ## Gets a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_572435 = newJObject()
  var query_572436 = newJObject()
  add(path_572435, "resourceGroupName", newJString(resourceGroupName))
  add(query_572436, "api-version", newJString(apiVersion))
  add(path_572435, "name", newJString(name))
  add(path_572435, "subscriptionId", newJString(subscriptionId))
  add(path_572435, "webJobName", newJString(webJobName))
  result = call_572434.call(path_572435, query_572436, nil, nil, nil)

var webAppsGetTriggeredWebJob* = Call_WebAppsGetTriggeredWebJob_572425(
    name: "webAppsGetTriggeredWebJob", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsGetTriggeredWebJob_572426, base: "",
    url: url_WebAppsGetTriggeredWebJob_572427, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteTriggeredWebJob_572437 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteTriggeredWebJob_572439(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteTriggeredWebJob_572438(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572440 = path.getOrDefault("resourceGroupName")
  valid_572440 = validateParameter(valid_572440, JString, required = true,
                                 default = nil)
  if valid_572440 != nil:
    section.add "resourceGroupName", valid_572440
  var valid_572441 = path.getOrDefault("name")
  valid_572441 = validateParameter(valid_572441, JString, required = true,
                                 default = nil)
  if valid_572441 != nil:
    section.add "name", valid_572441
  var valid_572442 = path.getOrDefault("subscriptionId")
  valid_572442 = validateParameter(valid_572442, JString, required = true,
                                 default = nil)
  if valid_572442 != nil:
    section.add "subscriptionId", valid_572442
  var valid_572443 = path.getOrDefault("webJobName")
  valid_572443 = validateParameter(valid_572443, JString, required = true,
                                 default = nil)
  if valid_572443 != nil:
    section.add "webJobName", valid_572443
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572444 = query.getOrDefault("api-version")
  valid_572444 = validateParameter(valid_572444, JString, required = true,
                                 default = nil)
  if valid_572444 != nil:
    section.add "api-version", valid_572444
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572445: Call_WebAppsDeleteTriggeredWebJob_572437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ## 
  let valid = call_572445.validator(path, query, header, formData, body)
  let scheme = call_572445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572445.url(scheme.get, call_572445.host, call_572445.base,
                         call_572445.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572445, url, valid)

proc call*(call_572446: Call_WebAppsDeleteTriggeredWebJob_572437;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsDeleteTriggeredWebJob
  ## Delete a triggered web job by its ID for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_572447 = newJObject()
  var query_572448 = newJObject()
  add(path_572447, "resourceGroupName", newJString(resourceGroupName))
  add(query_572448, "api-version", newJString(apiVersion))
  add(path_572447, "name", newJString(name))
  add(path_572447, "subscriptionId", newJString(subscriptionId))
  add(path_572447, "webJobName", newJString(webJobName))
  result = call_572446.call(path_572447, query_572448, nil, nil, nil)

var webAppsDeleteTriggeredWebJob* = Call_WebAppsDeleteTriggeredWebJob_572437(
    name: "webAppsDeleteTriggeredWebJob", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    validator: validate_WebAppsDeleteTriggeredWebJob_572438, base: "",
    url: url_WebAppsDeleteTriggeredWebJob_572439, schemes: {Scheme.Https})
type
  Call_WebAppsListTriggeredWebJobHistory_572449 = ref object of OpenApiRestCall_567666
proc url_WebAppsListTriggeredWebJobHistory_572451(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListTriggeredWebJobHistory_572450(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572452 = path.getOrDefault("resourceGroupName")
  valid_572452 = validateParameter(valid_572452, JString, required = true,
                                 default = nil)
  if valid_572452 != nil:
    section.add "resourceGroupName", valid_572452
  var valid_572453 = path.getOrDefault("name")
  valid_572453 = validateParameter(valid_572453, JString, required = true,
                                 default = nil)
  if valid_572453 != nil:
    section.add "name", valid_572453
  var valid_572454 = path.getOrDefault("subscriptionId")
  valid_572454 = validateParameter(valid_572454, JString, required = true,
                                 default = nil)
  if valid_572454 != nil:
    section.add "subscriptionId", valid_572454
  var valid_572455 = path.getOrDefault("webJobName")
  valid_572455 = validateParameter(valid_572455, JString, required = true,
                                 default = nil)
  if valid_572455 != nil:
    section.add "webJobName", valid_572455
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572456 = query.getOrDefault("api-version")
  valid_572456 = validateParameter(valid_572456, JString, required = true,
                                 default = nil)
  if valid_572456 != nil:
    section.add "api-version", valid_572456
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572457: Call_WebAppsListTriggeredWebJobHistory_572449;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## List a triggered web job's history for an app, or a deployment slot.
  ## 
  let valid = call_572457.validator(path, query, header, formData, body)
  let scheme = call_572457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572457.url(scheme.get, call_572457.host, call_572457.base,
                         call_572457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572457, url, valid)

proc call*(call_572458: Call_WebAppsListTriggeredWebJobHistory_572449;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsListTriggeredWebJobHistory
  ## List a triggered web job's history for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_572459 = newJObject()
  var query_572460 = newJObject()
  add(path_572459, "resourceGroupName", newJString(resourceGroupName))
  add(query_572460, "api-version", newJString(apiVersion))
  add(path_572459, "name", newJString(name))
  add(path_572459, "subscriptionId", newJString(subscriptionId))
  add(path_572459, "webJobName", newJString(webJobName))
  result = call_572458.call(path_572459, query_572460, nil, nil, nil)

var webAppsListTriggeredWebJobHistory* = Call_WebAppsListTriggeredWebJobHistory_572449(
    name: "webAppsListTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history",
    validator: validate_WebAppsListTriggeredWebJobHistory_572450, base: "",
    url: url_WebAppsListTriggeredWebJobHistory_572451, schemes: {Scheme.Https})
type
  Call_WebAppsGetTriggeredWebJobHistory_572461 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetTriggeredWebJobHistory_572463(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  assert "id" in path, "`id` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/history/"),
               (kind: VariableSegment, value: "id")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetTriggeredWebJobHistory_572462(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: JString (required)
  ##     : History ID.
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572464 = path.getOrDefault("resourceGroupName")
  valid_572464 = validateParameter(valid_572464, JString, required = true,
                                 default = nil)
  if valid_572464 != nil:
    section.add "resourceGroupName", valid_572464
  var valid_572465 = path.getOrDefault("name")
  valid_572465 = validateParameter(valid_572465, JString, required = true,
                                 default = nil)
  if valid_572465 != nil:
    section.add "name", valid_572465
  var valid_572466 = path.getOrDefault("subscriptionId")
  valid_572466 = validateParameter(valid_572466, JString, required = true,
                                 default = nil)
  if valid_572466 != nil:
    section.add "subscriptionId", valid_572466
  var valid_572467 = path.getOrDefault("id")
  valid_572467 = validateParameter(valid_572467, JString, required = true,
                                 default = nil)
  if valid_572467 != nil:
    section.add "id", valid_572467
  var valid_572468 = path.getOrDefault("webJobName")
  valid_572468 = validateParameter(valid_572468, JString, required = true,
                                 default = nil)
  if valid_572468 != nil:
    section.add "webJobName", valid_572468
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572469 = query.getOrDefault("api-version")
  valid_572469 = validateParameter(valid_572469, JString, required = true,
                                 default = nil)
  if valid_572469 != nil:
    section.add "api-version", valid_572469
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572470: Call_WebAppsGetTriggeredWebJobHistory_572461;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ## 
  let valid = call_572470.validator(path, query, header, formData, body)
  let scheme = call_572470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572470.url(scheme.get, call_572470.host, call_572470.base,
                         call_572470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572470, url, valid)

proc call*(call_572471: Call_WebAppsGetTriggeredWebJobHistory_572461;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; id: string; webJobName: string): Recallable =
  ## webAppsGetTriggeredWebJobHistory
  ## Gets a triggered web job's history by its ID for an app, , or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   id: string (required)
  ##     : History ID.
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_572472 = newJObject()
  var query_572473 = newJObject()
  add(path_572472, "resourceGroupName", newJString(resourceGroupName))
  add(query_572473, "api-version", newJString(apiVersion))
  add(path_572472, "name", newJString(name))
  add(path_572472, "subscriptionId", newJString(subscriptionId))
  add(path_572472, "id", newJString(id))
  add(path_572472, "webJobName", newJString(webJobName))
  result = call_572471.call(path_572472, query_572473, nil, nil, nil)

var webAppsGetTriggeredWebJobHistory* = Call_WebAppsGetTriggeredWebJobHistory_572461(
    name: "webAppsGetTriggeredWebJobHistory", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}",
    validator: validate_WebAppsGetTriggeredWebJobHistory_572462, base: "",
    url: url_WebAppsGetTriggeredWebJobHistory_572463, schemes: {Scheme.Https})
type
  Call_WebAppsRunTriggeredWebJob_572474 = ref object of OpenApiRestCall_567666
proc url_WebAppsRunTriggeredWebJob_572476(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/triggeredwebjobs/"),
               (kind: VariableSegment, value: "webJobName"),
               (kind: ConstantSegment, value: "/run")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsRunTriggeredWebJob_572475(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of Web Job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572477 = path.getOrDefault("resourceGroupName")
  valid_572477 = validateParameter(valid_572477, JString, required = true,
                                 default = nil)
  if valid_572477 != nil:
    section.add "resourceGroupName", valid_572477
  var valid_572478 = path.getOrDefault("name")
  valid_572478 = validateParameter(valid_572478, JString, required = true,
                                 default = nil)
  if valid_572478 != nil:
    section.add "name", valid_572478
  var valid_572479 = path.getOrDefault("subscriptionId")
  valid_572479 = validateParameter(valid_572479, JString, required = true,
                                 default = nil)
  if valid_572479 != nil:
    section.add "subscriptionId", valid_572479
  var valid_572480 = path.getOrDefault("webJobName")
  valid_572480 = validateParameter(valid_572480, JString, required = true,
                                 default = nil)
  if valid_572480 != nil:
    section.add "webJobName", valid_572480
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572481 = query.getOrDefault("api-version")
  valid_572481 = validateParameter(valid_572481, JString, required = true,
                                 default = nil)
  if valid_572481 != nil:
    section.add "api-version", valid_572481
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572482: Call_WebAppsRunTriggeredWebJob_572474; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Run a triggered web job for an app, or a deployment slot.
  ## 
  let valid = call_572482.validator(path, query, header, formData, body)
  let scheme = call_572482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572482.url(scheme.get, call_572482.host, call_572482.base,
                         call_572482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572482, url, valid)

proc call*(call_572483: Call_WebAppsRunTriggeredWebJob_572474;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string; webJobName: string): Recallable =
  ## webAppsRunTriggeredWebJob
  ## Run a triggered web job for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of Web Job.
  var path_572484 = newJObject()
  var query_572485 = newJObject()
  add(path_572484, "resourceGroupName", newJString(resourceGroupName))
  add(query_572485, "api-version", newJString(apiVersion))
  add(path_572484, "name", newJString(name))
  add(path_572484, "subscriptionId", newJString(subscriptionId))
  add(path_572484, "webJobName", newJString(webJobName))
  result = call_572483.call(path_572484, query_572485, nil, nil, nil)

var webAppsRunTriggeredWebJob* = Call_WebAppsRunTriggeredWebJob_572474(
    name: "webAppsRunTriggeredWebJob", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run",
    validator: validate_WebAppsRunTriggeredWebJob_572475, base: "",
    url: url_WebAppsRunTriggeredWebJob_572476, schemes: {Scheme.Https})
type
  Call_WebAppsListUsages_572486 = ref object of OpenApiRestCall_567666
proc url_WebAppsListUsages_572488(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/usages")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListUsages_572487(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572489 = path.getOrDefault("resourceGroupName")
  valid_572489 = validateParameter(valid_572489, JString, required = true,
                                 default = nil)
  if valid_572489 != nil:
    section.add "resourceGroupName", valid_572489
  var valid_572490 = path.getOrDefault("name")
  valid_572490 = validateParameter(valid_572490, JString, required = true,
                                 default = nil)
  if valid_572490 != nil:
    section.add "name", valid_572490
  var valid_572491 = path.getOrDefault("subscriptionId")
  valid_572491 = validateParameter(valid_572491, JString, required = true,
                                 default = nil)
  if valid_572491 != nil:
    section.add "subscriptionId", valid_572491
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  ##   $filter: JString
  ##          : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572492 = query.getOrDefault("api-version")
  valid_572492 = validateParameter(valid_572492, JString, required = true,
                                 default = nil)
  if valid_572492 != nil:
    section.add "api-version", valid_572492
  var valid_572493 = query.getOrDefault("$filter")
  valid_572493 = validateParameter(valid_572493, JString, required = false,
                                 default = nil)
  if valid_572493 != nil:
    section.add "$filter", valid_572493
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572494: Call_WebAppsListUsages_572486; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ## 
  let valid = call_572494.validator(path, query, header, formData, body)
  let scheme = call_572494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572494.url(scheme.get, call_572494.host, call_572494.base,
                         call_572494.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572494, url, valid)

proc call*(call_572495: Call_WebAppsListUsages_572486; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string;
          Filter: string = ""): Recallable =
  ## webAppsListUsages
  ## Gets the quota usage information of an app (or deployment slot, if specified).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   Filter: string
  ##         : Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
  var path_572496 = newJObject()
  var query_572497 = newJObject()
  add(path_572496, "resourceGroupName", newJString(resourceGroupName))
  add(query_572497, "api-version", newJString(apiVersion))
  add(path_572496, "name", newJString(name))
  add(path_572496, "subscriptionId", newJString(subscriptionId))
  add(query_572497, "$filter", newJString(Filter))
  result = call_572495.call(path_572496, query_572497, nil, nil, nil)

var webAppsListUsages* = Call_WebAppsListUsages_572486(name: "webAppsListUsages",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
    validator: validate_WebAppsListUsages_572487, base: "",
    url: url_WebAppsListUsages_572488, schemes: {Scheme.Https})
type
  Call_WebAppsListVnetConnections_572498 = ref object of OpenApiRestCall_567666
proc url_WebAppsListVnetConnections_572500(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListVnetConnections_572499(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572501 = path.getOrDefault("resourceGroupName")
  valid_572501 = validateParameter(valid_572501, JString, required = true,
                                 default = nil)
  if valid_572501 != nil:
    section.add "resourceGroupName", valid_572501
  var valid_572502 = path.getOrDefault("name")
  valid_572502 = validateParameter(valid_572502, JString, required = true,
                                 default = nil)
  if valid_572502 != nil:
    section.add "name", valid_572502
  var valid_572503 = path.getOrDefault("subscriptionId")
  valid_572503 = validateParameter(valid_572503, JString, required = true,
                                 default = nil)
  if valid_572503 != nil:
    section.add "subscriptionId", valid_572503
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572504 = query.getOrDefault("api-version")
  valid_572504 = validateParameter(valid_572504, JString, required = true,
                                 default = nil)
  if valid_572504 != nil:
    section.add "api-version", valid_572504
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572505: Call_WebAppsListVnetConnections_572498; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ## 
  let valid = call_572505.validator(path, query, header, formData, body)
  let scheme = call_572505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572505.url(scheme.get, call_572505.host, call_572505.base,
                         call_572505.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572505, url, valid)

proc call*(call_572506: Call_WebAppsListVnetConnections_572498;
          resourceGroupName: string; apiVersion: string; name: string;
          subscriptionId: string): Recallable =
  ## webAppsListVnetConnections
  ## Gets the virtual networks the app (or deployment slot) is connected to.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572507 = newJObject()
  var query_572508 = newJObject()
  add(path_572507, "resourceGroupName", newJString(resourceGroupName))
  add(query_572508, "api-version", newJString(apiVersion))
  add(path_572507, "name", newJString(name))
  add(path_572507, "subscriptionId", newJString(subscriptionId))
  result = call_572506.call(path_572507, query_572508, nil, nil, nil)

var webAppsListVnetConnections* = Call_WebAppsListVnetConnections_572498(
    name: "webAppsListVnetConnections", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
    validator: validate_WebAppsListVnetConnections_572499, base: "",
    url: url_WebAppsListVnetConnections_572500, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnection_572521 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateVnetConnection_572523(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnection_572522(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572524 = path.getOrDefault("resourceGroupName")
  valid_572524 = validateParameter(valid_572524, JString, required = true,
                                 default = nil)
  if valid_572524 != nil:
    section.add "resourceGroupName", valid_572524
  var valid_572525 = path.getOrDefault("name")
  valid_572525 = validateParameter(valid_572525, JString, required = true,
                                 default = nil)
  if valid_572525 != nil:
    section.add "name", valid_572525
  var valid_572526 = path.getOrDefault("vnetName")
  valid_572526 = validateParameter(valid_572526, JString, required = true,
                                 default = nil)
  if valid_572526 != nil:
    section.add "vnetName", valid_572526
  var valid_572527 = path.getOrDefault("subscriptionId")
  valid_572527 = validateParameter(valid_572527, JString, required = true,
                                 default = nil)
  if valid_572527 != nil:
    section.add "subscriptionId", valid_572527
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572528 = query.getOrDefault("api-version")
  valid_572528 = validateParameter(valid_572528, JString, required = true,
                                 default = nil)
  if valid_572528 != nil:
    section.add "api-version", valid_572528
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572530: Call_WebAppsCreateOrUpdateVnetConnection_572521;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_572530.validator(path, query, header, formData, body)
  let scheme = call_572530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572530.url(scheme.get, call_572530.host, call_572530.base,
                         call_572530.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572530, url, valid)

proc call*(call_572531: Call_WebAppsCreateOrUpdateVnetConnection_572521;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572532 = newJObject()
  var query_572533 = newJObject()
  var body_572534 = newJObject()
  add(path_572532, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572534 = connectionEnvelope
  add(path_572532, "name", newJString(name))
  add(path_572532, "vnetName", newJString(vnetName))
  add(query_572533, "api-version", newJString(apiVersion))
  add(path_572532, "subscriptionId", newJString(subscriptionId))
  result = call_572531.call(path_572532, query_572533, nil, nil, body_572534)

var webAppsCreateOrUpdateVnetConnection* = Call_WebAppsCreateOrUpdateVnetConnection_572521(
    name: "webAppsCreateOrUpdateVnetConnection", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnection_572522, base: "",
    url: url_WebAppsCreateOrUpdateVnetConnection_572523, schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnection_572509 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetVnetConnection_572511(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnection_572510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572512 = path.getOrDefault("resourceGroupName")
  valid_572512 = validateParameter(valid_572512, JString, required = true,
                                 default = nil)
  if valid_572512 != nil:
    section.add "resourceGroupName", valid_572512
  var valid_572513 = path.getOrDefault("name")
  valid_572513 = validateParameter(valid_572513, JString, required = true,
                                 default = nil)
  if valid_572513 != nil:
    section.add "name", valid_572513
  var valid_572514 = path.getOrDefault("vnetName")
  valid_572514 = validateParameter(valid_572514, JString, required = true,
                                 default = nil)
  if valid_572514 != nil:
    section.add "vnetName", valid_572514
  var valid_572515 = path.getOrDefault("subscriptionId")
  valid_572515 = validateParameter(valid_572515, JString, required = true,
                                 default = nil)
  if valid_572515 != nil:
    section.add "subscriptionId", valid_572515
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572516 = query.getOrDefault("api-version")
  valid_572516 = validateParameter(valid_572516, JString, required = true,
                                 default = nil)
  if valid_572516 != nil:
    section.add "api-version", valid_572516
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572517: Call_WebAppsGetVnetConnection_572509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ## 
  let valid = call_572517.validator(path, query, header, formData, body)
  let scheme = call_572517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572517.url(scheme.get, call_572517.host, call_572517.base,
                         call_572517.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572517, url, valid)

proc call*(call_572518: Call_WebAppsGetVnetConnection_572509;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnection
  ## Gets a virtual network the app (or deployment slot) is connected to by name.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572519 = newJObject()
  var query_572520 = newJObject()
  add(path_572519, "resourceGroupName", newJString(resourceGroupName))
  add(query_572520, "api-version", newJString(apiVersion))
  add(path_572519, "name", newJString(name))
  add(path_572519, "vnetName", newJString(vnetName))
  add(path_572519, "subscriptionId", newJString(subscriptionId))
  result = call_572518.call(path_572519, query_572520, nil, nil, nil)

var webAppsGetVnetConnection* = Call_WebAppsGetVnetConnection_572509(
    name: "webAppsGetVnetConnection", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsGetVnetConnection_572510, base: "",
    url: url_WebAppsGetVnetConnection_572511, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnection_572547 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateVnetConnection_572549(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnection_572548(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of an existing Virtual Network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572550 = path.getOrDefault("resourceGroupName")
  valid_572550 = validateParameter(valid_572550, JString, required = true,
                                 default = nil)
  if valid_572550 != nil:
    section.add "resourceGroupName", valid_572550
  var valid_572551 = path.getOrDefault("name")
  valid_572551 = validateParameter(valid_572551, JString, required = true,
                                 default = nil)
  if valid_572551 != nil:
    section.add "name", valid_572551
  var valid_572552 = path.getOrDefault("vnetName")
  valid_572552 = validateParameter(valid_572552, JString, required = true,
                                 default = nil)
  if valid_572552 != nil:
    section.add "vnetName", valid_572552
  var valid_572553 = path.getOrDefault("subscriptionId")
  valid_572553 = validateParameter(valid_572553, JString, required = true,
                                 default = nil)
  if valid_572553 != nil:
    section.add "subscriptionId", valid_572553
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572554 = query.getOrDefault("api-version")
  valid_572554 = validateParameter(valid_572554, JString, required = true,
                                 default = nil)
  if valid_572554 != nil:
    section.add "api-version", valid_572554
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572556: Call_WebAppsUpdateVnetConnection_572547; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ## 
  let valid = call_572556.validator(path, query, header, formData, body)
  let scheme = call_572556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572556.url(scheme.get, call_572556.host, call_572556.base,
                         call_572556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572556, url, valid)

proc call*(call_572557: Call_WebAppsUpdateVnetConnection_572547;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnection
  ## Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : Properties of the Virtual Network connection. See example.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of an existing Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572558 = newJObject()
  var query_572559 = newJObject()
  var body_572560 = newJObject()
  add(path_572558, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572560 = connectionEnvelope
  add(path_572558, "name", newJString(name))
  add(path_572558, "vnetName", newJString(vnetName))
  add(query_572559, "api-version", newJString(apiVersion))
  add(path_572558, "subscriptionId", newJString(subscriptionId))
  result = call_572557.call(path_572558, query_572559, nil, nil, body_572560)

var webAppsUpdateVnetConnection* = Call_WebAppsUpdateVnetConnection_572547(
    name: "webAppsUpdateVnetConnection", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsUpdateVnetConnection_572548, base: "",
    url: url_WebAppsUpdateVnetConnection_572549, schemes: {Scheme.Https})
type
  Call_WebAppsDeleteVnetConnection_572535 = ref object of OpenApiRestCall_567666
proc url_WebAppsDeleteVnetConnection_572537(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsDeleteVnetConnection_572536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572538 = path.getOrDefault("resourceGroupName")
  valid_572538 = validateParameter(valid_572538, JString, required = true,
                                 default = nil)
  if valid_572538 != nil:
    section.add "resourceGroupName", valid_572538
  var valid_572539 = path.getOrDefault("name")
  valid_572539 = validateParameter(valid_572539, JString, required = true,
                                 default = nil)
  if valid_572539 != nil:
    section.add "name", valid_572539
  var valid_572540 = path.getOrDefault("vnetName")
  valid_572540 = validateParameter(valid_572540, JString, required = true,
                                 default = nil)
  if valid_572540 != nil:
    section.add "vnetName", valid_572540
  var valid_572541 = path.getOrDefault("subscriptionId")
  valid_572541 = validateParameter(valid_572541, JString, required = true,
                                 default = nil)
  if valid_572541 != nil:
    section.add "subscriptionId", valid_572541
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572542 = query.getOrDefault("api-version")
  valid_572542 = validateParameter(valid_572542, JString, required = true,
                                 default = nil)
  if valid_572542 != nil:
    section.add "api-version", valid_572542
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572543: Call_WebAppsDeleteVnetConnection_572535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ## 
  let valid = call_572543.validator(path, query, header, formData, body)
  let scheme = call_572543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572543.url(scheme.get, call_572543.host, call_572543.base,
                         call_572543.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572543, url, valid)

proc call*(call_572544: Call_WebAppsDeleteVnetConnection_572535;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; subscriptionId: string): Recallable =
  ## webAppsDeleteVnetConnection
  ## Deletes a connection from an app (or deployment slot to a named virtual network.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the virtual network.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572545 = newJObject()
  var query_572546 = newJObject()
  add(path_572545, "resourceGroupName", newJString(resourceGroupName))
  add(query_572546, "api-version", newJString(apiVersion))
  add(path_572545, "name", newJString(name))
  add(path_572545, "vnetName", newJString(vnetName))
  add(path_572545, "subscriptionId", newJString(subscriptionId))
  result = call_572544.call(path_572545, query_572546, nil, nil, nil)

var webAppsDeleteVnetConnection* = Call_WebAppsDeleteVnetConnection_572535(
    name: "webAppsDeleteVnetConnection", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    validator: validate_WebAppsDeleteVnetConnection_572536, base: "",
    url: url_WebAppsDeleteVnetConnection_572537, schemes: {Scheme.Https})
type
  Call_WebAppsCreateOrUpdateVnetConnectionGateway_572574 = ref object of OpenApiRestCall_567666
proc url_WebAppsCreateOrUpdateVnetConnectionGateway_572576(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsCreateOrUpdateVnetConnectionGateway_572575(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572577 = path.getOrDefault("resourceGroupName")
  valid_572577 = validateParameter(valid_572577, JString, required = true,
                                 default = nil)
  if valid_572577 != nil:
    section.add "resourceGroupName", valid_572577
  var valid_572578 = path.getOrDefault("name")
  valid_572578 = validateParameter(valid_572578, JString, required = true,
                                 default = nil)
  if valid_572578 != nil:
    section.add "name", valid_572578
  var valid_572579 = path.getOrDefault("vnetName")
  valid_572579 = validateParameter(valid_572579, JString, required = true,
                                 default = nil)
  if valid_572579 != nil:
    section.add "vnetName", valid_572579
  var valid_572580 = path.getOrDefault("gatewayName")
  valid_572580 = validateParameter(valid_572580, JString, required = true,
                                 default = nil)
  if valid_572580 != nil:
    section.add "gatewayName", valid_572580
  var valid_572581 = path.getOrDefault("subscriptionId")
  valid_572581 = validateParameter(valid_572581, JString, required = true,
                                 default = nil)
  if valid_572581 != nil:
    section.add "subscriptionId", valid_572581
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572582 = query.getOrDefault("api-version")
  valid_572582 = validateParameter(valid_572582, JString, required = true,
                                 default = nil)
  if valid_572582 != nil:
    section.add "api-version", valid_572582
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572584: Call_WebAppsCreateOrUpdateVnetConnectionGateway_572574;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_572584.validator(path, query, header, formData, body)
  let scheme = call_572584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572584.url(scheme.get, call_572584.host, call_572584.base,
                         call_572584.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572584, url, valid)

proc call*(call_572585: Call_WebAppsCreateOrUpdateVnetConnectionGateway_572574;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsCreateOrUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572586 = newJObject()
  var query_572587 = newJObject()
  var body_572588 = newJObject()
  add(path_572586, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572588 = connectionEnvelope
  add(path_572586, "name", newJString(name))
  add(path_572586, "vnetName", newJString(vnetName))
  add(query_572587, "api-version", newJString(apiVersion))
  add(path_572586, "gatewayName", newJString(gatewayName))
  add(path_572586, "subscriptionId", newJString(subscriptionId))
  result = call_572585.call(path_572586, query_572587, nil, nil, body_572588)

var webAppsCreateOrUpdateVnetConnectionGateway* = Call_WebAppsCreateOrUpdateVnetConnectionGateway_572574(
    name: "webAppsCreateOrUpdateVnetConnectionGateway", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsCreateOrUpdateVnetConnectionGateway_572575,
    base: "", url: url_WebAppsCreateOrUpdateVnetConnectionGateway_572576,
    schemes: {Scheme.Https})
type
  Call_WebAppsGetVnetConnectionGateway_572561 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetVnetConnectionGateway_572563(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetVnetConnectionGateway_572562(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets an app's Virtual Network gateway.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572564 = path.getOrDefault("resourceGroupName")
  valid_572564 = validateParameter(valid_572564, JString, required = true,
                                 default = nil)
  if valid_572564 != nil:
    section.add "resourceGroupName", valid_572564
  var valid_572565 = path.getOrDefault("name")
  valid_572565 = validateParameter(valid_572565, JString, required = true,
                                 default = nil)
  if valid_572565 != nil:
    section.add "name", valid_572565
  var valid_572566 = path.getOrDefault("vnetName")
  valid_572566 = validateParameter(valid_572566, JString, required = true,
                                 default = nil)
  if valid_572566 != nil:
    section.add "vnetName", valid_572566
  var valid_572567 = path.getOrDefault("gatewayName")
  valid_572567 = validateParameter(valid_572567, JString, required = true,
                                 default = nil)
  if valid_572567 != nil:
    section.add "gatewayName", valid_572567
  var valid_572568 = path.getOrDefault("subscriptionId")
  valid_572568 = validateParameter(valid_572568, JString, required = true,
                                 default = nil)
  if valid_572568 != nil:
    section.add "subscriptionId", valid_572568
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572569 = query.getOrDefault("api-version")
  valid_572569 = validateParameter(valid_572569, JString, required = true,
                                 default = nil)
  if valid_572569 != nil:
    section.add "api-version", valid_572569
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572570: Call_WebAppsGetVnetConnectionGateway_572561;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets an app's Virtual Network gateway.
  ## 
  let valid = call_572570.validator(path, query, header, formData, body)
  let scheme = call_572570.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572570.url(scheme.get, call_572570.host, call_572570.base,
                         call_572570.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572570, url, valid)

proc call*(call_572571: Call_WebAppsGetVnetConnectionGateway_572561;
          resourceGroupName: string; apiVersion: string; name: string;
          vnetName: string; gatewayName: string; subscriptionId: string): Recallable =
  ## webAppsGetVnetConnectionGateway
  ## Gets an app's Virtual Network gateway.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572572 = newJObject()
  var query_572573 = newJObject()
  add(path_572572, "resourceGroupName", newJString(resourceGroupName))
  add(query_572573, "api-version", newJString(apiVersion))
  add(path_572572, "name", newJString(name))
  add(path_572572, "vnetName", newJString(vnetName))
  add(path_572572, "gatewayName", newJString(gatewayName))
  add(path_572572, "subscriptionId", newJString(subscriptionId))
  result = call_572571.call(path_572572, query_572573, nil, nil, nil)

var webAppsGetVnetConnectionGateway* = Call_WebAppsGetVnetConnectionGateway_572561(
    name: "webAppsGetVnetConnectionGateway", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsGetVnetConnectionGateway_572562, base: "",
    url: url_WebAppsGetVnetConnectionGateway_572563, schemes: {Scheme.Https})
type
  Call_WebAppsUpdateVnetConnectionGateway_572589 = ref object of OpenApiRestCall_567666
proc url_WebAppsUpdateVnetConnectionGateway_572591(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "vnetName" in path, "`vnetName` is a required path parameter"
  assert "gatewayName" in path, "`gatewayName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/virtualNetworkConnections/"),
               (kind: VariableSegment, value: "vnetName"),
               (kind: ConstantSegment, value: "/gateways/"),
               (kind: VariableSegment, value: "gatewayName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsUpdateVnetConnectionGateway_572590(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Name of the app.
  ##   vnetName: JString (required)
  ##           : Name of the Virtual Network.
  ##   gatewayName: JString (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572592 = path.getOrDefault("resourceGroupName")
  valid_572592 = validateParameter(valid_572592, JString, required = true,
                                 default = nil)
  if valid_572592 != nil:
    section.add "resourceGroupName", valid_572592
  var valid_572593 = path.getOrDefault("name")
  valid_572593 = validateParameter(valid_572593, JString, required = true,
                                 default = nil)
  if valid_572593 != nil:
    section.add "name", valid_572593
  var valid_572594 = path.getOrDefault("vnetName")
  valid_572594 = validateParameter(valid_572594, JString, required = true,
                                 default = nil)
  if valid_572594 != nil:
    section.add "vnetName", valid_572594
  var valid_572595 = path.getOrDefault("gatewayName")
  valid_572595 = validateParameter(valid_572595, JString, required = true,
                                 default = nil)
  if valid_572595 != nil:
    section.add "gatewayName", valid_572595
  var valid_572596 = path.getOrDefault("subscriptionId")
  valid_572596 = validateParameter(valid_572596, JString, required = true,
                                 default = nil)
  if valid_572596 != nil:
    section.add "subscriptionId", valid_572596
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572597 = query.getOrDefault("api-version")
  valid_572597 = validateParameter(valid_572597, JString, required = true,
                                 default = nil)
  if valid_572597 != nil:
    section.add "api-version", valid_572597
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_572599: Call_WebAppsUpdateVnetConnectionGateway_572589;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ## 
  let valid = call_572599.validator(path, query, header, formData, body)
  let scheme = call_572599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572599.url(scheme.get, call_572599.host, call_572599.base,
                         call_572599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572599, url, valid)

proc call*(call_572600: Call_WebAppsUpdateVnetConnectionGateway_572589;
          resourceGroupName: string; connectionEnvelope: JsonNode; name: string;
          vnetName: string; apiVersion: string; gatewayName: string;
          subscriptionId: string): Recallable =
  ## webAppsUpdateVnetConnectionGateway
  ## Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   connectionEnvelope: JObject (required)
  ##                     : The properties to update this gateway with.
  ##   name: string (required)
  ##       : Name of the app.
  ##   vnetName: string (required)
  ##           : Name of the Virtual Network.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   gatewayName: string (required)
  ##              : Name of the gateway. Currently, the only supported string is "primary".
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572601 = newJObject()
  var query_572602 = newJObject()
  var body_572603 = newJObject()
  add(path_572601, "resourceGroupName", newJString(resourceGroupName))
  if connectionEnvelope != nil:
    body_572603 = connectionEnvelope
  add(path_572601, "name", newJString(name))
  add(path_572601, "vnetName", newJString(vnetName))
  add(query_572602, "api-version", newJString(apiVersion))
  add(path_572601, "gatewayName", newJString(gatewayName))
  add(path_572601, "subscriptionId", newJString(subscriptionId))
  result = call_572600.call(path_572601, query_572602, nil, nil, body_572603)

var webAppsUpdateVnetConnectionGateway* = Call_WebAppsUpdateVnetConnectionGateway_572589(
    name: "webAppsUpdateVnetConnectionGateway", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    validator: validate_WebAppsUpdateVnetConnectionGateway_572590, base: "",
    url: url_WebAppsUpdateVnetConnectionGateway_572591, schemes: {Scheme.Https})
type
  Call_WebAppsListWebJobs_572604 = ref object of OpenApiRestCall_567666
proc url_WebAppsListWebJobs_572606(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsListWebJobs_572605(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## List webjobs for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572607 = path.getOrDefault("resourceGroupName")
  valid_572607 = validateParameter(valid_572607, JString, required = true,
                                 default = nil)
  if valid_572607 != nil:
    section.add "resourceGroupName", valid_572607
  var valid_572608 = path.getOrDefault("name")
  valid_572608 = validateParameter(valid_572608, JString, required = true,
                                 default = nil)
  if valid_572608 != nil:
    section.add "name", valid_572608
  var valid_572609 = path.getOrDefault("subscriptionId")
  valid_572609 = validateParameter(valid_572609, JString, required = true,
                                 default = nil)
  if valid_572609 != nil:
    section.add "subscriptionId", valid_572609
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572610 = query.getOrDefault("api-version")
  valid_572610 = validateParameter(valid_572610, JString, required = true,
                                 default = nil)
  if valid_572610 != nil:
    section.add "api-version", valid_572610
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572611: Call_WebAppsListWebJobs_572604; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## List webjobs for an app, or a deployment slot.
  ## 
  let valid = call_572611.validator(path, query, header, formData, body)
  let scheme = call_572611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572611.url(scheme.get, call_572611.host, call_572611.base,
                         call_572611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572611, url, valid)

proc call*(call_572612: Call_WebAppsListWebJobs_572604; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string): Recallable =
  ## webAppsListWebJobs
  ## List webjobs for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  var path_572613 = newJObject()
  var query_572614 = newJObject()
  add(path_572613, "resourceGroupName", newJString(resourceGroupName))
  add(query_572614, "api-version", newJString(apiVersion))
  add(path_572613, "name", newJString(name))
  add(path_572613, "subscriptionId", newJString(subscriptionId))
  result = call_572612.call(path_572613, query_572614, nil, nil, nil)

var webAppsListWebJobs* = Call_WebAppsListWebJobs_572604(
    name: "webAppsListWebJobs", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs",
    validator: validate_WebAppsListWebJobs_572605, base: "",
    url: url_WebAppsListWebJobs_572606, schemes: {Scheme.Https})
type
  Call_WebAppsGetWebJob_572615 = ref object of OpenApiRestCall_567666
proc url_WebAppsGetWebJob_572617(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "name" in path, "`name` is a required path parameter"
  assert "webJobName" in path, "`webJobName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Web/sites/"),
               (kind: VariableSegment, value: "name"),
               (kind: ConstantSegment, value: "/webjobs/"),
               (kind: VariableSegment, value: "webJobName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_WebAppsGetWebJob_572616(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   name: JString (required)
  ##       : Site name.
  ##   subscriptionId: JString (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: JString (required)
  ##             : Name of the web job.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_572618 = path.getOrDefault("resourceGroupName")
  valid_572618 = validateParameter(valid_572618, JString, required = true,
                                 default = nil)
  if valid_572618 != nil:
    section.add "resourceGroupName", valid_572618
  var valid_572619 = path.getOrDefault("name")
  valid_572619 = validateParameter(valid_572619, JString, required = true,
                                 default = nil)
  if valid_572619 != nil:
    section.add "name", valid_572619
  var valid_572620 = path.getOrDefault("subscriptionId")
  valid_572620 = validateParameter(valid_572620, JString, required = true,
                                 default = nil)
  if valid_572620 != nil:
    section.add "subscriptionId", valid_572620
  var valid_572621 = path.getOrDefault("webJobName")
  valid_572621 = validateParameter(valid_572621, JString, required = true,
                                 default = nil)
  if valid_572621 != nil:
    section.add "webJobName", valid_572621
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : API Version
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_572622 = query.getOrDefault("api-version")
  valid_572622 = validateParameter(valid_572622, JString, required = true,
                                 default = nil)
  if valid_572622 != nil:
    section.add "api-version", valid_572622
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_572623: Call_WebAppsGetWebJob_572615; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get webjob information for an app, or a deployment slot.
  ## 
  let valid = call_572623.validator(path, query, header, formData, body)
  let scheme = call_572623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_572623.url(scheme.get, call_572623.host, call_572623.base,
                         call_572623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_572623, url, valid)

proc call*(call_572624: Call_WebAppsGetWebJob_572615; resourceGroupName: string;
          apiVersion: string; name: string; subscriptionId: string; webJobName: string): Recallable =
  ## webAppsGetWebJob
  ## Get webjob information for an app, or a deployment slot.
  ##   resourceGroupName: string (required)
  ##                    : Name of the resource group to which the resource belongs.
  ##   apiVersion: string (required)
  ##             : API Version
  ##   name: string (required)
  ##       : Site name.
  ##   subscriptionId: string (required)
  ##                 : Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  ##   webJobName: string (required)
  ##             : Name of the web job.
  var path_572625 = newJObject()
  var query_572626 = newJObject()
  add(path_572625, "resourceGroupName", newJString(resourceGroupName))
  add(query_572626, "api-version", newJString(apiVersion))
  add(path_572625, "name", newJString(name))
  add(path_572625, "subscriptionId", newJString(subscriptionId))
  add(path_572625, "webJobName", newJString(webJobName))
  result = call_572624.call(path_572625, query_572626, nil, nil, nil)

var webAppsGetWebJob* = Call_WebAppsGetWebJob_572615(name: "webAppsGetWebJob",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}",
    validator: validate_WebAppsGetWebJob_572616, base: "",
    url: url_WebAppsGetWebJob_572617, schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
