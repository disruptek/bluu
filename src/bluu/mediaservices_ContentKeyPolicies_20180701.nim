
import
  json, options, hashes, uri, rest, os, uri, httpcore

## auto-generated via openapi macro
## title: Azure Media Services
## version: 2018-07-01
## termsOfService: (not provided)
## license: (not provided)
## 
## This Swagger was generated by the API Framework.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_573658 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_573658](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_573658): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "mediaservices-ContentKeyPolicies"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_ContentKeyPoliciesList_573880 = ref object of OpenApiRestCall_573658
proc url_ContentKeyPoliciesList_573882(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/contentKeyPolicies")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ContentKeyPoliciesList_573881(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the Content Key Policies in the account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_574056 = path.getOrDefault("resourceGroupName")
  valid_574056 = validateParameter(valid_574056, JString, required = true,
                                 default = nil)
  if valid_574056 != nil:
    section.add "resourceGroupName", valid_574056
  var valid_574057 = path.getOrDefault("subscriptionId")
  valid_574057 = validateParameter(valid_574057, JString, required = true,
                                 default = nil)
  if valid_574057 != nil:
    section.add "subscriptionId", valid_574057
  var valid_574058 = path.getOrDefault("accountName")
  valid_574058 = validateParameter(valid_574058, JString, required = true,
                                 default = nil)
  if valid_574058 != nil:
    section.add "accountName", valid_574058
  result.add "path", section
  ## parameters in `query` object:
  ##   $orderby: JString
  ##           : Specifies the key by which the result collection should be ordered.
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  ##   $top: JInt
  ##       : Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
  ##   $filter: JString
  ##          : Restricts the set of items returned.
  section = newJObject()
  var valid_574059 = query.getOrDefault("$orderby")
  valid_574059 = validateParameter(valid_574059, JString, required = false,
                                 default = nil)
  if valid_574059 != nil:
    section.add "$orderby", valid_574059
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_574060 = query.getOrDefault("api-version")
  valid_574060 = validateParameter(valid_574060, JString, required = true,
                                 default = nil)
  if valid_574060 != nil:
    section.add "api-version", valid_574060
  var valid_574061 = query.getOrDefault("$top")
  valid_574061 = validateParameter(valid_574061, JInt, required = false, default = nil)
  if valid_574061 != nil:
    section.add "$top", valid_574061
  var valid_574062 = query.getOrDefault("$filter")
  valid_574062 = validateParameter(valid_574062, JString, required = false,
                                 default = nil)
  if valid_574062 != nil:
    section.add "$filter", valid_574062
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_574085: Call_ContentKeyPoliciesList_573880; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the Content Key Policies in the account
  ## 
  let valid = call_574085.validator(path, query, header, formData, body)
  let scheme = call_574085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_574085.url(scheme.get, call_574085.host, call_574085.base,
                         call_574085.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_574085, url, valid)

proc call*(call_574156: Call_ContentKeyPoliciesList_573880;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          accountName: string; Orderby: string = ""; Top: int = 0; Filter: string = ""): Recallable =
  ## contentKeyPoliciesList
  ## Lists the Content Key Policies in the account
  ##   Orderby: string
  ##          : Specifies the key by which the result collection should be ordered.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   Top: int
  ##      : Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  ##   Filter: string
  ##         : Restricts the set of items returned.
  var path_574157 = newJObject()
  var query_574159 = newJObject()
  add(query_574159, "$orderby", newJString(Orderby))
  add(path_574157, "resourceGroupName", newJString(resourceGroupName))
  add(query_574159, "api-version", newJString(apiVersion))
  add(path_574157, "subscriptionId", newJString(subscriptionId))
  add(query_574159, "$top", newJInt(Top))
  add(path_574157, "accountName", newJString(accountName))
  add(query_574159, "$filter", newJString(Filter))
  result = call_574156.call(path_574157, query_574159, nil, nil, nil)

var contentKeyPoliciesList* = Call_ContentKeyPoliciesList_573880(
    name: "contentKeyPoliciesList", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies",
    validator: validate_ContentKeyPoliciesList_573881, base: "",
    url: url_ContentKeyPoliciesList_573882, schemes: {Scheme.Https})
type
  Call_ContentKeyPoliciesCreateOrUpdate_574210 = ref object of OpenApiRestCall_573658
proc url_ContentKeyPoliciesCreateOrUpdate_574212(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "contentKeyPolicyName" in path,
        "`contentKeyPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/contentKeyPolicies/"),
               (kind: VariableSegment, value: "contentKeyPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ContentKeyPoliciesCreateOrUpdate_574211(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Create or update a Content Key Policy in the Media Services account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   contentKeyPolicyName: JString (required)
  ##                       : The Content Key Policy name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_574213 = path.getOrDefault("resourceGroupName")
  valid_574213 = validateParameter(valid_574213, JString, required = true,
                                 default = nil)
  if valid_574213 != nil:
    section.add "resourceGroupName", valid_574213
  var valid_574214 = path.getOrDefault("subscriptionId")
  valid_574214 = validateParameter(valid_574214, JString, required = true,
                                 default = nil)
  if valid_574214 != nil:
    section.add "subscriptionId", valid_574214
  var valid_574215 = path.getOrDefault("contentKeyPolicyName")
  valid_574215 = validateParameter(valid_574215, JString, required = true,
                                 default = nil)
  if valid_574215 != nil:
    section.add "contentKeyPolicyName", valid_574215
  var valid_574216 = path.getOrDefault("accountName")
  valid_574216 = validateParameter(valid_574216, JString, required = true,
                                 default = nil)
  if valid_574216 != nil:
    section.add "accountName", valid_574216
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_574217 = query.getOrDefault("api-version")
  valid_574217 = validateParameter(valid_574217, JString, required = true,
                                 default = nil)
  if valid_574217 != nil:
    section.add "api-version", valid_574217
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   parameters: JObject (required)
  ##             : The request parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_574219: Call_ContentKeyPoliciesCreateOrUpdate_574210;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Create or update a Content Key Policy in the Media Services account
  ## 
  let valid = call_574219.validator(path, query, header, formData, body)
  let scheme = call_574219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_574219.url(scheme.get, call_574219.host, call_574219.base,
                         call_574219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_574219, url, valid)

proc call*(call_574220: Call_ContentKeyPoliciesCreateOrUpdate_574210;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          contentKeyPolicyName: string; parameters: JsonNode; accountName: string): Recallable =
  ## contentKeyPoliciesCreateOrUpdate
  ## Create or update a Content Key Policy in the Media Services account
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   contentKeyPolicyName: string (required)
  ##                       : The Content Key Policy name.
  ##   parameters: JObject (required)
  ##             : The request parameters
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_574221 = newJObject()
  var query_574222 = newJObject()
  var body_574223 = newJObject()
  add(path_574221, "resourceGroupName", newJString(resourceGroupName))
  add(query_574222, "api-version", newJString(apiVersion))
  add(path_574221, "subscriptionId", newJString(subscriptionId))
  add(path_574221, "contentKeyPolicyName", newJString(contentKeyPolicyName))
  if parameters != nil:
    body_574223 = parameters
  add(path_574221, "accountName", newJString(accountName))
  result = call_574220.call(path_574221, query_574222, nil, nil, body_574223)

var contentKeyPoliciesCreateOrUpdate* = Call_ContentKeyPoliciesCreateOrUpdate_574210(
    name: "contentKeyPoliciesCreateOrUpdate", meth: HttpMethod.HttpPut,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
    validator: validate_ContentKeyPoliciesCreateOrUpdate_574211, base: "",
    url: url_ContentKeyPoliciesCreateOrUpdate_574212, schemes: {Scheme.Https})
type
  Call_ContentKeyPoliciesGet_574198 = ref object of OpenApiRestCall_573658
proc url_ContentKeyPoliciesGet_574200(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "contentKeyPolicyName" in path,
        "`contentKeyPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/contentKeyPolicies/"),
               (kind: VariableSegment, value: "contentKeyPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ContentKeyPoliciesGet_574199(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Get the details of a Content Key Policy in the Media Services account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   contentKeyPolicyName: JString (required)
  ##                       : The Content Key Policy name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_574201 = path.getOrDefault("resourceGroupName")
  valid_574201 = validateParameter(valid_574201, JString, required = true,
                                 default = nil)
  if valid_574201 != nil:
    section.add "resourceGroupName", valid_574201
  var valid_574202 = path.getOrDefault("subscriptionId")
  valid_574202 = validateParameter(valid_574202, JString, required = true,
                                 default = nil)
  if valid_574202 != nil:
    section.add "subscriptionId", valid_574202
  var valid_574203 = path.getOrDefault("contentKeyPolicyName")
  valid_574203 = validateParameter(valid_574203, JString, required = true,
                                 default = nil)
  if valid_574203 != nil:
    section.add "contentKeyPolicyName", valid_574203
  var valid_574204 = path.getOrDefault("accountName")
  valid_574204 = validateParameter(valid_574204, JString, required = true,
                                 default = nil)
  if valid_574204 != nil:
    section.add "accountName", valid_574204
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_574205 = query.getOrDefault("api-version")
  valid_574205 = validateParameter(valid_574205, JString, required = true,
                                 default = nil)
  if valid_574205 != nil:
    section.add "api-version", valid_574205
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_574206: Call_ContentKeyPoliciesGet_574198; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Get the details of a Content Key Policy in the Media Services account
  ## 
  let valid = call_574206.validator(path, query, header, formData, body)
  let scheme = call_574206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_574206.url(scheme.get, call_574206.host, call_574206.base,
                         call_574206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_574206, url, valid)

proc call*(call_574207: Call_ContentKeyPoliciesGet_574198;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          contentKeyPolicyName: string; accountName: string): Recallable =
  ## contentKeyPoliciesGet
  ## Get the details of a Content Key Policy in the Media Services account
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   contentKeyPolicyName: string (required)
  ##                       : The Content Key Policy name.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_574208 = newJObject()
  var query_574209 = newJObject()
  add(path_574208, "resourceGroupName", newJString(resourceGroupName))
  add(query_574209, "api-version", newJString(apiVersion))
  add(path_574208, "subscriptionId", newJString(subscriptionId))
  add(path_574208, "contentKeyPolicyName", newJString(contentKeyPolicyName))
  add(path_574208, "accountName", newJString(accountName))
  result = call_574207.call(path_574208, query_574209, nil, nil, nil)

var contentKeyPoliciesGet* = Call_ContentKeyPoliciesGet_574198(
    name: "contentKeyPoliciesGet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
    validator: validate_ContentKeyPoliciesGet_574199, base: "",
    url: url_ContentKeyPoliciesGet_574200, schemes: {Scheme.Https})
type
  Call_ContentKeyPoliciesUpdate_574236 = ref object of OpenApiRestCall_573658
proc url_ContentKeyPoliciesUpdate_574238(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "contentKeyPolicyName" in path,
        "`contentKeyPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/contentKeyPolicies/"),
               (kind: VariableSegment, value: "contentKeyPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ContentKeyPoliciesUpdate_574237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates an existing Content Key Policy in the Media Services account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   contentKeyPolicyName: JString (required)
  ##                       : The Content Key Policy name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_574239 = path.getOrDefault("resourceGroupName")
  valid_574239 = validateParameter(valid_574239, JString, required = true,
                                 default = nil)
  if valid_574239 != nil:
    section.add "resourceGroupName", valid_574239
  var valid_574240 = path.getOrDefault("subscriptionId")
  valid_574240 = validateParameter(valid_574240, JString, required = true,
                                 default = nil)
  if valid_574240 != nil:
    section.add "subscriptionId", valid_574240
  var valid_574241 = path.getOrDefault("contentKeyPolicyName")
  valid_574241 = validateParameter(valid_574241, JString, required = true,
                                 default = nil)
  if valid_574241 != nil:
    section.add "contentKeyPolicyName", valid_574241
  var valid_574242 = path.getOrDefault("accountName")
  valid_574242 = validateParameter(valid_574242, JString, required = true,
                                 default = nil)
  if valid_574242 != nil:
    section.add "accountName", valid_574242
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_574243 = query.getOrDefault("api-version")
  valid_574243 = validateParameter(valid_574243, JString, required = true,
                                 default = nil)
  if valid_574243 != nil:
    section.add "api-version", valid_574243
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   parameters: JObject (required)
  ##             : The request parameters
  assert body != nil, "body argument is necessary"
  section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_574245: Call_ContentKeyPoliciesUpdate_574236; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates an existing Content Key Policy in the Media Services account
  ## 
  let valid = call_574245.validator(path, query, header, formData, body)
  let scheme = call_574245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_574245.url(scheme.get, call_574245.host, call_574245.base,
                         call_574245.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_574245, url, valid)

proc call*(call_574246: Call_ContentKeyPoliciesUpdate_574236;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          contentKeyPolicyName: string; parameters: JsonNode; accountName: string): Recallable =
  ## contentKeyPoliciesUpdate
  ## Updates an existing Content Key Policy in the Media Services account
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   contentKeyPolicyName: string (required)
  ##                       : The Content Key Policy name.
  ##   parameters: JObject (required)
  ##             : The request parameters
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_574247 = newJObject()
  var query_574248 = newJObject()
  var body_574249 = newJObject()
  add(path_574247, "resourceGroupName", newJString(resourceGroupName))
  add(query_574248, "api-version", newJString(apiVersion))
  add(path_574247, "subscriptionId", newJString(subscriptionId))
  add(path_574247, "contentKeyPolicyName", newJString(contentKeyPolicyName))
  if parameters != nil:
    body_574249 = parameters
  add(path_574247, "accountName", newJString(accountName))
  result = call_574246.call(path_574247, query_574248, nil, nil, body_574249)

var contentKeyPoliciesUpdate* = Call_ContentKeyPoliciesUpdate_574236(
    name: "contentKeyPoliciesUpdate", meth: HttpMethod.HttpPatch,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
    validator: validate_ContentKeyPoliciesUpdate_574237, base: "",
    url: url_ContentKeyPoliciesUpdate_574238, schemes: {Scheme.Https})
type
  Call_ContentKeyPoliciesDelete_574224 = ref object of OpenApiRestCall_573658
proc url_ContentKeyPoliciesDelete_574226(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "contentKeyPolicyName" in path,
        "`contentKeyPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/contentKeyPolicies/"),
               (kind: VariableSegment, value: "contentKeyPolicyName")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ContentKeyPoliciesDelete_574225(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a Content Key Policy in the Media Services account
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   contentKeyPolicyName: JString (required)
  ##                       : The Content Key Policy name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_574227 = path.getOrDefault("resourceGroupName")
  valid_574227 = validateParameter(valid_574227, JString, required = true,
                                 default = nil)
  if valid_574227 != nil:
    section.add "resourceGroupName", valid_574227
  var valid_574228 = path.getOrDefault("subscriptionId")
  valid_574228 = validateParameter(valid_574228, JString, required = true,
                                 default = nil)
  if valid_574228 != nil:
    section.add "subscriptionId", valid_574228
  var valid_574229 = path.getOrDefault("contentKeyPolicyName")
  valid_574229 = validateParameter(valid_574229, JString, required = true,
                                 default = nil)
  if valid_574229 != nil:
    section.add "contentKeyPolicyName", valid_574229
  var valid_574230 = path.getOrDefault("accountName")
  valid_574230 = validateParameter(valid_574230, JString, required = true,
                                 default = nil)
  if valid_574230 != nil:
    section.add "accountName", valid_574230
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_574231 = query.getOrDefault("api-version")
  valid_574231 = validateParameter(valid_574231, JString, required = true,
                                 default = nil)
  if valid_574231 != nil:
    section.add "api-version", valid_574231
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_574232: Call_ContentKeyPoliciesDelete_574224; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a Content Key Policy in the Media Services account
  ## 
  let valid = call_574232.validator(path, query, header, formData, body)
  let scheme = call_574232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_574232.url(scheme.get, call_574232.host, call_574232.base,
                         call_574232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_574232, url, valid)

proc call*(call_574233: Call_ContentKeyPoliciesDelete_574224;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          contentKeyPolicyName: string; accountName: string): Recallable =
  ## contentKeyPoliciesDelete
  ## Deletes a Content Key Policy in the Media Services account
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   contentKeyPolicyName: string (required)
  ##                       : The Content Key Policy name.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_574234 = newJObject()
  var query_574235 = newJObject()
  add(path_574234, "resourceGroupName", newJString(resourceGroupName))
  add(query_574235, "api-version", newJString(apiVersion))
  add(path_574234, "subscriptionId", newJString(subscriptionId))
  add(path_574234, "contentKeyPolicyName", newJString(contentKeyPolicyName))
  add(path_574234, "accountName", newJString(accountName))
  result = call_574233.call(path_574234, query_574235, nil, nil, nil)

var contentKeyPoliciesDelete* = Call_ContentKeyPoliciesDelete_574224(
    name: "contentKeyPoliciesDelete", meth: HttpMethod.HttpDelete,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
    validator: validate_ContentKeyPoliciesDelete_574225, base: "",
    url: url_ContentKeyPoliciesDelete_574226, schemes: {Scheme.Https})
type
  Call_ContentKeyPoliciesGetPolicyPropertiesWithSecrets_574250 = ref object of OpenApiRestCall_573658
proc url_ContentKeyPoliciesGetPolicyPropertiesWithSecrets_574252(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "accountName" in path, "`accountName` is a required path parameter"
  assert "contentKeyPolicyName" in path,
        "`contentKeyPolicyName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Media/mediaServices/"),
               (kind: VariableSegment, value: "accountName"),
               (kind: ConstantSegment, value: "/contentKeyPolicies/"),
               (kind: VariableSegment, value: "contentKeyPolicyName"), (
        kind: ConstantSegment, value: "/getPolicyPropertiesWithSecrets")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ContentKeyPoliciesGetPolicyPropertiesWithSecrets_574251(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Get a Content Key Policy including secret values
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   subscriptionId: JString (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   contentKeyPolicyName: JString (required)
  ##                       : The Content Key Policy name.
  ##   accountName: JString (required)
  ##              : The Media Services account name.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_574253 = path.getOrDefault("resourceGroupName")
  valid_574253 = validateParameter(valid_574253, JString, required = true,
                                 default = nil)
  if valid_574253 != nil:
    section.add "resourceGroupName", valid_574253
  var valid_574254 = path.getOrDefault("subscriptionId")
  valid_574254 = validateParameter(valid_574254, JString, required = true,
                                 default = nil)
  if valid_574254 != nil:
    section.add "subscriptionId", valid_574254
  var valid_574255 = path.getOrDefault("contentKeyPolicyName")
  valid_574255 = validateParameter(valid_574255, JString, required = true,
                                 default = nil)
  if valid_574255 != nil:
    section.add "contentKeyPolicyName", valid_574255
  var valid_574256 = path.getOrDefault("accountName")
  valid_574256 = validateParameter(valid_574256, JString, required = true,
                                 default = nil)
  if valid_574256 != nil:
    section.add "accountName", valid_574256
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The Version of the API to be used with the client request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_574257 = query.getOrDefault("api-version")
  valid_574257 = validateParameter(valid_574257, JString, required = true,
                                 default = nil)
  if valid_574257 != nil:
    section.add "api-version", valid_574257
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_574258: Call_ContentKeyPoliciesGetPolicyPropertiesWithSecrets_574250;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Get a Content Key Policy including secret values
  ## 
  let valid = call_574258.validator(path, query, header, formData, body)
  let scheme = call_574258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_574258.url(scheme.get, call_574258.host, call_574258.base,
                         call_574258.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_574258, url, valid)

proc call*(call_574259: Call_ContentKeyPoliciesGetPolicyPropertiesWithSecrets_574250;
          resourceGroupName: string; apiVersion: string; subscriptionId: string;
          contentKeyPolicyName: string; accountName: string): Recallable =
  ## contentKeyPoliciesGetPolicyPropertiesWithSecrets
  ## Get a Content Key Policy including secret values
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group within the Azure subscription.
  ##   apiVersion: string (required)
  ##             : The Version of the API to be used with the client request.
  ##   subscriptionId: string (required)
  ##                 : The unique identifier for a Microsoft Azure subscription.
  ##   contentKeyPolicyName: string (required)
  ##                       : The Content Key Policy name.
  ##   accountName: string (required)
  ##              : The Media Services account name.
  var path_574260 = newJObject()
  var query_574261 = newJObject()
  add(path_574260, "resourceGroupName", newJString(resourceGroupName))
  add(query_574261, "api-version", newJString(apiVersion))
  add(path_574260, "subscriptionId", newJString(subscriptionId))
  add(path_574260, "contentKeyPolicyName", newJString(contentKeyPolicyName))
  add(path_574260, "accountName", newJString(accountName))
  result = call_574259.call(path_574260, query_574261, nil, nil, nil)

var contentKeyPoliciesGetPolicyPropertiesWithSecrets* = Call_ContentKeyPoliciesGetPolicyPropertiesWithSecrets_574250(
    name: "contentKeyPoliciesGetPolicyPropertiesWithSecrets",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}/getPolicyPropertiesWithSecrets",
    validator: validate_ContentKeyPoliciesGetPolicyPropertiesWithSecrets_574251,
    base: "", url: url_ContentKeyPoliciesGetPolicyPropertiesWithSecrets_574252,
    schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
