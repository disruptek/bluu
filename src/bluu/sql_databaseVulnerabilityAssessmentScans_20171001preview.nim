
import
  json, options, hashes, uri, rest, os, uri, httpcore

## auto-generated via openapi macro
## title: SqlManagementClient
## version: 2017-10-01-preview
## termsOfService: (not provided)
## license: (not provided)
## 
## The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_563555 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_563555](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_563555): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "sql-databaseVulnerabilityAssessmentScans"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_DatabaseVulnerabilityAssessmentScansListByDatabase_563777 = ref object of OpenApiRestCall_563555
proc url_DatabaseVulnerabilityAssessmentScansListByDatabase_563779(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentScansListByDatabase_563778(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Lists the vulnerability assessment scans of a database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the database.
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serverName` field"
  var valid_563954 = path.getOrDefault("serverName")
  valid_563954 = validateParameter(valid_563954, JString, required = true,
                                 default = nil)
  if valid_563954 != nil:
    section.add "serverName", valid_563954
  var valid_563968 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_563968 = validateParameter(valid_563968, JString, required = true,
                                 default = newJString("default"))
  if valid_563968 != nil:
    section.add "vulnerabilityAssessmentName", valid_563968
  var valid_563969 = path.getOrDefault("subscriptionId")
  valid_563969 = validateParameter(valid_563969, JString, required = true,
                                 default = nil)
  if valid_563969 != nil:
    section.add "subscriptionId", valid_563969
  var valid_563970 = path.getOrDefault("databaseName")
  valid_563970 = validateParameter(valid_563970, JString, required = true,
                                 default = nil)
  if valid_563970 != nil:
    section.add "databaseName", valid_563970
  var valid_563971 = path.getOrDefault("resourceGroupName")
  valid_563971 = validateParameter(valid_563971, JString, required = true,
                                 default = nil)
  if valid_563971 != nil:
    section.add "resourceGroupName", valid_563971
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_563972 = query.getOrDefault("api-version")
  valid_563972 = validateParameter(valid_563972, JString, required = true,
                                 default = nil)
  if valid_563972 != nil:
    section.add "api-version", valid_563972
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_563995: Call_DatabaseVulnerabilityAssessmentScansListByDatabase_563777;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists the vulnerability assessment scans of a database.
  ## 
  let valid = call_563995.validator(path, query, header, formData, body)
  let scheme = call_563995.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_563995.url(scheme.get, call_563995.host, call_563995.base,
                         call_563995.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_563995, url, valid)

proc call*(call_564066: Call_DatabaseVulnerabilityAssessmentScansListByDatabase_563777;
          apiVersion: string; serverName: string; subscriptionId: string;
          databaseName: string; resourceGroupName: string;
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentScansListByDatabase
  ## Lists the vulnerability assessment scans of a database.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the database.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  var path_564067 = newJObject()
  var query_564069 = newJObject()
  add(query_564069, "api-version", newJString(apiVersion))
  add(path_564067, "serverName", newJString(serverName))
  add(path_564067, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_564067, "subscriptionId", newJString(subscriptionId))
  add(path_564067, "databaseName", newJString(databaseName))
  add(path_564067, "resourceGroupName", newJString(resourceGroupName))
  result = call_564066.call(path_564067, query_564069, nil, nil, nil)

var databaseVulnerabilityAssessmentScansListByDatabase* = Call_DatabaseVulnerabilityAssessmentScansListByDatabase_563777(
    name: "databaseVulnerabilityAssessmentScansListByDatabase",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans",
    validator: validate_DatabaseVulnerabilityAssessmentScansListByDatabase_563778,
    base: "", url: url_DatabaseVulnerabilityAssessmentScansListByDatabase_563779,
    schemes: {Scheme.Https})
type
  Call_DatabaseVulnerabilityAssessmentScansGet_564108 = ref object of OpenApiRestCall_563555
proc url_DatabaseVulnerabilityAssessmentScansGet_564110(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "scanId" in path, "`scanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans/"),
               (kind: VariableSegment, value: "scanId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentScansGet_564109(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a vulnerability assessment scan record of a database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   scanId: JString (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the database.
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serverName` field"
  var valid_564111 = path.getOrDefault("serverName")
  valid_564111 = validateParameter(valid_564111, JString, required = true,
                                 default = nil)
  if valid_564111 != nil:
    section.add "serverName", valid_564111
  var valid_564112 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_564112 = validateParameter(valid_564112, JString, required = true,
                                 default = newJString("default"))
  if valid_564112 != nil:
    section.add "vulnerabilityAssessmentName", valid_564112
  var valid_564113 = path.getOrDefault("scanId")
  valid_564113 = validateParameter(valid_564113, JString, required = true,
                                 default = nil)
  if valid_564113 != nil:
    section.add "scanId", valid_564113
  var valid_564114 = path.getOrDefault("subscriptionId")
  valid_564114 = validateParameter(valid_564114, JString, required = true,
                                 default = nil)
  if valid_564114 != nil:
    section.add "subscriptionId", valid_564114
  var valid_564115 = path.getOrDefault("databaseName")
  valid_564115 = validateParameter(valid_564115, JString, required = true,
                                 default = nil)
  if valid_564115 != nil:
    section.add "databaseName", valid_564115
  var valid_564116 = path.getOrDefault("resourceGroupName")
  valid_564116 = validateParameter(valid_564116, JString, required = true,
                                 default = nil)
  if valid_564116 != nil:
    section.add "resourceGroupName", valid_564116
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564117 = query.getOrDefault("api-version")
  valid_564117 = validateParameter(valid_564117, JString, required = true,
                                 default = nil)
  if valid_564117 != nil:
    section.add "api-version", valid_564117
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564118: Call_DatabaseVulnerabilityAssessmentScansGet_564108;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a vulnerability assessment scan record of a database.
  ## 
  let valid = call_564118.validator(path, query, header, formData, body)
  let scheme = call_564118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564118.url(scheme.get, call_564118.host, call_564118.base,
                         call_564118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564118, url, valid)

proc call*(call_564119: Call_DatabaseVulnerabilityAssessmentScansGet_564108;
          apiVersion: string; serverName: string; scanId: string;
          subscriptionId: string; databaseName: string; resourceGroupName: string;
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentScansGet
  ## Gets a vulnerability assessment scan record of a database.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   scanId: string (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the database.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  var path_564120 = newJObject()
  var query_564121 = newJObject()
  add(query_564121, "api-version", newJString(apiVersion))
  add(path_564120, "serverName", newJString(serverName))
  add(path_564120, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_564120, "scanId", newJString(scanId))
  add(path_564120, "subscriptionId", newJString(subscriptionId))
  add(path_564120, "databaseName", newJString(databaseName))
  add(path_564120, "resourceGroupName", newJString(resourceGroupName))
  result = call_564119.call(path_564120, query_564121, nil, nil, nil)

var databaseVulnerabilityAssessmentScansGet* = Call_DatabaseVulnerabilityAssessmentScansGet_564108(
    name: "databaseVulnerabilityAssessmentScansGet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
    validator: validate_DatabaseVulnerabilityAssessmentScansGet_564109, base: "",
    url: url_DatabaseVulnerabilityAssessmentScansGet_564110,
    schemes: {Scheme.Https})
type
  Call_DatabaseVulnerabilityAssessmentScansExport_564122 = ref object of OpenApiRestCall_563555
proc url_DatabaseVulnerabilityAssessmentScansExport_564124(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "scanId" in path, "`scanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans/"),
               (kind: VariableSegment, value: "scanId"),
               (kind: ConstantSegment, value: "/export")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentScansExport_564123(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Convert an existing scan result to a human readable format. If already exists nothing happens
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   scanId: JString (required)
  ##         : The vulnerability assessment scan Id.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the scanned database.
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serverName` field"
  var valid_564125 = path.getOrDefault("serverName")
  valid_564125 = validateParameter(valid_564125, JString, required = true,
                                 default = nil)
  if valid_564125 != nil:
    section.add "serverName", valid_564125
  var valid_564126 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_564126 = validateParameter(valid_564126, JString, required = true,
                                 default = newJString("default"))
  if valid_564126 != nil:
    section.add "vulnerabilityAssessmentName", valid_564126
  var valid_564127 = path.getOrDefault("scanId")
  valid_564127 = validateParameter(valid_564127, JString, required = true,
                                 default = nil)
  if valid_564127 != nil:
    section.add "scanId", valid_564127
  var valid_564128 = path.getOrDefault("subscriptionId")
  valid_564128 = validateParameter(valid_564128, JString, required = true,
                                 default = nil)
  if valid_564128 != nil:
    section.add "subscriptionId", valid_564128
  var valid_564129 = path.getOrDefault("databaseName")
  valid_564129 = validateParameter(valid_564129, JString, required = true,
                                 default = nil)
  if valid_564129 != nil:
    section.add "databaseName", valid_564129
  var valid_564130 = path.getOrDefault("resourceGroupName")
  valid_564130 = validateParameter(valid_564130, JString, required = true,
                                 default = nil)
  if valid_564130 != nil:
    section.add "resourceGroupName", valid_564130
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564131 = query.getOrDefault("api-version")
  valid_564131 = validateParameter(valid_564131, JString, required = true,
                                 default = nil)
  if valid_564131 != nil:
    section.add "api-version", valid_564131
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564132: Call_DatabaseVulnerabilityAssessmentScansExport_564122;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Convert an existing scan result to a human readable format. If already exists nothing happens
  ## 
  let valid = call_564132.validator(path, query, header, formData, body)
  let scheme = call_564132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564132.url(scheme.get, call_564132.host, call_564132.base,
                         call_564132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564132, url, valid)

proc call*(call_564133: Call_DatabaseVulnerabilityAssessmentScansExport_564122;
          apiVersion: string; serverName: string; scanId: string;
          subscriptionId: string; databaseName: string; resourceGroupName: string;
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentScansExport
  ## Convert an existing scan result to a human readable format. If already exists nothing happens
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   scanId: string (required)
  ##         : The vulnerability assessment scan Id.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the scanned database.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  var path_564134 = newJObject()
  var query_564135 = newJObject()
  add(query_564135, "api-version", newJString(apiVersion))
  add(path_564134, "serverName", newJString(serverName))
  add(path_564134, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_564134, "scanId", newJString(scanId))
  add(path_564134, "subscriptionId", newJString(subscriptionId))
  add(path_564134, "databaseName", newJString(databaseName))
  add(path_564134, "resourceGroupName", newJString(resourceGroupName))
  result = call_564133.call(path_564134, query_564135, nil, nil, nil)

var databaseVulnerabilityAssessmentScansExport* = Call_DatabaseVulnerabilityAssessmentScansExport_564122(
    name: "databaseVulnerabilityAssessmentScansExport", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export",
    validator: validate_DatabaseVulnerabilityAssessmentScansExport_564123,
    base: "", url: url_DatabaseVulnerabilityAssessmentScansExport_564124,
    schemes: {Scheme.Https})
type
  Call_DatabaseVulnerabilityAssessmentScansInitiateScan_564136 = ref object of OpenApiRestCall_563555
proc url_DatabaseVulnerabilityAssessmentScansInitiateScan_564138(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "scanId" in path, "`scanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans/"),
               (kind: VariableSegment, value: "scanId"),
               (kind: ConstantSegment, value: "/initiateScan")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentScansInitiateScan_564137(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Executes a Vulnerability Assessment database scan.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   scanId: JString (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the database.
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `serverName` field"
  var valid_564139 = path.getOrDefault("serverName")
  valid_564139 = validateParameter(valid_564139, JString, required = true,
                                 default = nil)
  if valid_564139 != nil:
    section.add "serverName", valid_564139
  var valid_564140 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_564140 = validateParameter(valid_564140, JString, required = true,
                                 default = newJString("default"))
  if valid_564140 != nil:
    section.add "vulnerabilityAssessmentName", valid_564140
  var valid_564141 = path.getOrDefault("scanId")
  valid_564141 = validateParameter(valid_564141, JString, required = true,
                                 default = nil)
  if valid_564141 != nil:
    section.add "scanId", valid_564141
  var valid_564142 = path.getOrDefault("subscriptionId")
  valid_564142 = validateParameter(valid_564142, JString, required = true,
                                 default = nil)
  if valid_564142 != nil:
    section.add "subscriptionId", valid_564142
  var valid_564143 = path.getOrDefault("databaseName")
  valid_564143 = validateParameter(valid_564143, JString, required = true,
                                 default = nil)
  if valid_564143 != nil:
    section.add "databaseName", valid_564143
  var valid_564144 = path.getOrDefault("resourceGroupName")
  valid_564144 = validateParameter(valid_564144, JString, required = true,
                                 default = nil)
  if valid_564144 != nil:
    section.add "resourceGroupName", valid_564144
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_564145 = query.getOrDefault("api-version")
  valid_564145 = validateParameter(valid_564145, JString, required = true,
                                 default = nil)
  if valid_564145 != nil:
    section.add "api-version", valid_564145
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_564146: Call_DatabaseVulnerabilityAssessmentScansInitiateScan_564136;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Executes a Vulnerability Assessment database scan.
  ## 
  let valid = call_564146.validator(path, query, header, formData, body)
  let scheme = call_564146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_564146.url(scheme.get, call_564146.host, call_564146.base,
                         call_564146.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_564146, url, valid)

proc call*(call_564147: Call_DatabaseVulnerabilityAssessmentScansInitiateScan_564136;
          apiVersion: string; serverName: string; scanId: string;
          subscriptionId: string; databaseName: string; resourceGroupName: string;
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentScansInitiateScan
  ## Executes a Vulnerability Assessment database scan.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   scanId: string (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the database.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  var path_564148 = newJObject()
  var query_564149 = newJObject()
  add(query_564149, "api-version", newJString(apiVersion))
  add(path_564148, "serverName", newJString(serverName))
  add(path_564148, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_564148, "scanId", newJString(scanId))
  add(path_564148, "subscriptionId", newJString(subscriptionId))
  add(path_564148, "databaseName", newJString(databaseName))
  add(path_564148, "resourceGroupName", newJString(resourceGroupName))
  result = call_564147.call(path_564148, query_564149, nil, nil, nil)

var databaseVulnerabilityAssessmentScansInitiateScan* = Call_DatabaseVulnerabilityAssessmentScansInitiateScan_564136(
    name: "databaseVulnerabilityAssessmentScansInitiateScan",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan",
    validator: validate_DatabaseVulnerabilityAssessmentScansInitiateScan_564137,
    base: "", url: url_DatabaseVulnerabilityAssessmentScansInitiateScan_564138,
    schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
