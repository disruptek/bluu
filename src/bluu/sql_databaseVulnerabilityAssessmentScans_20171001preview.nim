
import
  json, options, hashes, uri, openapi/rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: SqlManagementClient
## version: 2017-10-01-preview
## termsOfService: (not provided)
## license: (not provided)
## 
## The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_593424 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_593424](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_593424): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "sql-databaseVulnerabilityAssessmentScans"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_DatabaseVulnerabilityAssessmentScansListByDatabase_593646 = ref object of OpenApiRestCall_593424
proc url_DatabaseVulnerabilityAssessmentScansListByDatabase_593648(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentScansListByDatabase_593647(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Lists the vulnerability assessment scans of a database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the database.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593821 = path.getOrDefault("resourceGroupName")
  valid_593821 = validateParameter(valid_593821, JString, required = true,
                                 default = nil)
  if valid_593821 != nil:
    section.add "resourceGroupName", valid_593821
  var valid_593822 = path.getOrDefault("serverName")
  valid_593822 = validateParameter(valid_593822, JString, required = true,
                                 default = nil)
  if valid_593822 != nil:
    section.add "serverName", valid_593822
  var valid_593836 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_593836 = validateParameter(valid_593836, JString, required = true,
                                 default = newJString("default"))
  if valid_593836 != nil:
    section.add "vulnerabilityAssessmentName", valid_593836
  var valid_593837 = path.getOrDefault("subscriptionId")
  valid_593837 = validateParameter(valid_593837, JString, required = true,
                                 default = nil)
  if valid_593837 != nil:
    section.add "subscriptionId", valid_593837
  var valid_593838 = path.getOrDefault("databaseName")
  valid_593838 = validateParameter(valid_593838, JString, required = true,
                                 default = nil)
  if valid_593838 != nil:
    section.add "databaseName", valid_593838
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593839 = query.getOrDefault("api-version")
  valid_593839 = validateParameter(valid_593839, JString, required = true,
                                 default = nil)
  if valid_593839 != nil:
    section.add "api-version", valid_593839
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593862: Call_DatabaseVulnerabilityAssessmentScansListByDatabase_593646;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists the vulnerability assessment scans of a database.
  ## 
  let valid = call_593862.validator(path, query, header, formData, body)
  let scheme = call_593862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593862.url(scheme.get, call_593862.host, call_593862.base,
                         call_593862.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593862, url, valid)

proc call*(call_593933: Call_DatabaseVulnerabilityAssessmentScansListByDatabase_593646;
          resourceGroupName: string; apiVersion: string; serverName: string;
          subscriptionId: string; databaseName: string;
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentScansListByDatabase
  ## Lists the vulnerability assessment scans of a database.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the database.
  var path_593934 = newJObject()
  var query_593936 = newJObject()
  add(path_593934, "resourceGroupName", newJString(resourceGroupName))
  add(query_593936, "api-version", newJString(apiVersion))
  add(path_593934, "serverName", newJString(serverName))
  add(path_593934, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_593934, "subscriptionId", newJString(subscriptionId))
  add(path_593934, "databaseName", newJString(databaseName))
  result = call_593933.call(path_593934, query_593936, nil, nil, nil)

var databaseVulnerabilityAssessmentScansListByDatabase* = Call_DatabaseVulnerabilityAssessmentScansListByDatabase_593646(
    name: "databaseVulnerabilityAssessmentScansListByDatabase",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans",
    validator: validate_DatabaseVulnerabilityAssessmentScansListByDatabase_593647,
    base: "", url: url_DatabaseVulnerabilityAssessmentScansListByDatabase_593648,
    schemes: {Scheme.Https})
type
  Call_DatabaseVulnerabilityAssessmentScansGet_593975 = ref object of OpenApiRestCall_593424
proc url_DatabaseVulnerabilityAssessmentScansGet_593977(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "scanId" in path, "`scanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans/"),
               (kind: VariableSegment, value: "scanId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentScansGet_593976(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Gets a vulnerability assessment scan record of a database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: JString (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   databaseName: JString (required)
  ##               : The name of the database.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593978 = path.getOrDefault("resourceGroupName")
  valid_593978 = validateParameter(valid_593978, JString, required = true,
                                 default = nil)
  if valid_593978 != nil:
    section.add "resourceGroupName", valid_593978
  var valid_593979 = path.getOrDefault("serverName")
  valid_593979 = validateParameter(valid_593979, JString, required = true,
                                 default = nil)
  if valid_593979 != nil:
    section.add "serverName", valid_593979
  var valid_593980 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_593980 = validateParameter(valid_593980, JString, required = true,
                                 default = newJString("default"))
  if valid_593980 != nil:
    section.add "vulnerabilityAssessmentName", valid_593980
  var valid_593981 = path.getOrDefault("subscriptionId")
  valid_593981 = validateParameter(valid_593981, JString, required = true,
                                 default = nil)
  if valid_593981 != nil:
    section.add "subscriptionId", valid_593981
  var valid_593982 = path.getOrDefault("scanId")
  valid_593982 = validateParameter(valid_593982, JString, required = true,
                                 default = nil)
  if valid_593982 != nil:
    section.add "scanId", valid_593982
  var valid_593983 = path.getOrDefault("databaseName")
  valid_593983 = validateParameter(valid_593983, JString, required = true,
                                 default = nil)
  if valid_593983 != nil:
    section.add "databaseName", valid_593983
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593984 = query.getOrDefault("api-version")
  valid_593984 = validateParameter(valid_593984, JString, required = true,
                                 default = nil)
  if valid_593984 != nil:
    section.add "api-version", valid_593984
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593985: Call_DatabaseVulnerabilityAssessmentScansGet_593975;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a vulnerability assessment scan record of a database.
  ## 
  let valid = call_593985.validator(path, query, header, formData, body)
  let scheme = call_593985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593985.url(scheme.get, call_593985.host, call_593985.base,
                         call_593985.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593985, url, valid)

proc call*(call_593986: Call_DatabaseVulnerabilityAssessmentScansGet_593975;
          resourceGroupName: string; apiVersion: string; serverName: string;
          subscriptionId: string; scanId: string; databaseName: string;
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentScansGet
  ## Gets a vulnerability assessment scan record of a database.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: string (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   databaseName: string (required)
  ##               : The name of the database.
  var path_593987 = newJObject()
  var query_593988 = newJObject()
  add(path_593987, "resourceGroupName", newJString(resourceGroupName))
  add(query_593988, "api-version", newJString(apiVersion))
  add(path_593987, "serverName", newJString(serverName))
  add(path_593987, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_593987, "subscriptionId", newJString(subscriptionId))
  add(path_593987, "scanId", newJString(scanId))
  add(path_593987, "databaseName", newJString(databaseName))
  result = call_593986.call(path_593987, query_593988, nil, nil, nil)

var databaseVulnerabilityAssessmentScansGet* = Call_DatabaseVulnerabilityAssessmentScansGet_593975(
    name: "databaseVulnerabilityAssessmentScansGet", meth: HttpMethod.HttpGet,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
    validator: validate_DatabaseVulnerabilityAssessmentScansGet_593976, base: "",
    url: url_DatabaseVulnerabilityAssessmentScansGet_593977,
    schemes: {Scheme.Https})
type
  Call_DatabaseVulnerabilityAssessmentScansExport_593989 = ref object of OpenApiRestCall_593424
proc url_DatabaseVulnerabilityAssessmentScansExport_593991(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "scanId" in path, "`scanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans/"),
               (kind: VariableSegment, value: "scanId"),
               (kind: ConstantSegment, value: "/export")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentScansExport_593990(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Convert an existing scan result to a human readable format. If already exists nothing happens
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: JString (required)
  ##         : The vulnerability assessment scan Id.
  ##   databaseName: JString (required)
  ##               : The name of the scanned database.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_593992 = path.getOrDefault("resourceGroupName")
  valid_593992 = validateParameter(valid_593992, JString, required = true,
                                 default = nil)
  if valid_593992 != nil:
    section.add "resourceGroupName", valid_593992
  var valid_593993 = path.getOrDefault("serverName")
  valid_593993 = validateParameter(valid_593993, JString, required = true,
                                 default = nil)
  if valid_593993 != nil:
    section.add "serverName", valid_593993
  var valid_593994 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_593994 = validateParameter(valid_593994, JString, required = true,
                                 default = newJString("default"))
  if valid_593994 != nil:
    section.add "vulnerabilityAssessmentName", valid_593994
  var valid_593995 = path.getOrDefault("subscriptionId")
  valid_593995 = validateParameter(valid_593995, JString, required = true,
                                 default = nil)
  if valid_593995 != nil:
    section.add "subscriptionId", valid_593995
  var valid_593996 = path.getOrDefault("scanId")
  valid_593996 = validateParameter(valid_593996, JString, required = true,
                                 default = nil)
  if valid_593996 != nil:
    section.add "scanId", valid_593996
  var valid_593997 = path.getOrDefault("databaseName")
  valid_593997 = validateParameter(valid_593997, JString, required = true,
                                 default = nil)
  if valid_593997 != nil:
    section.add "databaseName", valid_593997
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_593998 = query.getOrDefault("api-version")
  valid_593998 = validateParameter(valid_593998, JString, required = true,
                                 default = nil)
  if valid_593998 != nil:
    section.add "api-version", valid_593998
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593999: Call_DatabaseVulnerabilityAssessmentScansExport_593989;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Convert an existing scan result to a human readable format. If already exists nothing happens
  ## 
  let valid = call_593999.validator(path, query, header, formData, body)
  let scheme = call_593999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593999.url(scheme.get, call_593999.host, call_593999.base,
                         call_593999.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593999, url, valid)

proc call*(call_594000: Call_DatabaseVulnerabilityAssessmentScansExport_593989;
          resourceGroupName: string; apiVersion: string; serverName: string;
          subscriptionId: string; scanId: string; databaseName: string;
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentScansExport
  ## Convert an existing scan result to a human readable format. If already exists nothing happens
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: string (required)
  ##         : The vulnerability assessment scan Id.
  ##   databaseName: string (required)
  ##               : The name of the scanned database.
  var path_594001 = newJObject()
  var query_594002 = newJObject()
  add(path_594001, "resourceGroupName", newJString(resourceGroupName))
  add(query_594002, "api-version", newJString(apiVersion))
  add(path_594001, "serverName", newJString(serverName))
  add(path_594001, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_594001, "subscriptionId", newJString(subscriptionId))
  add(path_594001, "scanId", newJString(scanId))
  add(path_594001, "databaseName", newJString(databaseName))
  result = call_594000.call(path_594001, query_594002, nil, nil, nil)

var databaseVulnerabilityAssessmentScansExport* = Call_DatabaseVulnerabilityAssessmentScansExport_593989(
    name: "databaseVulnerabilityAssessmentScansExport", meth: HttpMethod.HttpPost,
    host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export",
    validator: validate_DatabaseVulnerabilityAssessmentScansExport_593990,
    base: "", url: url_DatabaseVulnerabilityAssessmentScansExport_593991,
    schemes: {Scheme.Https})
type
  Call_DatabaseVulnerabilityAssessmentScansInitiateScan_594003 = ref object of OpenApiRestCall_593424
proc url_DatabaseVulnerabilityAssessmentScansInitiateScan_594005(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "serverName" in path, "`serverName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "scanId" in path, "`scanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/servers/"),
               (kind: VariableSegment, value: "serverName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans/"),
               (kind: VariableSegment, value: "scanId"),
               (kind: ConstantSegment, value: "/initiateScan")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_DatabaseVulnerabilityAssessmentScansInitiateScan_594004(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Executes a Vulnerability Assessment database scan.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   serverName: JString (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: JString (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   databaseName: JString (required)
  ##               : The name of the database.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_594006 = path.getOrDefault("resourceGroupName")
  valid_594006 = validateParameter(valid_594006, JString, required = true,
                                 default = nil)
  if valid_594006 != nil:
    section.add "resourceGroupName", valid_594006
  var valid_594007 = path.getOrDefault("serverName")
  valid_594007 = validateParameter(valid_594007, JString, required = true,
                                 default = nil)
  if valid_594007 != nil:
    section.add "serverName", valid_594007
  var valid_594008 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_594008 = validateParameter(valid_594008, JString, required = true,
                                 default = newJString("default"))
  if valid_594008 != nil:
    section.add "vulnerabilityAssessmentName", valid_594008
  var valid_594009 = path.getOrDefault("subscriptionId")
  valid_594009 = validateParameter(valid_594009, JString, required = true,
                                 default = nil)
  if valid_594009 != nil:
    section.add "subscriptionId", valid_594009
  var valid_594010 = path.getOrDefault("scanId")
  valid_594010 = validateParameter(valid_594010, JString, required = true,
                                 default = nil)
  if valid_594010 != nil:
    section.add "scanId", valid_594010
  var valid_594011 = path.getOrDefault("databaseName")
  valid_594011 = validateParameter(valid_594011, JString, required = true,
                                 default = nil)
  if valid_594011 != nil:
    section.add "databaseName", valid_594011
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_594012 = query.getOrDefault("api-version")
  valid_594012 = validateParameter(valid_594012, JString, required = true,
                                 default = nil)
  if valid_594012 != nil:
    section.add "api-version", valid_594012
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594013: Call_DatabaseVulnerabilityAssessmentScansInitiateScan_594003;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Executes a Vulnerability Assessment database scan.
  ## 
  let valid = call_594013.validator(path, query, header, formData, body)
  let scheme = call_594013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594013.url(scheme.get, call_594013.host, call_594013.base,
                         call_594013.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594013, url, valid)

proc call*(call_594014: Call_DatabaseVulnerabilityAssessmentScansInitiateScan_594003;
          resourceGroupName: string; apiVersion: string; serverName: string;
          subscriptionId: string; scanId: string; databaseName: string;
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## databaseVulnerabilityAssessmentScansInitiateScan
  ## Executes a Vulnerability Assessment database scan.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   serverName: string (required)
  ##             : The name of the server.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: string (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   databaseName: string (required)
  ##               : The name of the database.
  var path_594015 = newJObject()
  var query_594016 = newJObject()
  add(path_594015, "resourceGroupName", newJString(resourceGroupName))
  add(query_594016, "api-version", newJString(apiVersion))
  add(path_594015, "serverName", newJString(serverName))
  add(path_594015, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_594015, "subscriptionId", newJString(subscriptionId))
  add(path_594015, "scanId", newJString(scanId))
  add(path_594015, "databaseName", newJString(databaseName))
  result = call_594014.call(path_594015, query_594016, nil, nil, nil)

var databaseVulnerabilityAssessmentScansInitiateScan* = Call_DatabaseVulnerabilityAssessmentScansInitiateScan_594003(
    name: "databaseVulnerabilityAssessmentScansInitiateScan",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan",
    validator: validate_DatabaseVulnerabilityAssessmentScansInitiateScan_594004,
    base: "", url: url_DatabaseVulnerabilityAssessmentScansInitiateScan_594005,
    schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
