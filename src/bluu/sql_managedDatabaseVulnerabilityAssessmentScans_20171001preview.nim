
import
  json, options, hashes, uri, rest, os, uri, strutils, httpcore

## auto-generated via openapi macro
## title: SqlManagementClient
## version: 2017-10-01-preview
## termsOfService: (not provided)
## license: (not provided)
## 
## The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
## 
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_567657 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_567657](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_567657): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  macServiceName = "sql-managedDatabaseVulnerabilityAssessmentScans"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_ManagedDatabaseVulnerabilityAssessmentScansListByDatabase_567879 = ref object of OpenApiRestCall_567657
proc url_ManagedDatabaseVulnerabilityAssessmentScansListByDatabase_567881(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "managedInstanceName" in path,
        "`managedInstanceName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/managedInstances/"),
               (kind: VariableSegment, value: "managedInstanceName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedDatabaseVulnerabilityAssessmentScansListByDatabase_567880(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Lists the vulnerability assessment scans of a database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   managedInstanceName: JString (required)
  ##                      : The name of the managed instance.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: JString (required)
  ##               : The name of the database.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568054 = path.getOrDefault("resourceGroupName")
  valid_568054 = validateParameter(valid_568054, JString, required = true,
                                 default = nil)
  if valid_568054 != nil:
    section.add "resourceGroupName", valid_568054
  var valid_568055 = path.getOrDefault("managedInstanceName")
  valid_568055 = validateParameter(valid_568055, JString, required = true,
                                 default = nil)
  if valid_568055 != nil:
    section.add "managedInstanceName", valid_568055
  var valid_568069 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_568069 = validateParameter(valid_568069, JString, required = true,
                                 default = newJString("default"))
  if valid_568069 != nil:
    section.add "vulnerabilityAssessmentName", valid_568069
  var valid_568070 = path.getOrDefault("subscriptionId")
  valid_568070 = validateParameter(valid_568070, JString, required = true,
                                 default = nil)
  if valid_568070 != nil:
    section.add "subscriptionId", valid_568070
  var valid_568071 = path.getOrDefault("databaseName")
  valid_568071 = validateParameter(valid_568071, JString, required = true,
                                 default = nil)
  if valid_568071 != nil:
    section.add "databaseName", valid_568071
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568072 = query.getOrDefault("api-version")
  valid_568072 = validateParameter(valid_568072, JString, required = true,
                                 default = nil)
  if valid_568072 != nil:
    section.add "api-version", valid_568072
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568095: Call_ManagedDatabaseVulnerabilityAssessmentScansListByDatabase_567879;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists the vulnerability assessment scans of a database.
  ## 
  let valid = call_568095.validator(path, query, header, formData, body)
  let scheme = call_568095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568095.url(scheme.get, call_568095.host, call_568095.base,
                         call_568095.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568095, url, valid)

proc call*(call_568166: Call_ManagedDatabaseVulnerabilityAssessmentScansListByDatabase_567879;
          resourceGroupName: string; apiVersion: string;
          managedInstanceName: string; subscriptionId: string; databaseName: string;
          vulnerabilityAssessmentName: string = "default"): Recallable =
  ## managedDatabaseVulnerabilityAssessmentScansListByDatabase
  ## Lists the vulnerability assessment scans of a database.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   managedInstanceName: string (required)
  ##                      : The name of the managed instance.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   databaseName: string (required)
  ##               : The name of the database.
  var path_568167 = newJObject()
  var query_568169 = newJObject()
  add(path_568167, "resourceGroupName", newJString(resourceGroupName))
  add(query_568169, "api-version", newJString(apiVersion))
  add(path_568167, "managedInstanceName", newJString(managedInstanceName))
  add(path_568167, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_568167, "subscriptionId", newJString(subscriptionId))
  add(path_568167, "databaseName", newJString(databaseName))
  result = call_568166.call(path_568167, query_568169, nil, nil, nil)

var managedDatabaseVulnerabilityAssessmentScansListByDatabase* = Call_ManagedDatabaseVulnerabilityAssessmentScansListByDatabase_567879(
    name: "managedDatabaseVulnerabilityAssessmentScansListByDatabase",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans", validator: validate_ManagedDatabaseVulnerabilityAssessmentScansListByDatabase_567880,
    base: "", url: url_ManagedDatabaseVulnerabilityAssessmentScansListByDatabase_567881,
    schemes: {Scheme.Https})
type
  Call_ManagedDatabaseVulnerabilityAssessmentScansGet_568208 = ref object of OpenApiRestCall_567657
proc url_ManagedDatabaseVulnerabilityAssessmentScansGet_568210(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "managedInstanceName" in path,
        "`managedInstanceName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "scanId" in path, "`scanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/managedInstances/"),
               (kind: VariableSegment, value: "managedInstanceName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans/"),
               (kind: VariableSegment, value: "scanId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedDatabaseVulnerabilityAssessmentScansGet_568209(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Gets a vulnerability assessment scan record of a database.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   managedInstanceName: JString (required)
  ##                      : The name of the managed instance.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: JString (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   databaseName: JString (required)
  ##               : The name of the database.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568211 = path.getOrDefault("resourceGroupName")
  valid_568211 = validateParameter(valid_568211, JString, required = true,
                                 default = nil)
  if valid_568211 != nil:
    section.add "resourceGroupName", valid_568211
  var valid_568212 = path.getOrDefault("managedInstanceName")
  valid_568212 = validateParameter(valid_568212, JString, required = true,
                                 default = nil)
  if valid_568212 != nil:
    section.add "managedInstanceName", valid_568212
  var valid_568213 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_568213 = validateParameter(valid_568213, JString, required = true,
                                 default = newJString("default"))
  if valid_568213 != nil:
    section.add "vulnerabilityAssessmentName", valid_568213
  var valid_568214 = path.getOrDefault("subscriptionId")
  valid_568214 = validateParameter(valid_568214, JString, required = true,
                                 default = nil)
  if valid_568214 != nil:
    section.add "subscriptionId", valid_568214
  var valid_568215 = path.getOrDefault("scanId")
  valid_568215 = validateParameter(valid_568215, JString, required = true,
                                 default = nil)
  if valid_568215 != nil:
    section.add "scanId", valid_568215
  var valid_568216 = path.getOrDefault("databaseName")
  valid_568216 = validateParameter(valid_568216, JString, required = true,
                                 default = nil)
  if valid_568216 != nil:
    section.add "databaseName", valid_568216
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568217 = query.getOrDefault("api-version")
  valid_568217 = validateParameter(valid_568217, JString, required = true,
                                 default = nil)
  if valid_568217 != nil:
    section.add "api-version", valid_568217
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568218: Call_ManagedDatabaseVulnerabilityAssessmentScansGet_568208;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Gets a vulnerability assessment scan record of a database.
  ## 
  let valid = call_568218.validator(path, query, header, formData, body)
  let scheme = call_568218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568218.url(scheme.get, call_568218.host, call_568218.base,
                         call_568218.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568218, url, valid)

proc call*(call_568219: Call_ManagedDatabaseVulnerabilityAssessmentScansGet_568208;
          resourceGroupName: string; apiVersion: string;
          managedInstanceName: string; subscriptionId: string; scanId: string;
          databaseName: string; vulnerabilityAssessmentName: string = "default"): Recallable =
  ## managedDatabaseVulnerabilityAssessmentScansGet
  ## Gets a vulnerability assessment scan record of a database.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   managedInstanceName: string (required)
  ##                      : The name of the managed instance.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: string (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   databaseName: string (required)
  ##               : The name of the database.
  var path_568220 = newJObject()
  var query_568221 = newJObject()
  add(path_568220, "resourceGroupName", newJString(resourceGroupName))
  add(query_568221, "api-version", newJString(apiVersion))
  add(path_568220, "managedInstanceName", newJString(managedInstanceName))
  add(path_568220, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_568220, "subscriptionId", newJString(subscriptionId))
  add(path_568220, "scanId", newJString(scanId))
  add(path_568220, "databaseName", newJString(databaseName))
  result = call_568219.call(path_568220, query_568221, nil, nil, nil)

var managedDatabaseVulnerabilityAssessmentScansGet* = Call_ManagedDatabaseVulnerabilityAssessmentScansGet_568208(
    name: "managedDatabaseVulnerabilityAssessmentScansGet",
    meth: HttpMethod.HttpGet, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
    validator: validate_ManagedDatabaseVulnerabilityAssessmentScansGet_568209,
    base: "", url: url_ManagedDatabaseVulnerabilityAssessmentScansGet_568210,
    schemes: {Scheme.Https})
type
  Call_ManagedDatabaseVulnerabilityAssessmentScansExport_568222 = ref object of OpenApiRestCall_567657
proc url_ManagedDatabaseVulnerabilityAssessmentScansExport_568224(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "managedInstanceName" in path,
        "`managedInstanceName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "scanId" in path, "`scanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/managedInstances/"),
               (kind: VariableSegment, value: "managedInstanceName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans/"),
               (kind: VariableSegment, value: "scanId"),
               (kind: ConstantSegment, value: "/export")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedDatabaseVulnerabilityAssessmentScansExport_568223(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Convert an existing scan result to a human readable format. If already exists nothing happens
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   managedInstanceName: JString (required)
  ##                      : The name of the managed instance.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: JString (required)
  ##         : The vulnerability assessment scan Id.
  ##   databaseName: JString (required)
  ##               : The name of the scanned database.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568225 = path.getOrDefault("resourceGroupName")
  valid_568225 = validateParameter(valid_568225, JString, required = true,
                                 default = nil)
  if valid_568225 != nil:
    section.add "resourceGroupName", valid_568225
  var valid_568226 = path.getOrDefault("managedInstanceName")
  valid_568226 = validateParameter(valid_568226, JString, required = true,
                                 default = nil)
  if valid_568226 != nil:
    section.add "managedInstanceName", valid_568226
  var valid_568227 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_568227 = validateParameter(valid_568227, JString, required = true,
                                 default = newJString("default"))
  if valid_568227 != nil:
    section.add "vulnerabilityAssessmentName", valid_568227
  var valid_568228 = path.getOrDefault("subscriptionId")
  valid_568228 = validateParameter(valid_568228, JString, required = true,
                                 default = nil)
  if valid_568228 != nil:
    section.add "subscriptionId", valid_568228
  var valid_568229 = path.getOrDefault("scanId")
  valid_568229 = validateParameter(valid_568229, JString, required = true,
                                 default = nil)
  if valid_568229 != nil:
    section.add "scanId", valid_568229
  var valid_568230 = path.getOrDefault("databaseName")
  valid_568230 = validateParameter(valid_568230, JString, required = true,
                                 default = nil)
  if valid_568230 != nil:
    section.add "databaseName", valid_568230
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568231 = query.getOrDefault("api-version")
  valid_568231 = validateParameter(valid_568231, JString, required = true,
                                 default = nil)
  if valid_568231 != nil:
    section.add "api-version", valid_568231
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568232: Call_ManagedDatabaseVulnerabilityAssessmentScansExport_568222;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Convert an existing scan result to a human readable format. If already exists nothing happens
  ## 
  let valid = call_568232.validator(path, query, header, formData, body)
  let scheme = call_568232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568232.url(scheme.get, call_568232.host, call_568232.base,
                         call_568232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568232, url, valid)

proc call*(call_568233: Call_ManagedDatabaseVulnerabilityAssessmentScansExport_568222;
          resourceGroupName: string; apiVersion: string;
          managedInstanceName: string; subscriptionId: string; scanId: string;
          databaseName: string; vulnerabilityAssessmentName: string = "default"): Recallable =
  ## managedDatabaseVulnerabilityAssessmentScansExport
  ## Convert an existing scan result to a human readable format. If already exists nothing happens
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   managedInstanceName: string (required)
  ##                      : The name of the managed instance.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: string (required)
  ##         : The vulnerability assessment scan Id.
  ##   databaseName: string (required)
  ##               : The name of the scanned database.
  var path_568234 = newJObject()
  var query_568235 = newJObject()
  add(path_568234, "resourceGroupName", newJString(resourceGroupName))
  add(query_568235, "api-version", newJString(apiVersion))
  add(path_568234, "managedInstanceName", newJString(managedInstanceName))
  add(path_568234, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_568234, "subscriptionId", newJString(subscriptionId))
  add(path_568234, "scanId", newJString(scanId))
  add(path_568234, "databaseName", newJString(databaseName))
  result = call_568233.call(path_568234, query_568235, nil, nil, nil)

var managedDatabaseVulnerabilityAssessmentScansExport* = Call_ManagedDatabaseVulnerabilityAssessmentScansExport_568222(
    name: "managedDatabaseVulnerabilityAssessmentScansExport",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export",
    validator: validate_ManagedDatabaseVulnerabilityAssessmentScansExport_568223,
    base: "", url: url_ManagedDatabaseVulnerabilityAssessmentScansExport_568224,
    schemes: {Scheme.Https})
type
  Call_ManagedDatabaseVulnerabilityAssessmentScansInitiateScan_568236 = ref object of OpenApiRestCall_567657
proc url_ManagedDatabaseVulnerabilityAssessmentScansInitiateScan_568238(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "subscriptionId" in path, "`subscriptionId` is a required path parameter"
  assert "resourceGroupName" in path,
        "`resourceGroupName` is a required path parameter"
  assert "managedInstanceName" in path,
        "`managedInstanceName` is a required path parameter"
  assert "databaseName" in path, "`databaseName` is a required path parameter"
  assert "vulnerabilityAssessmentName" in path,
        "`vulnerabilityAssessmentName` is a required path parameter"
  assert "scanId" in path, "`scanId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/subscriptions/"),
               (kind: VariableSegment, value: "subscriptionId"),
               (kind: ConstantSegment, value: "/resourceGroups/"),
               (kind: VariableSegment, value: "resourceGroupName"), (
        kind: ConstantSegment, value: "/providers/Microsoft.Sql/managedInstances/"),
               (kind: VariableSegment, value: "managedInstanceName"),
               (kind: ConstantSegment, value: "/databases/"),
               (kind: VariableSegment, value: "databaseName"),
               (kind: ConstantSegment, value: "/vulnerabilityAssessments/"),
               (kind: VariableSegment, value: "vulnerabilityAssessmentName"),
               (kind: ConstantSegment, value: "/scans/"),
               (kind: VariableSegment, value: "scanId"),
               (kind: ConstantSegment, value: "/initiateScan")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  result.path = base & hydrated.get

proc validate_ManagedDatabaseVulnerabilityAssessmentScansInitiateScan_568237(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## Executes a Vulnerability Assessment database scan.
  ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   resourceGroupName: JString (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   managedInstanceName: JString (required)
  ##                      : The name of the managed instance.
  ##   vulnerabilityAssessmentName: JString (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: JString (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: JString (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   databaseName: JString (required)
  ##               : The name of the database.
  section = newJObject()
  assert path != nil,
        "path argument is necessary due to required `resourceGroupName` field"
  var valid_568239 = path.getOrDefault("resourceGroupName")
  valid_568239 = validateParameter(valid_568239, JString, required = true,
                                 default = nil)
  if valid_568239 != nil:
    section.add "resourceGroupName", valid_568239
  var valid_568240 = path.getOrDefault("managedInstanceName")
  valid_568240 = validateParameter(valid_568240, JString, required = true,
                                 default = nil)
  if valid_568240 != nil:
    section.add "managedInstanceName", valid_568240
  var valid_568241 = path.getOrDefault("vulnerabilityAssessmentName")
  valid_568241 = validateParameter(valid_568241, JString, required = true,
                                 default = newJString("default"))
  if valid_568241 != nil:
    section.add "vulnerabilityAssessmentName", valid_568241
  var valid_568242 = path.getOrDefault("subscriptionId")
  valid_568242 = validateParameter(valid_568242, JString, required = true,
                                 default = nil)
  if valid_568242 != nil:
    section.add "subscriptionId", valid_568242
  var valid_568243 = path.getOrDefault("scanId")
  valid_568243 = validateParameter(valid_568243, JString, required = true,
                                 default = nil)
  if valid_568243 != nil:
    section.add "scanId", valid_568243
  var valid_568244 = path.getOrDefault("databaseName")
  valid_568244 = validateParameter(valid_568244, JString, required = true,
                                 default = nil)
  if valid_568244 != nil:
    section.add "databaseName", valid_568244
  result.add "path", section
  ## parameters in `query` object:
  ##   api-version: JString (required)
  ##              : The API version to use for the request.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `api-version` field"
  var valid_568245 = query.getOrDefault("api-version")
  valid_568245 = validateParameter(valid_568245, JString, required = true,
                                 default = nil)
  if valid_568245 != nil:
    section.add "api-version", valid_568245
  result.add "query", section
  section = newJObject()
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_568246: Call_ManagedDatabaseVulnerabilityAssessmentScansInitiateScan_568236;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Executes a Vulnerability Assessment database scan.
  ## 
  let valid = call_568246.validator(path, query, header, formData, body)
  let scheme = call_568246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_568246.url(scheme.get, call_568246.host, call_568246.base,
                         call_568246.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_568246, url, valid)

proc call*(call_568247: Call_ManagedDatabaseVulnerabilityAssessmentScansInitiateScan_568236;
          resourceGroupName: string; apiVersion: string;
          managedInstanceName: string; subscriptionId: string; scanId: string;
          databaseName: string; vulnerabilityAssessmentName: string = "default"): Recallable =
  ## managedDatabaseVulnerabilityAssessmentScansInitiateScan
  ## Executes a Vulnerability Assessment database scan.
  ##   resourceGroupName: string (required)
  ##                    : The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  ##   apiVersion: string (required)
  ##             : The API version to use for the request.
  ##   managedInstanceName: string (required)
  ##                      : The name of the managed instance.
  ##   vulnerabilityAssessmentName: string (required)
  ##                              : The name of the vulnerability assessment.
  ##   subscriptionId: string (required)
  ##                 : The subscription ID that identifies an Azure subscription.
  ##   scanId: string (required)
  ##         : The vulnerability assessment scan Id of the scan to retrieve.
  ##   databaseName: string (required)
  ##               : The name of the database.
  var path_568248 = newJObject()
  var query_568249 = newJObject()
  add(path_568248, "resourceGroupName", newJString(resourceGroupName))
  add(query_568249, "api-version", newJString(apiVersion))
  add(path_568248, "managedInstanceName", newJString(managedInstanceName))
  add(path_568248, "vulnerabilityAssessmentName",
      newJString(vulnerabilityAssessmentName))
  add(path_568248, "subscriptionId", newJString(subscriptionId))
  add(path_568248, "scanId", newJString(scanId))
  add(path_568248, "databaseName", newJString(databaseName))
  result = call_568247.call(path_568248, query_568249, nil, nil, nil)

var managedDatabaseVulnerabilityAssessmentScansInitiateScan* = Call_ManagedDatabaseVulnerabilityAssessmentScansInitiateScan_568236(
    name: "managedDatabaseVulnerabilityAssessmentScansInitiateScan",
    meth: HttpMethod.HttpPost, host: "management.azure.com", route: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan", validator: validate_ManagedDatabaseVulnerabilityAssessmentScansInitiateScan_568237,
    base: "", url: url_ManagedDatabaseVulnerabilityAssessmentScansInitiateScan_568238,
    schemes: {Scheme.Https})
export
  rest

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
